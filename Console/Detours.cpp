#include "Detours.h"

// Default
#include <tchar.h>

// STL
#include <unordered_map>

// RTTI

#define BCD_NOTVISIBLE			0x00000001
#define BCD_AMBIGUOUS			0x00000002
#define BCD_PRIVORPROTBASE		0x00000004
#define BCD_PRIVORPROTINCOMPOBJ	0x00000008
#define BCD_VBOFCONTOBJ			0x00000010
#define BCD_NONPOLYMORPHIC		0x00000020
#define BCD_HASPCHD				0x00000040 // pClassHierarchyDescriptor field is present

#define COL_SIG_REV0 0
#define COL_SIG_REV1 1

#define CHD_MULTINH		0x00000001
#define CHD_VIRTINH		0x00000002
#define CHD_AMBIGUOUS	0x00000004

// rddisasm

#define RET_EQ(x, y, z) \
	if ((x) == (y)) {   \
		return (z);     \
	}

#define RET_GE(x, y, z) \
	if ((x) >= (y)) {   \
		return (z);     \
	}

#define RET_GT(x, y, z) \
	if ((x) > (y)) {    \
		return (z);     \
	}

#define RD_ILUT_INDEX_MOD_MEM 0
#define RD_ILUT_INDEX_MOD_REG 1
#define RD_ILUT_INDEX_MAN_PREF_NONE 0
#define RD_ILUT_INDEX_MAN_PREF_66 1
#define RD_ILUT_INDEX_MAN_PREF_F3 2
#define RD_ILUT_INDEX_MAN_PREF_F2 3
#define RD_ILUT_INDEX_MODE_NONE 0
#define RD_ILUT_INDEX_MODE_16 1
#define RD_ILUT_INDEX_MODE_32 2
#define RD_ILUT_INDEX_MODE_64 3
#define RD_ILUT_INDEX_DSIZE_NONE 0
#define RD_ILUT_INDEX_DSIZE_16 1
#define RD_ILUT_INDEX_DSIZE_32 2
#define RD_ILUT_INDEX_DSIZE_64 3
#define RD_ILUT_INDEX_DSIZE_DEF64 4
#define RD_ILUT_INDEX_DSIZE_F64 5
#define RD_ILUT_INDEX_ASIZE_NONE 0
#define RD_ILUT_INDEX_ASIZE_16 1
#define RD_ILUT_INDEX_ASIZE_32 2
#define RD_ILUT_INDEX_ASIZE_64 3
#define RD_ILUT_INDEX_AUX_NONE 0
#define RD_ILUT_INDEX_AUX_REXB 1
#define RD_ILUT_INDEX_AUX_REXW 2
#define RD_ILUT_INDEX_AUX_O64 3
#define RD_ILUT_INDEX_AUX_F3 4
#define RD_ILUT_INDEX_AUX_REP 5
#define RD_ILUT_INDEX_AUX_RIPREL 6
#define RD_ILUT_FEATURE_NONE 0
#define RD_ILUT_FEATURE_MPX 1
#define RD_ILUT_FEATURE_CET 2
#define RD_ILUT_FEATURE_CLDEMOTE 3
#define RD_ILUT_FEATURE_PITI 4

#define RD_OP(TYPE, SIZE, FLAGS, ACC, DEC, BLOCK) \
	(static_cast<unsigned long long>(static_cast<unsigned long long>((TYPE)  & 0xFF) << 0x00)      | \
	(static_cast<unsigned long long>(static_cast<unsigned long long>((SIZE)  & 0xFF) << 0x08)      | \
	(static_cast<unsigned long long>(static_cast<unsigned long long>((FLAGS) & 0xFF) << 0x10)      | \
	(static_cast<unsigned long long>(static_cast<unsigned long long>((ACC)   & 0xFF) << 0x18)      | \
	(static_cast<unsigned long long>(static_cast<unsigned long long>((DEC)   & 0xFF) << 0x20)      | \
	(static_cast<unsigned long long>(static_cast<unsigned long long>((BLOCK) & 0xFF) << 0x28)))))))

#define RD_OP_TYPE(OP) ((OP) & 0xFF)
#define RD_OP_SIZE(OP) (((OP) >> 0x08) & 0xFF)
#define RD_OP_FLAGS(OP) (((OP) >> 0x10) & 0xFF)
#define RD_OP_ACCESS(OP) (((OP) >> 0x18) & 0xFF)
#define RD_OP_DECORATORS(OP) (((OP) >> 0x20) & 0xFF)
#define RD_OP_BLOCK(OP) (((OP) >> 0x28) & 0xFF)

#define RD_OPF_DEFAULT 0x01
#define RD_OPF_SEX_OP1 0x02
#define RD_OPF_SEX_DWS 0x04

#define RD_OPA_N 0x00
#define RD_OPA_R 0x01
#define RD_OPA_W 0x02
#define RD_OPA_CR 0x04
#define RD_OPA_CW 0x08
#define RD_OPA_RW 0x03
#define RD_OPA_RCW 0x09
#define RD_OPA_CRW 0X06
#define RD_OPA_CRCW 0x0C
#define RD_OPA_P 0x10

#define RD_OPD_MASK 0x01
#define RD_OPD_Z 0x02
#define RD_OPD_B32 0x04
#define RD_OPD_B64 0x08
#define RD_OPD_SAE 0x10
#define RD_OPD_ER 0x20
#define RD_OPD_B16 0x40
#define RD_OPD_BCAST (RD_OPD_B16 | RD_OPD_B32 | RD_OPD_B64)

#define RD_PREF_CODE_NONE 0
#define RD_PREF_CODE_STANDARD 1
#define RD_PREF_CODE_EX 2
#define RD_PREF_CODE_REX 3

// ----------------------------------------------------------------
// Detours
// ----------------------------------------------------------------

namespace Detours {

	// ----------------------------------------------------------------
	// Namespaces
	// ----------------------------------------------------------------

	using namespace LDR;
	using namespace Codec;
	using namespace Hexadecimal;
	using namespace Scan;
	using namespace RTTI;
	using namespace Sync;
	using namespace Pipe;
	using namespace Parallel;
	using namespace Memory;
	using namespace Exception;
	using namespace rddisasm;
	using namespace Hook;

	// ----------------------------------------------------------------
	// Storage
	// ----------------------------------------------------------------

	static std::unordered_map<void*, std::unique_ptr<Protection>> g_Protections;
	static std::unordered_map<void*, std::unique_ptr<MemoryHook>> g_MemoryHooks;
	static std::unordered_map<void*, std::unique_ptr<InterruptHook>> g_InterruptHooks;
	static NearStorage g_HookStorage(HOOK_STORAGE_CAPACITY);

	// ----------------------------------------------------------------
	// KUSER_SHARED_DATA
	// ----------------------------------------------------------------

	const volatile KUSER_SHARED_DATA& KUserSharedData = *reinterpret_cast<PKUSER_SHARED_DATA>(0x7FFE0000);

	// ----------------------------------------------------------------
	// PEB
	// ----------------------------------------------------------------

	PPEB GetPEB() {
#ifdef _M_X64
		return reinterpret_cast<PPEB>(__readgsqword(0x60));
#elif _M_IX86
		return reinterpret_cast<PPEB>(__readfsdword(0x30));
#endif
	}

	// ----------------------------------------------------------------
	// TEB
	// ----------------------------------------------------------------

	PTEB GetTEB() {
#ifdef _M_X64
		return reinterpret_cast<PTEB>(__readgsqword(0x30));
#elif _M_IX86
		return reinterpret_cast<PTEB>(__readfsdword(0x18));
#endif
	}

	// ----------------------------------------------------------------
	// LDR
	// ----------------------------------------------------------------

	namespace LDR {

		// ----------------------------------------------------------------
		// List Entry APIs
		// ----------------------------------------------------------------

		void InitializeListHead(PLIST_ENTRY pListHead) {
			if (pListHead) {
				pListHead->Flink = pListHead->Blink = pListHead;
			}
		}

		void InsertEntry(PLIST_ENTRY pPrev, PLIST_ENTRY pNext, PLIST_ENTRY pEntry) {
			if (pPrev && pNext && pEntry) {
				pEntry->Flink = pNext;
				pEntry->Blink = pPrev;

				if (pPrev->Flink) {
					pPrev->Flink->Blink = pEntry;
				}

				if (pNext->Blink) {
					pNext->Blink->Flink = pEntry;
				}

				pPrev->Flink = pEntry;
				pNext->Blink = pEntry;
			}
		}

		void InsertHeadList(PLIST_ENTRY pListHead, PLIST_ENTRY pEntry) {
			if (pListHead && pEntry) {
				InsertEntry(pListHead, pListHead->Flink, pEntry);
			}
		}

		void InsertTailList(PLIST_ENTRY pListHead, PLIST_ENTRY pEntry) {
			if (pListHead && pEntry) {
				InsertEntry(pListHead->Blink, pListHead, pEntry);
			}
		}

		void RemoveEntryList(PLIST_ENTRY pEntry) {
			if (pEntry) {
				PLIST_ENTRY pPrev = pEntry->Blink;
				PLIST_ENTRY pNext = pEntry->Flink;

				if (pPrev->Flink) {
					pPrev->Flink = pNext;
				}

				if (pNext->Blink) {
					pNext->Blink = pPrev;
				}
			}
		}

		void RemoveHeadList(PLIST_ENTRY pListHead) {
			if (pListHead && pListHead->Flink) {
				RemoveEntryList(pListHead->Flink);
			}
		}

		void RemoveTailList(PLIST_ENTRY pListHead) {
			if (pListHead && pListHead->Blink) {
				RemoveEntryList(pListHead->Blink);
			}
		}

		PLIST_ENTRY GetListHeadFromEntry(PLIST_ENTRY pEntry) {
			if (!pEntry) {
				return nullptr;
			}

			PLIST_ENTRY pHead = pEntry;

			while ((pHead->Blink != nullptr) && (pHead->Blink != pEntry)) {
				pHead = pHead->Blink;
			}

			return pEntry;
		}

		// ----------------------------------------------------------------
		// GetListHeads
		// ----------------------------------------------------------------

		bool GetHeadsOfLists(PLIST_ENTRY* pInLoadOrderModuleList, PLIST_ENTRY* pInMemoryOrderModuleList, PLIST_ENTRY* pInInitializationOrderModuleList) {
			auto pPEB = GetPEB();
			if (!pPEB) {
				return false;
			}

			auto pLDR = pPEB->Ldr;
			if (!pLDR) {
				return false;
			}

			if (pInLoadOrderModuleList) {
				*pInLoadOrderModuleList = &pLDR->InLoadOrderModuleList;
			}

			if (pInMemoryOrderModuleList) {
				*pInMemoryOrderModuleList = &pLDR->InMemoryOrderModuleList;
			}

			if (pInInitializationOrderModuleList) {
				*pInInitializationOrderModuleList = &pLDR->InInitializationOrderModuleList;
			}

			return true;
		}

		// ----------------------------------------------------------------
		// FindModuleListEntry
		// ----------------------------------------------------------------

		PLIST_ENTRY FindModuleListEntry(void* pBaseAddress) {
			if (!pBaseAddress) {
				return nullptr;
			}

			PLIST_ENTRY pInLoadOrderModuleList = nullptr;
			PLIST_ENTRY pInMemoryOrderModuleList = nullptr;
			PLIST_ENTRY pInInitializationOrderModuleList = nullptr;

			if (!GetHeadsOfLists(&pInLoadOrderModuleList, &pInMemoryOrderModuleList, &pInInitializationOrderModuleList)) {
				return nullptr;
			}

			if (pInLoadOrderModuleList) {
				PLIST_ENTRY pHead = pInLoadOrderModuleList;
				PLIST_ENTRY pEntry = pInLoadOrderModuleList->Flink;
				while (pEntry != pHead) {
					auto pDTE = CONTAINING_RECORD(pEntry, Detours::LDR_DATA_TABLE_ENTRY, InLoadOrderLinks);

					if (pDTE->DllBase == pBaseAddress) {
						return pEntry;
					}

					pEntry = pEntry->Flink;
				}
			}

			if (pInMemoryOrderModuleList) {
				PLIST_ENTRY pHead = pInMemoryOrderModuleList;
				PLIST_ENTRY pEntry = pInMemoryOrderModuleList->Flink;
				while (pEntry != pHead) {
					auto pDTE = CONTAINING_RECORD(pEntry, Detours::LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks);

					if (pDTE->DllBase == pBaseAddress) {
						return pEntry;
					}

					pEntry = pEntry->Flink;
				}
			}

			if (pInInitializationOrderModuleList) {
				PLIST_ENTRY pHead = pInInitializationOrderModuleList;
				PLIST_ENTRY pEntry = pInInitializationOrderModuleList->Flink;
				while (pEntry != pHead) {
					auto pDTE = CONTAINING_RECORD(pEntry, Detours::LDR_DATA_TABLE_ENTRY, InInitializationOrderLinks);

					if (pDTE->DllBase == pBaseAddress) {
						return pEntry;
					}

					pEntry = pEntry->Flink;
				}
			}

			return nullptr;
		}

		PLIST_ENTRY FindModuleListEntry(HMODULE hModule) {
			if (!hModule) {
				return nullptr;
			}

			return FindModuleListEntry(static_cast<void*>(hModule));
		}

		PLIST_ENTRY FindModuleListEntryA(const char* szModuleName) {
			if (!szModuleName) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindModuleListEntry(hModule);
		}

		PLIST_ENTRY FindModuleListEntryW(const wchar_t* szModuleName) {
			if (!szModuleName) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindModuleListEntry(hModule);
		}

#ifdef _UNICODE
		PLIST_ENTRY FindModuleListEntry(const wchar_t* szModuleName) {
			return FindModuleListEntryW(szModuleName);
		}
#else
		PLIST_ENTRY FindModuleListEntry(const char* szModuleName) {
			return FindModuleListEntryA(szModuleName);
		}
#endif

		// ----------------------------------------------------------------
		// FindModuleDataTableRecords
		// ----------------------------------------------------------------

		PLDR_DATA_TABLE_ENTRY FindModuleDataTableEntry(void* pBaseAddress) {
			if (!pBaseAddress) {
				return nullptr;
			}

			auto pEntry = FindModuleListEntry(pBaseAddress);
			if (!pEntry) {
				return nullptr;
			}

			return CONTAINING_RECORD(pEntry, Detours::LDR_DATA_TABLE_ENTRY, InLoadOrderLinks);
		}

		PLDR_DATA_TABLE_ENTRY FindModuleDataTableEntry(HMODULE hModule) {
			if (!hModule) {
				return nullptr;
			}

			return FindModuleDataTableEntry(static_cast<void*>(hModule));
		}

		PLDR_DATA_TABLE_ENTRY FindModuleDataTableEntryA(const char* szModuleName) {
			if (!szModuleName) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindModuleDataTableEntry(hModule);
		}

		PLDR_DATA_TABLE_ENTRY FindModuleDataTableEntryW(const wchar_t* szModuleName) {
			if (!szModuleName) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindModuleDataTableEntry(hModule);
		}

#ifdef _UNICODE
		PLDR_DATA_TABLE_ENTRY FindModuleDataTableEntry(const wchar_t* szModuleName) {
			return FindModuleDataTableEntryW(szModuleName);
		}
#else
		PLDR_DATA_TABLE_ENTRY FindModuleDataTableEntry(const char* szModuleName) {
			return FindModuleDataTableEntryA(szModuleName);
		}
#endif

		// ----------------------------------------------------------------
		// UnLinkModule
		// ----------------------------------------------------------------

		bool UnLinkModule(void* pBaseAddress, PLINK_DATA pLinkData) {
			if (!pBaseAddress || !pLinkData) {
				return false;
			}

			memset(pLinkData, 0, sizeof(LINK_DATA));

			auto pDTE = Detours::LDR::FindModuleDataTableEntry(pBaseAddress);
			if (!pDTE) {
				return false;
			}

			PLIST_ENTRY pInLoadOrderModuleList = nullptr;
			PLIST_ENTRY pInMemoryOrderModuleList = nullptr;
			PLIST_ENTRY pInInitializationOrderModuleList = nullptr;

			if (!GetHeadsOfLists(&pInLoadOrderModuleList, &pInMemoryOrderModuleList, &pInInitializationOrderModuleList)) {
				return false;
			}

			pLinkData->m_pHeadInLoadOrderLinks = pInLoadOrderModuleList;
			pLinkData->m_pHeadInMemoryOrderLinks = pInMemoryOrderModuleList;
			pLinkData->m_pHeadInInitializationOrderLinks = pInInitializationOrderModuleList;

			pLinkData->m_pHeadHashLinks = GetListHeadFromEntry(&pDTE->HashLinks);
			pLinkData->m_pHeadNodeModuleLink = GetListHeadFromEntry(&pDTE->NodeModuleLink);

			if (pLinkData->m_pHeadInLoadOrderLinks) {
				Detours::LDR::RemoveEntryList(&pDTE->InLoadOrderLinks);
				pLinkData->m_pSavedInLoadOrderLinks = &pDTE->InLoadOrderLinks;
			}

			if (pLinkData->m_pHeadInMemoryOrderLinks) {
				Detours::LDR::RemoveEntryList(&pDTE->InMemoryOrderLinks);
				pLinkData->m_pSavedInMemoryOrderLinks = &pDTE->InMemoryOrderLinks;
			}

			if (pLinkData->m_pHeadInInitializationOrderLinks) {
				Detours::LDR::RemoveEntryList(&pDTE->InInitializationOrderLinks);
				pLinkData->m_pSavedInInitializationOrderLinks = &pDTE->InInitializationOrderLinks;
			}

			if (pLinkData->m_pHeadHashLinks) {
				Detours::LDR::RemoveEntryList(&pDTE->HashLinks);
				pLinkData->m_pSavedHashLinks = &pDTE->HashLinks;
			}

			if (pLinkData->m_pHeadNodeModuleLink) {
				Detours::LDR::RemoveEntryList(&pDTE->NodeModuleLink);
				pLinkData->m_pSavedNodeModuleLink = &pDTE->NodeModuleLink;
			}

			return true;
		}

		bool UnLinkModule(HMODULE hModule, PLINK_DATA pLinkData) {
			return UnLinkModule(static_cast<void*>(hModule), pLinkData);
		}

		bool UnLinkModuleA(const char* szModuleName, PLINK_DATA pLinkData) {
			if (!szModuleName || !pLinkData) {
				return false;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return false;
			}

			return UnLinkModule(hModule, pLinkData);
		}

		bool UnLinkModuleW(const wchar_t* szModuleName, PLINK_DATA pLinkData) {
			if (!szModuleName || !pLinkData) {
				return false;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return false;
			}

			return UnLinkModule(hModule, pLinkData);
		}
#ifdef _UNICODE
		bool UnLinkModule(const wchar_t* szModuleName, PLINK_DATA pLinkData) {
			return UnLinkModuleW(szModuleName, pLinkData);
		}
#else
		bool UnLinkModule(const char* szModuleName, PLINK_DATA pLinkData) {
			return UnLinkModuleA(szModuleName, pLinkData);
		}
#endif

		// ----------------------------------------------------------------
		// ReLinkModule
		// ----------------------------------------------------------------

		bool ReLinkModule(LINK_DATA LinkData) {
			if (LinkData.m_pSavedInLoadOrderLinks) {
				if (!LinkData.m_pHeadInLoadOrderLinks) {
					return false;
				}
			}

			if (LinkData.m_pSavedInMemoryOrderLinks) {
				if (!LinkData.m_pHeadInMemoryOrderLinks) {
					return false;
				}
			}
	
			if (LinkData.m_pSavedInInitializationOrderLinks) {
				if (!LinkData.m_pHeadInInitializationOrderLinks) {
					return false;
				}
			}

			if (LinkData.m_pSavedHashLinks) {
				if (!LinkData.m_pHeadHashLinks) {
					return false;
				}
			}

			if (LinkData.m_pSavedNodeModuleLink) {
				if (!LinkData.m_pHeadNodeModuleLink) {
					return false;
				}
			}

			if (LinkData.m_pSavedInLoadOrderLinks) {
				Detours::LDR::InsertTailList(LinkData.m_pHeadInLoadOrderLinks, LinkData.m_pSavedInLoadOrderLinks);
			}

			if (LinkData.m_pSavedInMemoryOrderLinks) {
				Detours::LDR::InsertTailList(LinkData.m_pHeadInMemoryOrderLinks, LinkData.m_pSavedInMemoryOrderLinks);
			}

			if (LinkData.m_pSavedInInitializationOrderLinks) {
				Detours::LDR::InsertTailList(LinkData.m_pHeadInInitializationOrderLinks, LinkData.m_pSavedInInitializationOrderLinks);
			}

			if (LinkData.m_pSavedHashLinks) {
				Detours::LDR::InsertTailList(LinkData.m_pHeadHashLinks, LinkData.m_pSavedHashLinks);
			}

			if (LinkData.m_pSavedNodeModuleLink) {
				Detours::LDR::InsertTailList(LinkData.m_pHeadNodeModuleLink, LinkData.m_pSavedNodeModuleLink);
			}

			return true;
		}
	}

	// ----------------------------------------------------------------
	// Codec
	// ----------------------------------------------------------------

	namespace Codec {

		// ----------------------------------------------------------------
		// Encode
		// ----------------------------------------------------------------

		int Encode(const unsigned short unCodePage, char const* const szText, wchar_t* szBuffer, const int nBufferSize) {
			if (!unCodePage || !szText) {
				return -1;
			}

			const size_t unTextLength = strnlen_s(szText, 0x1000);
			if (!unTextLength) {
				return -1;
			}

			const int nSize = MultiByteToWideChar(unCodePage, NULL, szText, static_cast<int>(unTextLength), nullptr, 0);
			if (nSize <= 0) {
				return -1;
			}

			if (!szBuffer) {
				return nSize;
			}

			return MultiByteToWideChar(unCodePage, NULL, szText, static_cast<int>(unTextLength), szBuffer, nBufferSize);
		}

		// ----------------------------------------------------------------
		// Decode
		// ----------------------------------------------------------------

		int Decode(const unsigned short unCodePage, wchar_t const* const szText, char* szBuffer, const int nBufferSize) {
			if (!unCodePage || !szText) {
				return -1;
			}

			const size_t unTextLength = wcsnlen_s(szText, 0x1000);
			if (!unTextLength) {
				return -1;
			}

			const int nSize = WideCharToMultiByte(unCodePage, NULL, szText, static_cast<int>(unTextLength), nullptr, 0, nullptr, nullptr);
			if (nSize <= 0) {
				return -1;
			}

			if (!szBuffer) {
				return nSize;
			}

			return WideCharToMultiByte(unCodePage, NULL, szText, static_cast<int>(unTextLength), szBuffer, nBufferSize, nullptr, nullptr);
		}
	}

	// ----------------------------------------------------------------
	// Hexadecimal
	// ----------------------------------------------------------------

	namespace Hexadecimal {

		// ----------------------------------------------------------------
		// Encode
		// ----------------------------------------------------------------

		static const char g_pEncodeTable[16] = {
			'0', '1', '2', '3',
			'4', '5', '6', '7',
			'8', '9', 'A', 'B',
			'C', 'D', 'E', 'F'
		};

		bool EncodeA(void const* const pData, const size_t unSize, char* szHex, const unsigned char unIgnoredByte) {
			if (!pData || !unSize || !szHex) {
				return false;
			}

			unsigned char const* pByteData = reinterpret_cast<unsigned char const* const>(pData);
			for (size_t i = 0; i < unSize; ++i) {
				const unsigned char unByte = pByteData[i] ? pByteData[i] : unIgnoredByte;

				*szHex++ = g_pEncodeTable[unByte >> 4];
				*szHex++ = g_pEncodeTable[unByte & 15];
			}

			return true;
		}

		bool EncodeW(void const* const pData, const size_t unSize, wchar_t* szHex, const unsigned char unIgnoredByte) {
			if (!pData || !unSize || !szHex) {
				return false;
			}

			unsigned char const* pByteData = reinterpret_cast<unsigned char const* const>(pData);
			for (size_t i = 0; i < unSize; ++i) {
				const unsigned char unByte = pByteData[i] ? pByteData[i] : unIgnoredByte;

				*szHex++ = static_cast<wchar_t>(g_pEncodeTable[unByte >> 4]);
				*szHex++ = static_cast<wchar_t>(g_pEncodeTable[unByte & 15]);
			}

			return true;
		}

#ifdef _UNICODE
		bool Encode(void const* const pData, const size_t unSize, wchar_t* szHex, const unsigned char unIgnoredByte) {
			return EncodeW(pData, unSize, szHex, unIgnoredByte);
		}
#else
		bool Encode(void const* const pData, const size_t unSize, char* szHex, const unsigned char unIgnoredByte) {
			return EncodeA(pData, unSize, szHex, unIgnoredByte);
		}
#endif

		// ----------------------------------------------------------------
		// Decode
		// ----------------------------------------------------------------

		static const unsigned char g_pDecodeTable[512] = {
			// LOW
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			// HIGH
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70,
			0x80, 0x90, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xF0, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xF0, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
		};

		bool DecodeA(char const* const szHex, void* pData, const unsigned char unIgnoredByte) {
			if (!szHex || !pData) {
				return false;
			}

			const size_t unHexLength = strnlen_s(szHex, 0x1000);
			if (!unHexLength) {
				return false;
			}

			for (size_t i = 0; i < unHexLength; i += 2) {
				const unsigned char unHigh = szHex[i];
				const unsigned char unLow = szHex[i + 1];
				const unsigned char unByte = g_pDecodeTable[unHigh + 256] | g_pDecodeTable[unLow];

				if (unByte == unIgnoredByte) {
					i += 2;
					continue;
				}

				reinterpret_cast<unsigned char*>(pData)[i / 2] = unByte;
			}

			return true;
		}

		bool DecodeW(wchar_t const* const szHex, void* pData, const unsigned char unIgnoredByte) {
			if (!szHex || !pData) {
				return false;
			}

			const size_t unHexLength = wcsnlen_s(szHex, 0x1000);
			if (!unHexLength) {
				return false;
			}

			for (size_t i = 0; i < unHexLength; i += 2) {
				const unsigned char unHigh = static_cast<unsigned char>(szHex[i] & 0xFF);
				const unsigned char unLow = static_cast<unsigned char>(szHex[i + 1] & 0xFF);
				const unsigned char unByte = g_pDecodeTable[unHigh + 256] | g_pDecodeTable[unLow];

				if (unByte == unIgnoredByte) {
					i += 2;
					continue;
				}

				reinterpret_cast<unsigned char*>(pData)[i / 2] = unByte;
			}

			return true;
		}

#ifdef _UNICODE
		bool Decode(wchar_t const* const szHex, void* pData, const unsigned char unIgnoredByte) {
			return DecodeW(szHex, pData, unIgnoredByte);
		}
#else
		bool Decode(char const* const szHex, void* pData, const unsigned char unIgnoredByte) {
			return DecodeA(szHex, pData, unIgnoredByte);
		}
#endif
	}

	// ----------------------------------------------------------------
	// Scan
	// ----------------------------------------------------------------

	namespace Scan {

		// ----------------------------------------------------------------
		// __align_up
		// ----------------------------------------------------------------

		template <typename T>
		static const T inline __align_up(const T unValue, const T unAlignment) {
			static_assert(std::is_integral<T>::value, "Template argument must be an integral type");
			return (unValue + unAlignment - 1) & ~(unAlignment - 1);
		};

		// ----------------------------------------------------------------
		// __align_down
		// ----------------------------------------------------------------

		template <typename T>
		static const T inline __align_down(const T unValue, const T unAlignment) {
			static_assert(std::is_integral<T>::value, "Template argument must be an integral type");
			return unValue & ~(unAlignment - 1);
		};

		// ----------------------------------------------------------------
		// __bit_scan_forward
		// ----------------------------------------------------------------

		template <typename T>
		static const T inline __bit_scan_forward(const T unValue);

#ifdef _M_X64
		template <>
		const long long inline __bit_scan_forward<long long>(const long long unValue) {
			unsigned long unIndex = 0;
			if (_BitScanForward64(&unIndex, static_cast<unsigned long long>(unValue))) {
				return static_cast<long long>(unIndex);
			}

			return sizeof(long long) * CHAR_BIT;
		}

		template <>
		const unsigned long long inline __bit_scan_forward<unsigned long long>(const unsigned long long unValue) {
			unsigned long unIndex = 0;
			if (_BitScanForward64(&unIndex, static_cast<unsigned long long>(unValue))) {
				return static_cast<unsigned long long>(unIndex);
			}

			return sizeof(unsigned long long) * CHAR_BIT;
		}
#endif

		template <>
		const unsigned long inline __bit_scan_forward<unsigned long>(const unsigned long unValue) {
			unsigned long unIndex = 0;
			if (_BitScanForward(&unIndex, static_cast<unsigned long>(unValue))) {
				return static_cast<unsigned long>(unIndex);
			}

			return sizeof(unsigned long) * CHAR_BIT;
		}

		template <>
		const unsigned int inline __bit_scan_forward<unsigned int>(const unsigned int unValue) {
			unsigned long unIndex = 0;
			if (_BitScanForward(&unIndex, static_cast<unsigned long>(unValue))) {
				return static_cast<unsigned int>(unIndex);
			}

			return sizeof(unsigned int) * CHAR_BIT;
		}

		template <typename T>
		static const T inline __bit_scan_forward(const T unValue) {
			static_assert(std::is_integral<T>::value, "Template argument must be an integral type");

			for (unsigned char i = 0; i < (sizeof(T) * CHAR_BIT); ++i) {
				if (((unValue >> i) & 1) != 0) {
					return static_cast<T>(i);
				}
			}

			return static_cast<T>(sizeof(T) * CHAR_BIT);
		}

		// ----------------------------------------------------------------
		// FindSection
		// ----------------------------------------------------------------

		bool FindSection(const HMODULE hModule, const std::array<const unsigned char, 8>& SectionName, void** pAddress, size_t* pSize) noexcept {
			if (!hModule) {
				return false;
			}

			const auto& pDH = reinterpret_cast<PIMAGE_DOS_HEADER>(hModule);
			const auto& pNTHs = reinterpret_cast<PIMAGE_NT_HEADERS>(reinterpret_cast<char*>(hModule) + pDH->e_lfanew);
			const auto& pFH = &(pNTHs->FileHeader);
			const auto& pOH = &(pNTHs->OptionalHeader);

			const auto& pFirstSection = reinterpret_cast<PIMAGE_SECTION_HEADER>(reinterpret_cast<char*>(pOH) + pFH->SizeOfOptionalHeader);
			const WORD unNumberOfSections = pFH->NumberOfSections;
			const size_t unFileAlignment = static_cast<size_t>(pOH->FileAlignment);
			for (WORD i = 0; i < unNumberOfSections; ++i) {
				if (memcmp(SectionName.data(), pFirstSection[i].Name, 8) == 0) {
					if (pAddress) {
						*pAddress = reinterpret_cast<void*>(reinterpret_cast<char*>(hModule) + pFirstSection[i].VirtualAddress);
					}

					if (pSize) {
						*pSize = __align_up(static_cast<size_t>(pFirstSection[i].SizeOfRawData), unFileAlignment);
					}

					return true;
				}
			}

			return false;
		}

		bool FindSectionA(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, void** pAddress, size_t* pSize) noexcept {
			if (!szModuleName) {
				return false;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return false;
			}

			return FindSection(hModule, SectionName, pAddress, pSize);
		}

		bool FindSectionW(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, void** pAddress, size_t* pSize) noexcept {
			if (!szModuleName) {
				return false;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return false;
			}

			return FindSection(hModule, SectionName, pAddress, pSize);
		}

#ifdef _UNICODE
		bool FindSection(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, void** pAddress, size_t* pSize) noexcept {
			return FindSectionW(szModuleName, SectionName, pAddress, pSize);
		}
#else
		bool FindSection(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, void** pAddress, size_t* pSize) noexcept {
			return FindSectionA(szModuleName, SectionName, pAddress, pSize);
		}
#endif

		// ----------------------------------------------------------------
		// FindSectionPOGO
		// ----------------------------------------------------------------

		typedef struct _IMAGE_POGO_BLOCK {
			DWORD m_unRVA;
			DWORD m_unSize;
			char m_pName[1];
		} IMAGE_POGO_BLOCK, *PIMAGE_POGO_BLOCK;

		typedef struct _IMAGE_POGO_INFO {
			DWORD m_Signature; // 0x4C544347 = 'LTCG'
			IMAGE_POGO_BLOCK m_pBlocks[1];
		} IMAGE_POGO_INFO, *PIMAGE_POGO_INFO;

		bool FindSectionPOGO(const HMODULE hModule, char const* const szSectionName, void** pAddress, size_t* pSize) noexcept {
			if (!hModule || !szSectionName) {
				return false;
			}

			const auto& pDH = reinterpret_cast<PIMAGE_DOS_HEADER>(hModule);
			const auto& pNTHs = reinterpret_cast<PIMAGE_NT_HEADERS>(reinterpret_cast<char*>(hModule) + pDH->e_lfanew);
			const auto& pOH = &(pNTHs->OptionalHeader);

			const auto& DebugDD = pOH->DataDirectory[IMAGE_DIRECTORY_ENTRY_DEBUG];
			if (!DebugDD.Size) {
				return false;
			}

			const auto& pDebugDirectory = reinterpret_cast<PIMAGE_DEBUG_DIRECTORY>(reinterpret_cast<char*>(hModule) + DebugDD.VirtualAddress);
			for (DWORD i = 0; i < DebugDD.Size / sizeof(IMAGE_DEBUG_DIRECTORY); ++i) {
				if (pDebugDirectory[i].Type != IMAGE_DEBUG_TYPE_POGO) {
					continue;
				}

				const auto& pPI = reinterpret_cast<PIMAGE_POGO_INFO>(reinterpret_cast<char*>(hModule) + pDebugDirectory[i].AddressOfRawData);
				if (pPI->m_Signature != 0x4C544347) {
					continue;
				}

				PIMAGE_POGO_BLOCK pBlock = pPI->m_pBlocks;
				while (pBlock->m_unRVA != 0) {
					const size_t unNameLength = strnlen_s(pBlock->m_pName, 0x1000) + 1; // FIXME: Unsafe.
					size_t unBlockSize = sizeof(DWORD) * 2 + unNameLength;
					if (unBlockSize & 3) {
						unBlockSize += (4 - (unBlockSize & 3));
					}

					if (strncmp(szSectionName, pBlock->m_pName, 0x1000) == 0) { // FIXME: Unsafe.
						if (pAddress) {
							*pAddress = reinterpret_cast<void*>(reinterpret_cast<char*>(hModule) + pBlock->m_unRVA);
						}

						if (pSize) {
							*pSize = static_cast<size_t>(pBlock->m_unSize);
						}

						return true;
					}

					pBlock = reinterpret_cast<PIMAGE_POGO_BLOCK>(reinterpret_cast<char*>(pBlock) + unBlockSize);
				}
			}

			return false;
		}

		bool FindSectionPOGOA(char const* const szModuleName, char const* const szSectionName, void** pAddress, size_t* pSize) noexcept {
			if (!szModuleName) {
				return false;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return false;
			}

			return FindSectionPOGO(hModule, szSectionName, pAddress, pSize);
		}

		bool FindSectionPOGOW(wchar_t const* const szModuleName, char const* const szSectionName, void** pAddress, size_t* pSize) noexcept {
			if (!szModuleName) {
				return false;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return false;
			}

			return FindSectionPOGO(hModule, szSectionName, pAddress, pSize);
		}

#ifdef _UNICODE
		bool FindSectionPOGO(wchar_t const* const szModuleName, char const* const szSectionName, void** pAddress, size_t* pSize) noexcept {
			return FindSectionPOGOW(szModuleName, szSectionName, pAddress, pSize);
		}
#else
		bool FindSectionPOGO(char const* const szModuleName, char const* const szSectionName, void** pAddress, size_t* pSize) noexcept {
			return FindSectionPOGOA(szModuleName, szSectionName, pAddress, pSize);
		}
#endif

		// ----------------------------------------------------------------
		// Adler32
		// ----------------------------------------------------------------

		static unsigned int Adler32(unsigned char* pData, size_t unSize) noexcept {
			const unsigned int MOD_ADLER = 65521;
			unsigned int unA = 1;
			unsigned int unB = 0;

			for (size_t i = 0; i < unSize; ++i) {
				unA = (unA + pData[i]) % MOD_ADLER;
				unB = (unB + unA) % MOD_ADLER;
			}

			return (unB << 16) | unA;
		};

		// ----------------------------------------------------------------
		// CheckSignatureHash
		// ----------------------------------------------------------------

		static bool CheckSignatureHash(void const* const pAddress, const unsigned int unHash) noexcept {
			const unsigned short unFunctionSize = unHash & 0xFFFF;
			const unsigned short unFunctionHash = unHash >> 16;

			auto pSignatureBytes = std::make_unique<unsigned char[]>(unFunctionSize);
			if (!pSignatureBytes) {
				return false;
			}

			INSTRUCTION ins;
			size_t unSignatureIndex = 0;
			size_t unFunctionIndex = 0;
			while (unFunctionIndex < unFunctionSize) {
#ifdef _M_X64
				if (!RD_SUCCESS(RdDecode(&ins, reinterpret_cast<unsigned char*>(const_cast<void*>(pAddress)) + unFunctionIndex, RD_CODE_64, RD_DATA_64))) {
#elif _M_IX86
				if (!RD_SUCCESS(RdDecode(&ins, reinterpret_cast<unsigned char*>(const_cast<void*>(pAddress)) + unFunctionIndex, RD_CODE_32, RD_DATA_32))) {
#endif
					return false;
				}

				const unsigned char unInstructionLength = ins.Length;
				const unsigned char unInstructionSize = unInstructionLength - ins.AddrLength - ins.DispLength - ins.Imm1Length - ins.Imm2Length - ins.Imm3Length - ins.MoffsetLength - ins.RelOffsLength;
				for (unsigned char i = 0; i < unInstructionSize; ++i) {
					pSignatureBytes[unSignatureIndex] = ins.InstructionBytes[i];
					++unSignatureIndex;
				}

				unFunctionIndex += unInstructionLength;
			}

			const unsigned int unCalculatedHash = Adler32(pSignatureBytes.get(), unSignatureIndex);
			if ((unCalculatedHash >> 16) != unFunctionHash) {
				return false;
			}

			return true;
		}

		// ----------------------------------------------------------------
		// FindSignature (Native)
		// ----------------------------------------------------------------

		void const* FindSignatureNative(void const* const pAddress, const size_t unSize, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!pAddress || !unSize || !szSignature) {
				return nullptr;
			}

			const size_t unSignatureLength = strnlen_s(szSignature, 0x1000);
			if (!unSignatureLength || (unSize <= unSignatureLength)) {
				return nullptr;
			}

			unsigned char const* const pData = static_cast<unsigned char const*>(pAddress);
			unsigned char const* const pSignature = reinterpret_cast<unsigned char const* const>(szSignature);

			for (size_t unIndex = 0; unIndex <= unSize - unSignatureLength; ++unIndex) {
				if ((pData[unIndex] != pSignature[0]) && (pSignature[0] != unIgnoredByte)) {
					continue;
				}

				size_t unSignatureIndex = 1;
				for (; unSignatureIndex < unSignatureLength; ++unSignatureIndex) {
					const unsigned char unSignatureByte = pSignature[unSignatureIndex];
					if (unSignatureByte == unIgnoredByte) {
						continue;
					}

					if (pData[unIndex + unSignatureIndex] != unSignatureByte) {
						break;
					}
				}

				if (unSignatureIndex == unSignatureLength) {
					unsigned char const* const pFoundAddress = pData + unIndex;

					if (unHash && !CheckSignatureHash(pFoundAddress, unHash)) {
						return nullptr;
					}

					return pFoundAddress + unOffset;
				}
			}

			return nullptr;
		}

		void const* FindSignatureNative(const HMODULE hModule, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!hModule || !szSignature) {
				return nullptr;
			}

			const auto& pDH = reinterpret_cast<PIMAGE_DOS_HEADER>(hModule);
			const auto& pNTHs = reinterpret_cast<PIMAGE_NT_HEADERS>(reinterpret_cast<char*>(hModule) + pDH->e_lfanew);
			const auto& pOH = &(pNTHs->OptionalHeader);

			return FindSignatureNative(reinterpret_cast<void*>(hModule), static_cast<size_t>(pOH->SizeOfImage) - 1, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureNative(const HMODULE hModule, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!hModule || !szSignature) {
				return nullptr;
			}

			void* pAddress = nullptr;
			size_t unSize = 0;
			if (!FindSection(hModule, SectionName, &pAddress, &unSize)) {
				return nullptr;
			}

			return FindSignatureNative(pAddress, unSize, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureNative(const HMODULE hModule, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!hModule || !szSectionName || !szSignature) {
				return nullptr;
			}

			void* pAddress = nullptr;
			size_t unSize = 0;
			if (!FindSectionPOGO(hModule, szSectionName, &pAddress, &unSize)) {
				return nullptr;
			}

			return FindSignatureNative(pAddress, unSize, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureNativeA(char const* const szModuleName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureNative(hModule, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureNativeA(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureNative(hModule, SectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureNativeA(char const* const szModuleName, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSectionName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureNative(hModule, szSectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureNativeW(wchar_t const* const szModuleName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureNative(hModule, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureNativeW(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureNative(hModule, SectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureNativeW(wchar_t const* const szModuleName, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSectionName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureNative(hModule, szSectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

#ifdef _UNICODE
		void const* FindSignatureNative(wchar_t const* const szModuleName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureNativeW(szModuleName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureNative(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureNativeW(szModuleName, SectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureNative(wchar_t const* const szModuleName, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureNativeW(szModuleName, szSectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}
#else
		void const* FindSignatureNative(char const* const szModuleName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureNativeA(szModuleName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureNative(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureNativeA(szModuleName, SectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureNative(char const* const szModuleName, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureNativeA(szModuleName, szSectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}
#endif

		// ----------------------------------------------------------------
		// FindSignature (SSE2)
		// ----------------------------------------------------------------

		void const* FindSignatureSSE2(void const* const pAddress, const size_t unSize, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!pAddress || !unSize || !szSignature) {
				return nullptr;
			}

			const size_t unSignatureLength = strnlen_s(szSignature, 0x1000);
			if (!unSignatureLength || (unSize < unSignatureLength)) {
				return nullptr;
			}

			unsigned char const* const pData = static_cast<unsigned char const* const>(pAddress);
			unsigned char const* const pSignature = reinterpret_cast<unsigned char const* const>(szSignature);

			const size_t unDataBytesCycles = unSize / 16;
			for (size_t unCycle = 0; unCycle < unDataBytesCycles; ++unCycle) {
				const size_t unCycleOffset = unCycle * 16;

				if ((unCycle != 0) && ((unCycle + 1) <= unDataBytesCycles)) {
					_mm_prefetch(reinterpret_cast<char const* const>(pData + unCycleOffset + 16), _MM_HINT_T0);
				} else {
					_mm_prefetch(reinterpret_cast<char const* const>(pData + unCycleOffset), _MM_HINT_T0);
				}

				unsigned __int16 unFound = 0xFFFFui16;
				for (size_t unSignatureIndex = 0; (unSignatureIndex < unSignatureLength) && (unFound != 0); ++unSignatureIndex) {
					const unsigned char unSignatureByte = pSignature[unSignatureIndex];
					if (unSignatureByte == unIgnoredByte) {
						continue;
					}

					const __m128i xmm1 = _mm_loadu_si128(reinterpret_cast<const __m128i*>(pData + unCycleOffset + unSignatureIndex));
					const __m128i xmm2 = _mm_set1_epi8(static_cast<char>(unSignatureByte));

					const __m128i xmm3 = _mm_cmpeq_epi8(xmm1, xmm2);

					unFound &= _mm_movemask_epi8(xmm3);
				}

				if (unFound != 0) {
					unsigned char const* const pFoundAddress = pData + unCycleOffset + __bit_scan_forward(unFound);

					if (unHash && !CheckSignatureHash(pFoundAddress, unHash)) {
						return nullptr;
					}

					return pFoundAddress + unOffset;
				}
			}

			const size_t unDataBytesLeft = unSize & 0xF;
			if (unDataBytesLeft) {
				if (unDataBytesLeft < unSignatureLength) {
					return FindSignatureNative(pData + unSize - unDataBytesLeft - unSignatureLength, unDataBytesLeft + unSignatureLength, szSignature, unIgnoredByte, unOffset, unHash);
				}

				return FindSignatureNative(pData + unSize - unDataBytesLeft, unDataBytesLeft, szSignature, unIgnoredByte, unOffset, unHash);
			}

			return nullptr;
		}

		void const* FindSignatureSSE2(const HMODULE hModule, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!hModule || !szSignature) {
				return nullptr;
			}

			const auto& pDH = reinterpret_cast<PIMAGE_DOS_HEADER>(hModule);
			const auto& pNTHs = reinterpret_cast<PIMAGE_NT_HEADERS>(reinterpret_cast<char*>(hModule) + pDH->e_lfanew);
			const auto& pOH = &(pNTHs->OptionalHeader);

			return FindSignatureSSE2(reinterpret_cast<void*>(hModule), static_cast<size_t>(pOH->SizeOfImage) - 1, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureSSE2(const HMODULE hModule, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!hModule || !szSignature) {
				return nullptr;
			}

			void* pAddress = nullptr;
			size_t unSize = 0;
			if (!FindSection(hModule, SectionName, &pAddress, &unSize)) {
				return nullptr;
			}

			return FindSignatureSSE2(pAddress, unSize, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureSSE2(const HMODULE hModule, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!hModule || !szSectionName || !szSignature) {
				return nullptr;
			}

			void* pAddress = nullptr;
			size_t unSize = 0;
			if (!FindSectionPOGO(hModule, szSectionName, &pAddress, &unSize)) {
				return nullptr;
			}

			return FindSignatureSSE2(pAddress, unSize, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureSSE2A(char const* const szModuleName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureSSE2(hModule, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureSSE2A(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureSSE2(hModule, SectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureSSE2A(char const* const szModuleName, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSectionName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureSSE2(hModule, szSectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureSSE2W(wchar_t const* const szModuleName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureSSE2(hModule, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureSSE2W(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureSSE2(hModule, SectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureSSE2W(wchar_t const* const szModuleName, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSectionName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureSSE2(hModule, szSectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

#ifdef _UNICODE
		void const* FindSignatureSSE2(wchar_t const* const szModuleName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureSSE2W(szModuleName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureSSE2(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureSSE2W(szModuleName, SectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureSSE2(wchar_t const* const szModuleName, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureSSE2W(szModuleName, szSectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}
#else
		void const* FindSignatureSSE2(char const* const szModuleName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureSSE2A(szModuleName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureSSE2(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureSSE2A(szModuleName, SectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureSSE2(char const* const szModuleName, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureSSE2A(szModuleName, szSectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}
#endif

		// ----------------------------------------------------------------
		// FindSignature (AVX2)
		// ----------------------------------------------------------------

		void const* FindSignatureAVX2(void const* const pAddress, const size_t unSize, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!pAddress || !unSize || !szSignature) {
				return nullptr;
			}

			const size_t unSignatureLength = strnlen_s(szSignature, 0x1000);
			if (!unSignatureLength || (unSize < unSignatureLength)) {
				return nullptr;
			}

			unsigned char const* const pData = static_cast<unsigned char const* const>(pAddress);
			unsigned char const* const pSignature = reinterpret_cast<unsigned char const* const>(szSignature);

			const size_t unDataBytesCycles = unSize / 32;
			for (size_t unCycle = 0; unCycle < unDataBytesCycles; ++unCycle) {
				const size_t unCycleOffset = unCycle * 32;

				if ((unCycle != 0) && ((unCycle + 1) <= unDataBytesCycles)) {
					_mm_prefetch(reinterpret_cast<char const* const>(pData + unCycleOffset + 32), _MM_HINT_T0);
				} else {
					_mm_prefetch(reinterpret_cast<char const* const>(pData + unCycleOffset), _MM_HINT_T0);
				}

				unsigned __int32 unFound = 0xFFFFFFFFui32;
				for (size_t unSignatureIndex = 0; (unSignatureIndex < unSignatureLength) && (unFound != 0); ++unSignatureIndex) {
					const unsigned char unSignatureByte = pSignature[unSignatureIndex];
					if (unSignatureByte == unIgnoredByte) {
						continue;
					}

					const __m256i ymm0 = _mm256_loadu_si256(reinterpret_cast<const __m256i*>(pData + unCycleOffset + unSignatureIndex));
					const __m256i ymm1 = _mm256_set1_epi8(static_cast<char>(unSignatureByte));

					const __m256i ymm3 = _mm256_cmpeq_epi8(ymm0, ymm1);

					unFound &= _mm256_movemask_epi8(ymm3);
				}

				if (unFound != 0) {
					unsigned char const* const pFoundAddress = pData + unCycleOffset + __bit_scan_forward(unFound);

					if (unHash && !CheckSignatureHash(pFoundAddress, unHash)) {
						return nullptr;
					}

					return pFoundAddress + unOffset;
				}
			}

			const size_t unDataBytesLeft = unSize & 0x1F;
			if (unDataBytesLeft) {
				if (unDataBytesLeft < unSignatureLength) {
					return FindSignatureSSE2(pData + unSize - unDataBytesLeft - unSignatureLength, unDataBytesLeft + unSignatureLength, szSignature, unIgnoredByte, unOffset, unHash);
				}

				return FindSignatureSSE2(pData + unSize - unDataBytesLeft, unDataBytesLeft, szSignature, unIgnoredByte, unOffset, unHash);
			}

			return nullptr;
		}

		void const* FindSignatureAVX2(const HMODULE hModule, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!hModule || !szSignature) {
				return nullptr;
			}

			const auto& pDH = reinterpret_cast<PIMAGE_DOS_HEADER>(hModule);
			const auto& pNTHs = reinterpret_cast<PIMAGE_NT_HEADERS>(reinterpret_cast<char*>(hModule) + pDH->e_lfanew);
			const auto& pOH = &(pNTHs->OptionalHeader);

			return FindSignatureAVX2(reinterpret_cast<void*>(hModule), static_cast<size_t>(pOH->SizeOfImage) - 1, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX2(const HMODULE hModule, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!hModule || !szSignature) {
				return nullptr;
			}

			void* pAddress = nullptr;
			size_t unSize = 0;
			if (!FindSection(hModule, SectionName, &pAddress, &unSize)) {
				return nullptr;
			}

			return FindSignatureAVX2(pAddress, unSize, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX2(const HMODULE hModule, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!hModule || !szSectionName || !szSignature) {
				return nullptr;
			}

			void* pAddress = nullptr;
			size_t unSize = 0;
			if (!FindSectionPOGO(hModule, szSectionName, &pAddress, &unSize)) {
				return nullptr;
			}

			return FindSignatureAVX2(pAddress, unSize, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX2A(char const* const szModuleName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureAVX2(hModule, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX2A(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureAVX2(hModule, SectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX2A(char const* const szModuleName, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSectionName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureAVX2(hModule, szSectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX2W(wchar_t const* const szModuleName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureAVX2(hModule, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX2W(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureAVX2(hModule, SectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX2W(wchar_t const* const szModuleName, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSectionName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureAVX2(hModule, szSectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

#ifdef _UNICODE
		void const* FindSignatureAVX2(wchar_t const* const szModuleName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureAVX2W(szModuleName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX2(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureAVX2W(szModuleName, SectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX2(wchar_t const* const szModuleName, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureAVX2W(szModuleName, szSectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}
#else
		void const* FindSignatureAVX2(char const* const szModuleName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureAVX2A(szModuleName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX2(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureAVX2A(szModuleName, SectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX2(char const* const szModuleName, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureAVX2A(szModuleName, szSectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}
#endif

		// ----------------------------------------------------------------
		// FindSignature (AVX-512) [AVX512BW]
		// ----------------------------------------------------------------

		void const* FindSignatureAVX512(void const* const pAddress, const size_t unSize, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!pAddress || !unSize || !szSignature) {
				return nullptr;
			}

			const size_t unSignatureLength = strnlen_s(szSignature, 0x1000);
			if (!unSignatureLength || (unSize < unSignatureLength)) {
				return nullptr;
			}

			unsigned char const* const pData = static_cast<unsigned char const* const>(pAddress);
			unsigned char const* const pSignature = reinterpret_cast<unsigned char const* const>(szSignature);

			const size_t unDataBytesCycles = unSize / 64;
			for (size_t unCycle = 0; unCycle < unDataBytesCycles; ++unCycle) {
				const size_t unCycleOffset = unCycle * 64;

				if ((unCycle != 0) && ((unCycle + 1) <= unDataBytesCycles)) {
					_mm_prefetch(reinterpret_cast<char const* const>(pData + unCycleOffset + 64), _MM_HINT_T0);
				} else {
					_mm_prefetch(reinterpret_cast<char const* const>(pData + unCycleOffset), _MM_HINT_T0);
				}

				unsigned __int64 unFound = 0xFFFFFFFFFFFFFFFFui64;
				for (size_t unSignatureIndex = 0; (unSignatureIndex < unSignatureLength) && (unFound != 0); ++unSignatureIndex) {
					const unsigned char unSignatureByte = pSignature[unSignatureIndex];
					if (unSignatureByte == unIgnoredByte) {
						continue;
					}

					const __m512i zmm0 = _mm512_loadu_si512(reinterpret_cast<const __m256i*>(pData + unCycleOffset + unSignatureIndex));
					const __m512i zmm1 = _mm512_set1_epi8(static_cast<char>(unSignatureByte));

					unFound &= _mm512_cmpeq_epi8_mask(zmm0, zmm1);
				}

				if (unFound != 0) {
					unsigned char const* const pFoundAddress = pData + unCycleOffset + __bit_scan_forward(unFound);

					if (unHash && !CheckSignatureHash(pFoundAddress, unHash)) {
						return nullptr;
					}

					return pFoundAddress + unOffset;
				}
			}

			const size_t unDataBytesLeft = unSize & 0x3F;
			if (unDataBytesLeft) {
				if (unDataBytesLeft < unSignatureLength) {
					return FindSignatureAVX2(pData + unSize - unDataBytesLeft - unSignatureLength, unDataBytesLeft + unSignatureLength, szSignature, unIgnoredByte, unOffset, unHash);
				}

				return FindSignatureAVX2(pData + unSize - unDataBytesLeft, unDataBytesLeft, szSignature, unIgnoredByte, unOffset, unHash);
			}

			return nullptr;
		}

		void const* FindSignatureAVX512(const HMODULE hModule, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!hModule || !szSignature) {
				return nullptr;
			}

			const auto& pDH = reinterpret_cast<PIMAGE_DOS_HEADER>(hModule);
			const auto& pNTHs = reinterpret_cast<PIMAGE_NT_HEADERS>(reinterpret_cast<char*>(hModule) + pDH->e_lfanew);
			const auto& pOH = &(pNTHs->OptionalHeader);

			return FindSignatureAVX512(reinterpret_cast<void*>(hModule), static_cast<size_t>(pOH->SizeOfImage) - 1, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX512(const HMODULE hModule, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!hModule || !szSignature) {
				return nullptr;
			}

			void* pAddress = nullptr;
			size_t unSize = 0;
			if (!FindSection(hModule, SectionName, &pAddress, &unSize)) {
				return nullptr;
			}

			return FindSignatureAVX512(pAddress, unSize, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX512(const HMODULE hModule, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!hModule || !szSectionName || !szSignature) {
				return nullptr;
			}

			void* pAddress = nullptr;
			size_t unSize = 0;
			if (!FindSectionPOGO(hModule, szSectionName, &pAddress, &unSize)) {
				return nullptr;
			}

			return FindSignatureAVX512(pAddress, unSize, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX512A(char const* const szModuleName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureAVX512(hModule, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX512A(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureAVX512(hModule, SectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX512A(char const* const szModuleName, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSectionName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureAVX512(hModule, szSectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX512W(wchar_t const* const szModuleName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureAVX512(hModule, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX512W(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureAVX512(hModule, SectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX512W(wchar_t const* const szModuleName, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSectionName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignatureAVX512(hModule, szSectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

#ifdef _UNICODE
		void const* FindSignatureAVX512(wchar_t const* const szModuleName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureAVX512W(szModuleName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX512(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureAVX512W(szModuleName, SectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX512(wchar_t const* const szModuleName, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureAVX512W(szModuleName, szSectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}
#else
		void const* FindSignatureAVX512(char const* const szModuleName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureAVX512A(szModuleName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX512(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureAVX512A(szModuleName, SectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureAVX512(char const* const szModuleName, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureAVX512A(szModuleName, szSectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}
#endif

		// ----------------------------------------------------------------
		// FindSignature (Auto)
		// ----------------------------------------------------------------

		static bool bOnceInitialization = false;
		static bool bFeatureSSE2 = false;
		static bool bFeatureAVX2 = false;
		static bool bFeatureAVX512BW = false;

		void const* FindSignature(void const* const pAddress, const size_t unSize, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {

			if (!bOnceInitialization) {
				bOnceInitialization = true;
				int pIDs[4];
				__cpuid(pIDs, 0x00000000);
				const int nIDs = pIDs[0];
				if (nIDs >= 1) {
					__cpuid(pIDs, 0x00000001);
					bFeatureSSE2 = (pIDs[3] & (1 << 26)) != 0;
					if (nIDs >= 7) {
						__cpuid(pIDs, 0x00000007);
						bFeatureAVX2 = (pIDs[1] & (1 << 5)) != 0;
						bFeatureAVX512BW = (pIDs[1] & (1 << 30)) != 0;
					}
				}
			}

			if (bFeatureAVX512BW) {
				return FindSignatureAVX512(pAddress, unSize, szSignature, unIgnoredByte, unOffset, unHash);
			} else if (bFeatureAVX2) {
				return FindSignatureAVX2(pAddress, unSize, szSignature, unIgnoredByte, unOffset, unHash);
			} else if (bFeatureSSE2) {
				return FindSignatureSSE2(pAddress, unSize, szSignature, unIgnoredByte, unOffset, unHash);
			} else {
				return FindSignatureNative(pAddress, unSize, szSignature, unIgnoredByte, unOffset, unHash);
			}
		}

		void const* FindSignature(const HMODULE hModule, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!hModule || !szSignature) {
				return nullptr;
			}

			const auto& pDH = reinterpret_cast<PIMAGE_DOS_HEADER>(hModule);
			const auto& pNTHs = reinterpret_cast<PIMAGE_NT_HEADERS>(reinterpret_cast<char*>(hModule) + pDH->e_lfanew);
			const auto& pOH = &(pNTHs->OptionalHeader);

			return FindSignature(reinterpret_cast<void*>(hModule), static_cast<size_t>(pOH->SizeOfImage) - 1, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignature(const HMODULE hModule, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!hModule || !szSignature) {
				return nullptr;
			}

			void* pAddress = nullptr;
			size_t unSize = 0;
			if (!FindSection(hModule, SectionName, &pAddress, &unSize)) {
				return nullptr;
			}

			return FindSignature(pAddress, unSize, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignature(const HMODULE hModule, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!hModule || !szSectionName || !szSignature) {
				return nullptr;
			}

			void* pAddress = nullptr;
			size_t unSize = 0;
			if (!FindSectionPOGO(hModule, szSectionName, &pAddress, &unSize)) {
				return nullptr;
			}

			return FindSignature(pAddress, unSize, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureA(char const* const szModuleName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignature(hModule, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureA(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignature(hModule, SectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureA(char const* const szModuleName, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSectionName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignature(hModule, szSectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureW(wchar_t const* const szModuleName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignature(hModule, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureW(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignature(hModule, SectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignatureW(wchar_t const* const szModuleName, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			if (!szModuleName || !szSectionName || !szSignature) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindSignature(hModule, szSectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

#ifdef _UNICODE
		void const* FindSignature(wchar_t const* const szModuleName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureW(szModuleName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignature(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureW(szModuleName, SectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignature(wchar_t const* const szModuleName, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureW(szModuleName, szSectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}
#else
		void const* FindSignature(char const* const szModuleName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureA(szModuleName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignature(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureA(szModuleName, SectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}

		void const* FindSignature(char const* const szModuleName, char const* const szSectionName, char const* const szSignature, const unsigned char unIgnoredByte, const size_t unOffset, const unsigned int unHash) noexcept {
			return FindSignatureA(szModuleName, szSectionName, szSignature, unIgnoredByte, unOffset, unHash);
		}
#endif

		// ----------------------------------------------------------------
		// FindData (Native)
		// ----------------------------------------------------------------

		void const* FindDataNative(void const* const pAddress, const size_t unSize, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!pAddress || !unSize || !pData || !unDataSize || (unSize < unDataSize)) {
				return nullptr;
			}

			unsigned char const* const pSourceData = reinterpret_cast<unsigned char const* const>(pAddress);

			for (size_t unIndex = 0; unIndex < unSize - unDataSize; ++unIndex) {
				//if (memcmp(pSourceData + unIndex, pData, unDataSize) == 0) {
				//	return pSourceData + unIndex;
				//}

				size_t unDataIndex = 0;
				for (; unDataIndex < unDataSize; ++unDataIndex) {
					if (pSourceData[unIndex + unDataIndex] != pData[unDataIndex]) {
						break;
					}
				}

				if (unDataIndex == unDataSize) {
					return pSourceData + unIndex;
				}
			}

			return nullptr;
		}

		void const* FindDataNative(const HMODULE hModule, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!hModule || !pData || !unDataSize) {
				return nullptr;
			}

			const auto& pDH = reinterpret_cast<PIMAGE_DOS_HEADER>(hModule);
			const auto& pNTHs = reinterpret_cast<PIMAGE_NT_HEADERS>(reinterpret_cast<char*>(hModule) + pDH->e_lfanew);
			const auto& pOH = &(pNTHs->OptionalHeader);

			return FindDataNative(reinterpret_cast<void*>(hModule), static_cast<size_t>(pOH->SizeOfImage) - 1, pData, unDataSize);
		}

		void const* FindDataNative(const HMODULE hModule, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!hModule || !pData || !unDataSize) {
				return nullptr;
			}

			void* pAddress = nullptr;
			size_t unSize = 0;
			if (!FindSection(hModule, SectionName, &pAddress, &unSize)) {
				return nullptr;
			}

			return FindDataNative(pAddress, unSize, pData, unDataSize);
		}

		void const* FindDataNative(const HMODULE hModule, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!hModule || !szSectionName || !pData || !unDataSize) {
				return nullptr;
			}

			void* pAddress = nullptr;
			size_t unSize = 0;
			if (!FindSectionPOGO(hModule, szSectionName, &pAddress, &unSize)) {
				return nullptr;
			}

			return FindDataNative(pAddress, unSize, pData, unDataSize);
		}

		void const* FindDataNativeA(char const* const szModuleName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataNative(hModule, pData, unDataSize);
		}

		void const* FindDataNativeA(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataNative(hModule, SectionName, pData, unDataSize);
		}
		
		void const* FindDataNativeA(char const* const szModuleName, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !szSectionName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataNative(hModule, szSectionName, pData, unDataSize);
		}

		void const* FindDataNativeW(wchar_t const* const szModuleName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataNative(hModule, pData, unDataSize);
		}

		void const* FindDataNativeW(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataNative(hModule, SectionName, pData, unDataSize);
		}

		void const* FindDataNativeW(wchar_t const* const szModuleName, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !szSectionName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataNative(hModule, szSectionName, pData, unDataSize);
		}

#ifdef _UNICODE
		void const* FindDataNative(wchar_t const* const szModuleName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataNativeW(szModuleName, pData, unDataSize);
		}

		void const* FindDataNative(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataNativeW(szModuleName, SectionName, pData, unDataSize);
		}

		void const* FindDataNative(wchar_t const* const szModuleName, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataNativeW(szModuleName, szSectionName, pData, unDataSize);
		}
#else
		void const* FindDataNative(char const* const szModuleName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataNativeA(szModuleName, pData, unDataSize);
		}

		void const* FindDataNative(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataNativeA(szModuleName, SectionName, pData, unDataSize);
		}

		void const* FindDataNative(char const* const szModuleName, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataNativeA(szModuleName, szSectionName, pData, unDataSize);
		}
#endif

		// ----------------------------------------------------------------
		// FindData (SSE2)
		// ----------------------------------------------------------------

		void const* FindDataSSE2(void const* const pAddress, const size_t unSize, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!pAddress || !unSize || !pData || !unDataSize || (unSize < unDataSize)) {
				return nullptr;
			}

			unsigned char const* const pSourceData = reinterpret_cast<unsigned char const* const>(pAddress);

			const size_t unDataBytesCycles = unSize / 16;
			for (size_t unCycle = 0; unCycle < unDataBytesCycles; ++unCycle) {
				const size_t unCycleOffset = unCycle * 16;

				if ((unCycle != 0) && ((unCycle + 1) <= unDataBytesCycles)) {
					_mm_prefetch(reinterpret_cast<char const* const>(pData + unCycleOffset + 16), _MM_HINT_T0);
				} else {
					_mm_prefetch(reinterpret_cast<char const* const>(pData + unCycleOffset), _MM_HINT_T0);
				}

				unsigned __int16 unFound = 0xFFFFui16;
				for (size_t unDataIndex = 0; (unDataIndex < unDataSize) && (unFound != 0); ++unDataIndex) {
					const __m128i xmm1 = _mm_loadu_si128(reinterpret_cast<const __m128i*>(pSourceData + unCycleOffset + unDataIndex));
					const __m128i xmm2 = _mm_set1_epi8(static_cast<char>(pData[unDataIndex]));

					const __m128i xmm3 = _mm_cmpeq_epi8(xmm1, xmm2);

					unFound &= _mm_movemask_epi8(xmm3);
				}

				if (unFound != 0) {
					return pSourceData + unCycleOffset + __bit_scan_forward(unFound);
				}
			}

			const size_t unDataBytesLeft = unSize & 0xF;
			if (unDataBytesLeft) {
				if (unDataBytesLeft < unDataSize) {
					return FindDataNative(pSourceData + unSize - unDataBytesLeft - unDataSize, unDataBytesLeft + unDataSize, pData, unDataSize);
				}

				return FindDataNative(pSourceData + unSize - unDataBytesLeft, unDataBytesLeft, pData, unDataSize);
			}

			return nullptr;
		}

		void const* FindDataSSE2(const HMODULE hModule, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!hModule || !pData || !unDataSize) {
				return nullptr;
			}

			const auto& pDH = reinterpret_cast<PIMAGE_DOS_HEADER>(hModule);
			const auto& pNTHs = reinterpret_cast<PIMAGE_NT_HEADERS>(reinterpret_cast<char*>(hModule) + pDH->e_lfanew);
			const auto& pOH = &(pNTHs->OptionalHeader);

			return FindDataSSE2(reinterpret_cast<void*>(hModule), static_cast<size_t>(pOH->SizeOfImage) - 1, pData, unDataSize);
		}

		void const* FindDataSSE2(const HMODULE hModule, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!hModule || !pData || !unDataSize) {
				return nullptr;
			}

			void* pAddress = nullptr;
			size_t unSize = 0;
			if (!FindSection(hModule, SectionName, &pAddress, &unSize)) {
				return nullptr;
			}

			return FindDataSSE2(pAddress, unSize, pData, unDataSize);
		}

		void const* FindDataSSE2(const HMODULE hModule, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!hModule || !szSectionName || !pData || !unDataSize) {
				return nullptr;
			}

			void* pAddress = nullptr;
			size_t unSize = 0;
			if (!FindSectionPOGO(hModule, szSectionName, &pAddress, &unSize)) {
				return nullptr;
			}

			return FindDataSSE2(pAddress, unSize, pData, unDataSize);
		}

		void const* FindDataSSE2A(char const* const szModuleName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataSSE2(hModule, pData, unDataSize);
		}

		void const* FindDataSSE2A(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataSSE2(hModule, SectionName, pData, unDataSize);
		}

		void const* FindDataSSE2A(char const* const szModuleName, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !szSectionName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataSSE2(hModule, szSectionName, pData, unDataSize);
		}

		void const* FindDataSSE2W(wchar_t const* const szModuleName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataSSE2(hModule, pData, unDataSize);
		}

		void const* FindDataSSE2W(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataSSE2(hModule, SectionName, pData, unDataSize);
		}

		void const* FindDataSSE2W(wchar_t const* const szModuleName, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !szSectionName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataSSE2(hModule, szSectionName, pData, unDataSize);
		}

#ifdef _UNICODE
		void const* FindDataSSE2(wchar_t const* const szModuleName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataSSE2W(szModuleName, pData, unDataSize);
		}

		void const* FindDataSSE2(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataSSE2W(szModuleName, SectionName, pData, unDataSize);
		}

		void const* FindDataSSE2(wchar_t const* const szModuleName, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataSSE2W(szModuleName, szSectionName, pData, unDataSize);
		}
#else
		void const* FindDataSSE2(char const* const szModuleName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataSSE2A(szModuleName, pData, unDataSize);
		}

		void const* FindDataSSE2(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataSSE2A(szModuleName, SectionName, pData, unDataSize);
		}

		void const* FindDataSSE2(char const* const szModuleName, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataSSE2A(szModuleName, szSectionName, pData, unDataSize);
		}
#endif

		// ----------------------------------------------------------------
		// FindData (AVX2)
		// ----------------------------------------------------------------

		void const* FindDataAVX2(void const* const pAddress, const size_t unSize, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!pAddress || !unSize || !pData || !unDataSize || (unSize < unDataSize)) {
				return nullptr;
			}

			unsigned char const* const pSourceData = reinterpret_cast<unsigned char const* const>(pAddress);

			const size_t unDataBytesCycles = unSize / 32;
			for (size_t unCycle = 0; unCycle < unDataBytesCycles; ++unCycle) {
				const size_t unCycleOffset = unCycle * 32;

				if ((unCycle != 0) && ((unCycle + 1) <= unDataBytesCycles)) {
					_mm_prefetch(reinterpret_cast<char const* const>(pData + unCycleOffset + 32), _MM_HINT_T0);
				} else {
					_mm_prefetch(reinterpret_cast<char const* const>(pData + unCycleOffset), _MM_HINT_T0);
				}

				unsigned __int32 unFound = 0xFFFFFFFFui32;
				for (size_t unDataIndex = 0; (unDataIndex < unDataSize) && (unFound != 0); ++unDataIndex) {
					const __m256i ymm0 = _mm256_loadu_si256(reinterpret_cast<const __m256i*>(pSourceData + unCycleOffset + unDataIndex));
					const __m256i ymm1 = _mm256_set1_epi8(static_cast<char>(pData[unDataIndex]));

					const __m256i ymm3 = _mm256_cmpeq_epi8(ymm0, ymm1);

					unFound &= _mm256_movemask_epi8(ymm3);
				}

				if (unFound != 0) {
					return pSourceData + unCycleOffset + __bit_scan_forward(unFound);
				}
			}

			const size_t unDataBytesLeft = unSize & 0x1F;
			if (unDataBytesLeft) {
				if (unDataBytesLeft < unDataSize) {
					return FindDataSSE2(pSourceData + unSize - unDataBytesLeft - unDataSize, unDataBytesLeft + unDataSize, pData, unDataSize);
				}

				return FindDataSSE2(pSourceData + unSize - unDataBytesLeft, unDataBytesLeft, pData, unDataSize);
			}

			return nullptr;
		}

		void const* FindDataAVX2(const HMODULE hModule, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!hModule || !pData || !unDataSize) {
				return nullptr;
			}

			const auto& pDH = reinterpret_cast<PIMAGE_DOS_HEADER>(hModule);
			const auto& pNTHs = reinterpret_cast<PIMAGE_NT_HEADERS>(reinterpret_cast<char*>(hModule) + pDH->e_lfanew);
			const auto& pOH = &(pNTHs->OptionalHeader);

			return FindDataAVX2(reinterpret_cast<void*>(hModule), static_cast<size_t>(pOH->SizeOfImage) - 1, pData, unDataSize);
		}

		void const* FindDataAVX2(const HMODULE hModule, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!hModule || !pData || !unDataSize) {
				return nullptr;
			}

			void* pAddress = nullptr;
			size_t unSize = 0;
			if (!FindSection(hModule, SectionName, &pAddress, &unSize)) {
				return nullptr;
			}

			return FindDataAVX2(pAddress, unSize, pData, unDataSize);
		}

		void const* FindDataAVX2(const HMODULE hModule, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!hModule || !szSectionName || !pData || !unDataSize) {
				return nullptr;
			}

			void* pAddress = nullptr;
			size_t unSize = 0;
			if (!FindSectionPOGO(hModule, szSectionName, &pAddress, &unSize)) {
				return nullptr;
			}

			return FindDataAVX2(pAddress, unSize, pData, unDataSize);
		}

		void const* FindDataAVX2A(char const* const szModuleName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataAVX2(hModule, pData, unDataSize);
		}

		void const* FindDataAVX2A(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataAVX2(hModule, SectionName, pData, unDataSize);
		}

		void const* FindDataAVX2A(char const* const szModuleName, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !szSectionName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataAVX2(hModule, szSectionName, pData, unDataSize);
		}

		void const* FindDataAVX2W(wchar_t const* const szModuleName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataAVX2(hModule, pData, unDataSize);
		}

		void const* FindDataAVX2W(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataAVX2(hModule, SectionName, pData, unDataSize);
		}

		void const* FindDataAVX2W(wchar_t const* const szModuleName, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !szSectionName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataAVX2(hModule, szSectionName, pData, unDataSize);
		}

#ifdef _UNICODE
		void const* FindDataAVX2(wchar_t const* const szModuleName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataAVX2W(szModuleName, pData, unDataSize);
		}

		void const* FindDataAVX2(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataAVX2W(szModuleName, SectionName, pData, unDataSize);
		}

		void const* FindDataAVX2(wchar_t const* const szModuleName, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataAVX2W(szModuleName, szSectionName, pData, unDataSize);
		}
#else
		void const* FindDataAVX2(char const* const szModuleName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataAVX2A(szModuleName, pData, unDataSize);
		}

		void const* FindDataAVX2(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataAVX2A(szModuleName, SectionName, pData, unDataSize);
		}

		void const* FindDataAVX2(char const* const szModuleName, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataAVX2A(szModuleName, szSectionName, pData, unDataSize);
		}
#endif

		// ----------------------------------------------------------------
		// FindData (AVX-512) [AVX512BW]
		// ----------------------------------------------------------------

		void const* FindDataAVX512(void const* const pAddress, const size_t unSize, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!pAddress || !unSize || !pData || !unDataSize || (unSize < unDataSize)) {
				return nullptr;
			}

			unsigned char const* const pSourceData = reinterpret_cast<unsigned char const* const>(pAddress);

			const size_t unDataBytesCycles = unSize / 64;
			for (size_t unCycle = 0; unCycle < unDataBytesCycles; ++unCycle) {
				const size_t unCycleOffset = unCycle * 64;

				if ((unCycle != 0) && ((unCycle + 1) <= unDataBytesCycles)) {
					_mm_prefetch(reinterpret_cast<char const* const>(pData + unCycleOffset + 64), _MM_HINT_T0);
				} else {
					_mm_prefetch(reinterpret_cast<char const* const>(pData + unCycleOffset), _MM_HINT_T0);
				}

				unsigned __int64 unFound = 0xFFFFFFFFFFFFFFFFui64;
				for (size_t unDataIndex = 0; (unDataIndex < unDataSize) && (unFound != 0); ++unDataIndex) {
					const __m512i zmm0 = _mm512_loadu_si512(reinterpret_cast<const __m256i*>(pSourceData + unCycleOffset + unDataIndex));
					const __m512i zmm1 = _mm512_set1_epi8(static_cast<char>(pData[unDataIndex]));

					unFound &= _mm512_cmpeq_epi8_mask(zmm0, zmm1);
				}

				if (unFound != 0) {
					return pSourceData + unCycleOffset + __bit_scan_forward(unFound);
				}
			}

			const size_t unDataBytesLeft = unSize & 0x3F;
			if (unDataBytesLeft) {
				if (unDataBytesLeft < unDataSize) {
					return FindDataAVX2(pSourceData + unSize - unDataBytesLeft - unDataSize, unDataBytesLeft + unDataSize, pData, unDataSize);
				}

				return FindDataAVX2(pSourceData + unSize - unDataBytesLeft, unDataBytesLeft, pData, unDataSize);
			}

			return nullptr;
		}

		void const* FindDataAVX512(const HMODULE hModule, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!hModule || !pData || !unDataSize) {
				return nullptr;
			}

			const auto& pDH = reinterpret_cast<PIMAGE_DOS_HEADER>(hModule);
			const auto& pNTHs = reinterpret_cast<PIMAGE_NT_HEADERS>(reinterpret_cast<char*>(hModule) + pDH->e_lfanew);
			const auto& pOH = &(pNTHs->OptionalHeader);

			return FindDataAVX512(reinterpret_cast<void*>(hModule), static_cast<size_t>(pOH->SizeOfImage) - 1, pData, unDataSize);
		}

		void const* FindDataAVX512(const HMODULE hModule, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!hModule || !pData || !unDataSize) {
				return nullptr;
			}

			void* pAddress = nullptr;
			size_t unSize = 0;
			if (!FindSection(hModule, SectionName, &pAddress, &unSize)) {
				return nullptr;
			}

			return FindDataAVX512(pAddress, unSize, pData, unDataSize);
		}

		void const* FindDataAVX512(const HMODULE hModule, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!hModule || !szSectionName || !pData || !unDataSize) {
				return nullptr;
			}

			void* pAddress = nullptr;
			size_t unSize = 0;
			if (!FindSectionPOGO(hModule, szSectionName, &pAddress, &unSize)) {
				return nullptr;
			}

			return FindDataAVX512(pAddress, unSize, pData, unDataSize);
		}

		void const* FindDataAVX512A(char const* const szModuleName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataAVX512(hModule, pData, unDataSize);
		}

		void const* FindDataAVX512A(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataAVX512(hModule, SectionName, pData, unDataSize);
		}

		void const* FindDataAVX512A(char const* const szModuleName, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !szSectionName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataAVX512(hModule, pData, unDataSize);
		}

		void const* FindDataAVX512W(wchar_t const* const szModuleName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataAVX512(hModule, pData, unDataSize);
		}

		void const* FindDataAVX512W(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataAVX512(hModule, SectionName, pData, unDataSize);
		}

		void const* FindDataAVX512W(wchar_t const* const szModuleName, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !szSectionName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindDataAVX512(hModule, szSectionName, pData, unDataSize);
		}

#ifdef _UNICODE
		void const* FindDataAVX512(wchar_t const* const szModuleName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataAVX512W(szModuleName, pData, unDataSize);
		}

		void const* FindDataAVX512(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataAVX512W(szModuleName, SectionName, pData, unDataSize);
		}

		void const* FindDataAVX512(wchar_t const* const szModuleName, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataAVX512W(szModuleName, szSectionName, pData, unDataSize);
		}
#else
		void const* FindDataAVX512(char const* const szModuleName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataAVX512A(szModuleName, pData, unDataSize);
		}

		void const* FindDataAVX512(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataAVX512A(szModuleName, SectionName, pData, unDataSize);
		}

		void const* FindDataAVX512(char const* const szModuleName, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataAVX512A(szModuleName, szSectionName, pData, unDataSize);
		}
#endif

		// ----------------------------------------------------------------
		// FindData (Auto)
		// ----------------------------------------------------------------

		void const* FindData(void const* const pAddress, const size_t unSize, unsigned char const* const pData, const size_t unDataSize) noexcept {

			if (!bOnceInitialization) {
				bOnceInitialization = true;
				int pIDs[4];
				__cpuid(pIDs, 0x00000000);
				const int nIDs = pIDs[0];
				if (nIDs >= 1) {
					__cpuid(pIDs, 0x00000001);
					bFeatureSSE2 = (pIDs[3] & (1 << 26)) != 0;
					if (nIDs >= 7) {
						__cpuid(pIDs, 0x00000007);
						bFeatureAVX2 = (pIDs[1] & (1 << 5)) != 0;
						bFeatureAVX512BW = (pIDs[1] & (1 << 30)) != 0;
					}
				}
			}

			if (bFeatureAVX512BW) {
				return FindDataAVX512(pAddress, unSize, pData, unDataSize);
			} else if (bFeatureAVX2) {
				return FindDataAVX2(pAddress, unSize, pData, unDataSize);
			} else if (bFeatureSSE2) {
				return FindDataSSE2(pAddress, unSize, pData, unDataSize);
			} else {
				return FindDataNative(pAddress, unSize, pData, unDataSize);
			}
		}

		void const* FindData(const HMODULE hModule, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!hModule || !pData || !unDataSize) {
				return nullptr;
			}

			const auto& pDH = reinterpret_cast<PIMAGE_DOS_HEADER>(hModule);
			const auto& pNTHs = reinterpret_cast<PIMAGE_NT_HEADERS>(reinterpret_cast<char*>(hModule) + pDH->e_lfanew);
			const auto& pOH = &(pNTHs->OptionalHeader);

			return FindData(reinterpret_cast<void*>(hModule), static_cast<size_t>(pOH->SizeOfImage) - 1, pData, unDataSize);
		}

		void const* FindData(const HMODULE hModule, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!hModule || !pData || !unDataSize) {
				return nullptr;
			}

			void* pAddress = nullptr;
			size_t unSize = 0;
			if (!FindSection(hModule, SectionName, &pAddress, &unSize)) {
				return nullptr;
			}

			return FindData(pAddress, unSize, pData, unDataSize);
		}

		void const* FindData(const HMODULE hModule, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!hModule || !pData || !unDataSize) {
				return nullptr;
			}

			void* pAddress = nullptr;
			size_t unSize = 0;
			if (!FindSectionPOGO(hModule, szSectionName, &pAddress, &unSize)) {
				return nullptr;
			}

			return FindData(pAddress, unSize, pData, unDataSize);
		}

		void const* FindDataA(char const* const szModuleName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindData(hModule, pData, unDataSize);
		}

		void const* FindDataA(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindData(hModule, SectionName, pData, unDataSize);
		}

		void const* FindDataA(char const* const szModuleName, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !szSectionName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindData(hModule, szSectionName, pData, unDataSize);
		}

		void const* FindDataW(wchar_t const* const szModuleName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindData(hModule, pData, unDataSize);
		}

		void const* FindDataW(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindData(hModule, SectionName, pData, unDataSize);
		}

		void const* FindDataW(wchar_t const* const szModuleName, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			if (!szModuleName || !szSectionName || !pData || !unDataSize) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindData(hModule, szSectionName, pData, unDataSize);
		}

#ifdef _UNICODE
		void const* FindData(wchar_t const* const szModuleName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataW(szModuleName, pData, unDataSize);
		}

		void const* FindData(wchar_t const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataW(szModuleName, SectionName, pData, unDataSize);
		}

		void const* FindData(wchar_t const* const szModuleName, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataW(szModuleName, szSectionName, pData, unDataSize);
		}
#else
		void const* FindData(char const* const szModuleName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataA(szModuleName, pData, unDataSize);
		}

		void const* FindData(char const* const szModuleName, const std::array<const unsigned char, 8>& SectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataA(szModuleName, SectionName, pData, unDataSize);
		}

		void const* FindData(char const* const szModuleName, char const* const szSectionName, unsigned char const* const pData, const size_t unDataSize) noexcept {
			return FindDataA(szModuleName, szSectionName, pData, unDataSize);
		}
#endif
	}

	// ----------------------------------------------------------------
	// Run-Time Type Information
	// ----------------------------------------------------------------

	namespace RTTI {

		// ----------------------------------------------------------------
		// Definitions
		// ----------------------------------------------------------------

#ifdef _M_X64
		static inline const PRTTI_BASE_CLASS_DESCRIPTOR __GetBaseClassDescriptor(void const* const pBaseAddress, const PRTTI_BASE_CLASS_ARRAY pBaseClassArray, const size_t unIndex) {
			return reinterpret_cast<const PRTTI_BASE_CLASS_DESCRIPTOR>(reinterpret_cast<size_t>(pBaseAddress) + pBaseClassArray->m_unBaseClassDescriptors[unIndex]);
		}

		static inline const PRTTI_BASE_CLASS_ARRAY __GetBaseClassArray(void const* const pBaseAddress, const PRTTI_CLASS_HIERARCHY_DESCRIPTOR pClassHierarchyDescriptor) {
			return reinterpret_cast<const PRTTI_BASE_CLASS_ARRAY>(reinterpret_cast<size_t>(pBaseAddress) + pClassHierarchyDescriptor->m_unBaseClassArray);
		}

		static inline const PRTTI_TYPE_DESCRIPTOR __GetTypeDescriptor(void const* const pBaseAddress, const PRTTI_BASE_CLASS_DESCRIPTOR pBaseClassDescriptor) {
			return reinterpret_cast<const PRTTI_TYPE_DESCRIPTOR>(reinterpret_cast<size_t>(pBaseAddress) + pBaseClassDescriptor->m_unTypeDescriptor);
		}

		static inline const PRTTI_TYPE_DESCRIPTOR __GetTypeDescriptor(void const* const pBaseAddress, const PRTTI_COMPLETE_OBJECT_LOCATOR pCompleteObjectLocator) {
			return reinterpret_cast<const PRTTI_TYPE_DESCRIPTOR>(reinterpret_cast<size_t>(pBaseAddress) + pCompleteObjectLocator->m_unTypeDescriptor);
		}

		static inline const PRTTI_CLASS_HIERARCHY_DESCRIPTOR __GetClassHierarchyDescriptor(void const* const pBaseAddress, const PRTTI_BASE_CLASS_DESCRIPTOR pBaseClassDescriptor) {
			return reinterpret_cast<const PRTTI_CLASS_HIERARCHY_DESCRIPTOR>(reinterpret_cast<size_t>(pBaseAddress) + pBaseClassDescriptor->m_unClassHierarchyDescriptor);
		}

		static inline const PRTTI_CLASS_HIERARCHY_DESCRIPTOR __GetClassHierarchyDescriptor(void const* const pBaseAddress, PRTTI_COMPLETE_OBJECT_LOCATOR pCompleteObjectLocator) {
			return reinterpret_cast<const PRTTI_CLASS_HIERARCHY_DESCRIPTOR>(reinterpret_cast<size_t>(pBaseAddress) + pCompleteObjectLocator->m_unClassHierarchyDescriptor);
		}
#endif

		// ----------------------------------------------------------------
		// Object
		// ----------------------------------------------------------------

		Object::Object(void const* const pBaseAddress, void const* const pAddress, const size_t unSize, const PRTTI_TYPE_DESCRIPTOR pTypeDescriptor, const PRTTI_CLASS_HIERARCHY_DESCRIPTOR pClassHierarchyDescriptor, const PRTTI_BASE_CLASS_ARRAY pBaseClassArray, const PRTTI_COMPLETE_OBJECT_LOCATOR pCompleteObject, void** pVTable) : m_pBaseAddress(pBaseAddress), m_pAddress(pAddress), m_unSize(unSize), m_pTypeDescriptor(pTypeDescriptor), m_pClassHierarchyDescriptor(pClassHierarchyDescriptor), m_pBaseClassArray(pBaseClassArray), m_pCompleteObject(pCompleteObject) {
			m_pVTable = pVTable;
			if (pBaseClassArray) {
				const unsigned int unNumberOfBaseClasses = pClassHierarchyDescriptor->m_unNumberOfBaseClasses;
				for (unsigned int i = 0; i < unNumberOfBaseClasses; ++i) {
#ifdef _M_X64
					const auto& pBCD = __GetBaseClassDescriptor(pBaseAddress, pBaseClassArray, i);
#elif _M_IX86
					const auto& pBCD = pBaseClassArray->m_pBaseClassDescriptors[i];
#endif
					if (!pBCD) {
						break;
					}

#ifdef _M_X64
					const auto& pCurrentTD = __GetTypeDescriptor(pBaseAddress, pBCD);
					const auto& pCurrentCHD = __GetClassHierarchyDescriptor(pBaseAddress, pBCD);
					const auto& pCurrentBCA = __GetBaseClassArray(pBaseAddress, pCurrentCHD);
#elif _M_IX86
					const auto& pCurrentTD = pBCD->m_pTypeDescriptor;
					const auto& pCurrentCHD = pBCD->m_pClassHierarchyDescriptor;
					const auto& pCurrentBCA = pCurrentCHD->m_pBaseClassArray;
#endif

					if (pCurrentTD == pTypeDescriptor) {
						continue;
					}

					auto pBaseObject = FindObject(pBaseAddress, pAddress, unSize, pCurrentTD->m_szName);
					if (!pBaseObject) {
						pBaseObject = FindObject(pBaseAddress, pAddress, unSize, pCurrentTD->m_szName, false);
						if (!pBaseObject) {
							m_vecBaseClasses.emplace_back(std::make_unique<Object>(pBaseAddress, pAddress, unSize, pCurrentTD, pCurrentCHD, pCurrentBCA, nullptr, nullptr));
							continue;
						}
					}

					m_vecBaseClasses.emplace_back(std::move(pBaseObject));
				}
			}
		}

		static const PRTTI_COMPLETE_OBJECT_LOCATOR GetCompleteObjectLocatorFromObject(void const* const pAddress) {
			if (!pAddress) {
				return nullptr;
			}

			return static_cast<PRTTI_COMPLETE_OBJECT_LOCATOR const* const*>(pAddress)[0][-1];
		}

		static void const* const FindCompleteObject(void const* const pAddress) {
			if (!pAddress) {
				return nullptr;
			}

			const auto& pCompleteLocator = GetCompleteObjectLocatorFromObject(pAddress);
			if (!pCompleteLocator) {
				return nullptr;
			}

			const size_t unAddress = reinterpret_cast<size_t>(pAddress);
			const size_t unCompleteObject = unAddress - pCompleteLocator->m_unOffset;

			const unsigned int unConstructorOffset = pCompleteLocator->m_unConstructorOffset;
			const int nOffsetValue = !unConstructorOffset ? 0 : *reinterpret_cast<int*>(unAddress - unConstructorOffset);

			return reinterpret_cast<void*>(unCompleteObject - nOffsetValue);
		}

#ifdef _M_X64
		static const PRTTI_BASE_CLASS_DESCRIPTOR FindSITargetTypeInstance(void const* const pBaseAddress, const PRTTI_COMPLETE_OBJECT_LOCATOR pCompleteObjectLocator, const PRTTI_TYPE_DESCRIPTOR pSourceTypeDescriptor, const PRTTI_TYPE_DESCRIPTOR pTargetTypeDescriptor) {
#elif _M_IX86
		static const PRTTI_BASE_CLASS_DESCRIPTOR FindSITargetTypeInstance(const PRTTI_COMPLETE_OBJECT_LOCATOR pCompleteObjectLocator, const PRTTI_TYPE_DESCRIPTOR pSourceTypeDescriptor, const PRTTI_TYPE_DESCRIPTOR pTargetTypeDescriptor) {
#endif
#ifdef _M_X64
			if (!pBaseAddress || !pCompleteObjectLocator || !pSourceTypeDescriptor || !pTargetTypeDescriptor) {
#elif _M_IX86
			if (!pCompleteObjectLocator || !pSourceTypeDescriptor || !pTargetTypeDescriptor) {
#endif
				return nullptr;
			}

#ifdef _M_X64
			const auto& pCHD = __GetClassHierarchyDescriptor(pBaseAddress, pCompleteObjectLocator);
#elif _M_IX86
			const auto& pCHD = pCompleteObjectLocator->m_pClassHierarchyDescriptor;
#endif
			if (!pCHD) {
				return nullptr;
			}

#ifdef _M_X64
			const auto& pBCA = __GetBaseClassArray(pBaseAddress, pCHD);
#elif _M_IX86
			const auto& pBCA = pCHD->m_pBaseClassArray;
#endif
			if (!pBCA) {
				return nullptr;
			}

			const unsigned int unNumberOfBaseClasses = pCHD->m_unNumberOfBaseClasses;
			for (unsigned int i = 0; i < unNumberOfBaseClasses; ++i) {
#ifdef _M_X64
				const auto& pBCD = __GetBaseClassDescriptor(pBaseAddress, pBCA, i);
#elif _M_IX86
				const auto& pBCD = pBCA->m_pBaseClassDescriptors[i];
#endif
				if (!pBCD) {
					continue;
				}

#ifdef _M_X64
				if (__GetTypeDescriptor(pBaseAddress, pBCD) == pTargetTypeDescriptor) {
#elif _M_IX86
				if (pBCD->m_pTypeDescriptor == pTargetTypeDescriptor) {
#endif
					for (unsigned int j = i + 1; j < unNumberOfBaseClasses; ++j) {
#ifdef _M_X64
						const auto& pSourceBCD = __GetBaseClassDescriptor(pBaseAddress, pBCA, j);
#elif _M_IX86
						const auto& pSourceBCD = pBCA->m_pBaseClassDescriptors[j];
#endif
						if (!pSourceBCD) {
							continue;
						}

						if (pSourceBCD->m_unAttributes & BCD_PRIVORPROTBASE) {
							return nullptr;
						}

#ifdef _M_X64
						if (__GetTypeDescriptor(pBaseAddress, pSourceBCD) == pSourceTypeDescriptor) {
#elif _M_IX86
						if (pSourceBCD->m_pTypeDescriptor == pSourceTypeDescriptor) {
#endif
							return pBCD;
						}
					}

					return nullptr;
				}
			}


			for (unsigned int i = 0; i < unNumberOfBaseClasses; ++i) {
#ifdef _M_X64
				const auto& pBCD = __GetBaseClassDescriptor(pBaseAddress, pBCA, i);
#elif _M_IX86
				const auto& pBCD = pBCA->m_pBaseClassDescriptors[i];
#endif
				if (!pBCD) {
					continue;
				}

#ifdef _M_X64
				if (!strncmp(__GetTypeDescriptor(pBaseAddress, pBCD)->m_szName, pTargetTypeDescriptor->m_szName, 0x1000)) {
#elif _M_IX86
				if (!strncmp(pBCD->m_pTypeDescriptor->m_szName, pTargetTypeDescriptor->m_szName, 0x1000)) {
#endif
					for (unsigned int j = i + 1; j < unNumberOfBaseClasses; ++j) {
#ifdef _M_X64
						const auto& pSourceBCD = __GetBaseClassDescriptor(pBaseAddress, pBCA, j);
#elif _M_IX86
						const auto& pSourceBCD = pBCA->m_pBaseClassDescriptors[j];
#endif
						if (!pSourceBCD) {
							continue;
						}

						if (pSourceBCD->m_unAttributes & BCD_PRIVORPROTBASE) {
							return nullptr;
						}

#ifdef _M_X64
						if (!strncmp(__GetTypeDescriptor(pBaseAddress, pBCD)->m_szName, pSourceTypeDescriptor->m_szName, 0x1000)) {
#elif _M_IX86
						if (!strncmp(pBCD->m_pTypeDescriptor->m_szName, pSourceTypeDescriptor->m_szName, 0x1000)) {
#endif
							return pBCD;
						}
					}

					return nullptr;
				}
			}

			return nullptr;
		}

		static bool IsTypeDescriptorEqual(const PRTTI_TYPE_DESCRIPTOR pLeft, const PRTTI_TYPE_DESCRIPTOR pRight) {
			return (pLeft == pRight) || !strncmp(pLeft->m_szName, pRight->m_szName, 0x1000);
		}

		static ptrdiff_t PMDtoOffset(void const* const pAddress, const RTTI_PMD pmd) {
			ptrdiff_t unRetOff = 0;

			if (pmd.m_nPDisp >= 0) {
				unRetOff = pmd.m_nPDisp;
				unRetOff += *reinterpret_cast<int*>(reinterpret_cast<char*>(*reinterpret_cast<size_t const* const>(reinterpret_cast<char const* const>(pAddress) + unRetOff)) + pmd.m_nVDisp);
			}

			unRetOff += pmd.m_nMDisp;

			return unRetOff;
		}

#ifdef _M_X64
		static const PRTTI_BASE_CLASS_DESCRIPTOR FindMITargetTypeInstance(void const* const pBaseAddress, void const* const pCompleteObject, const PRTTI_COMPLETE_OBJECT_LOCATOR pCompleteObjectLocator, const PRTTI_TYPE_DESCRIPTOR pSourceTypeDescriptor, const ptrdiff_t nSourceOffset, const PRTTI_TYPE_DESCRIPTOR pTargetTypeDescriptor) {
#elif _M_IX86
		static const PRTTI_BASE_CLASS_DESCRIPTOR FindMITargetTypeInstance(void const* const pCompleteObject, const PRTTI_COMPLETE_OBJECT_LOCATOR pCompleteObjectLocator, const PRTTI_TYPE_DESCRIPTOR pSourceTypeDescriptor, const ptrdiff_t nSourceOffset, const PRTTI_TYPE_DESCRIPTOR pTargetTypeDescriptor) {
#endif
#ifdef _M_X64
			if (!pBaseAddress || !pCompleteObject || !pCompleteObjectLocator || !pSourceTypeDescriptor || !pTargetTypeDescriptor) {
#elif _M_IX86
			if (!pCompleteObject || !pCompleteObjectLocator || !pSourceTypeDescriptor || !pTargetTypeDescriptor) {
#endif
				return nullptr;
			}

#ifdef _M_X64
			const auto& pBCA = __GetBaseClassArray(pBaseAddress, __GetClassHierarchyDescriptor(pBaseAddress, pCompleteObjectLocator));
			const unsigned int unNumberOfBaseClasses = __GetClassHierarchyDescriptor(pBaseAddress, pCompleteObjectLocator)->m_unNumberOfBaseClasses;
#elif _M_IX86
			const auto& pBCA = pCompleteObjectLocator->m_pClassHierarchyDescriptor->m_pBaseClassArray;
			const unsigned int unNumberOfBaseClasses = pCompleteObjectLocator->m_pClassHierarchyDescriptor->m_unNumberOfBaseClasses;
#endif
			if (!pBCA) {
				return nullptr;
			}

			unsigned int unTarget = static_cast<unsigned int>(-1);
			unsigned int nTargetBases = 0;

			PRTTI_BASE_CLASS_DESCRIPTOR pTargetBCD = nullptr;
			PRTTI_BASE_CLASS_DESCRIPTOR pSourceBCD = nullptr;

			for (unsigned int i = 0; i < unNumberOfBaseClasses; ++i) {
#ifdef _M_X64
				const auto& pBCD = __GetBaseClassDescriptor(pBaseAddress, pBCA, i);
#elif _M_IX86
				const auto& pBCD = pBCA->m_pBaseClassDescriptors[i];
#endif
				if (!pBCD) {
					continue;
				}

#ifdef _M_X64
				if (((i - unTarget) > nTargetBases) && IsTypeDescriptorEqual(__GetTypeDescriptor(pBaseAddress, pBCD), pTargetTypeDescriptor)) {
#elif _M_IX86
				if (((i - unTarget) > nTargetBases) && IsTypeDescriptorEqual(pBCD->m_pTypeDescriptor, pTargetTypeDescriptor)) {
#endif
					if (pSourceBCD) {
						if ((pBCD->m_unAttributes & (BCD_NOTVISIBLE | BCD_AMBIGUOUS)) || (pSourceBCD->m_unAttributes & BCD_NOTVISIBLE)) {
							return nullptr;
						} else {
							return pBCD;
						}
					}

					pTargetBCD = pBCD;
					unTarget = i;
					nTargetBases = pBCD->m_unNumberOfContainedBases;
				}

#ifdef _M_X64
				if (IsTypeDescriptorEqual(__GetTypeDescriptor(pBaseAddress, pBCD), pSourceTypeDescriptor) && (PMDtoOffset(pCompleteObject, pBCD->m_Where) == nSourceOffset)) {
#elif _M_IX86
				if (IsTypeDescriptorEqual(pBCD->m_pTypeDescriptor, pSourceTypeDescriptor) && (PMDtoOffset(pCompleteObject, pBCD->m_Where) == nSourceOffset)) {
#endif
					if (pTargetBCD) {
						if ((i - unTarget) <= nTargetBases) {
							if (!(pTargetBCD->m_unAttributes & BCD_HASPCHD)) {
								if (!unTarget && (pBCD->m_unAttributes & BCD_NOTVISIBLE)) {
									return nullptr;
								} else {
									return pTargetBCD;
								}
							}

#ifdef _M_X64
							const auto& pTargetBCA = __GetBaseClassArray(pBaseAddress, __GetClassHierarchyDescriptor(pBaseAddress, pTargetBCD));
							const auto& pSourceInTargetBCD = __GetBaseClassDescriptor(pBaseAddress, pTargetBCA, i - unTarget);
#elif _M_IX86
							const auto& pTargetBCA = pTargetBCD->m_pClassHierarchyDescriptor->m_pBaseClassArray;
							const auto& pSourceInTargetBCD = pTargetBCA->m_pBaseClassDescriptors[i - unTarget];
#endif

							if (pSourceInTargetBCD->m_unAttributes & BCD_NOTVISIBLE) {
								return nullptr;
							} else {
								return pTargetBCD;
							}
						} else {
							if ((pTargetBCD->m_unAttributes & (BCD_NOTVISIBLE | BCD_AMBIGUOUS)) || (pBCD->m_unAttributes & BCD_NOTVISIBLE)) {
								return nullptr;
							} else {
								return pTargetBCD;
							}
						}
					}

					pSourceBCD = pBCD;
				}
			}

			return nullptr;
		}

#ifdef _M_X64
		static const PRTTI_BASE_CLASS_DESCRIPTOR FindVITargetTypeInstance(void const* const pBaseAddress, void const* const pCompleteObject, const PRTTI_COMPLETE_OBJECT_LOCATOR pCompleteObjectLocator, const PRTTI_TYPE_DESCRIPTOR pSourceTypeDescriptor, const ptrdiff_t nSourceOffset, const PRTTI_TYPE_DESCRIPTOR pTargetTypeDescriptor) {
#elif _M_IX86
		static const PRTTI_BASE_CLASS_DESCRIPTOR FindVITargetTypeInstance(void const* const pCompleteObject, const PRTTI_COMPLETE_OBJECT_LOCATOR pCompleteObjectLocator, const PRTTI_TYPE_DESCRIPTOR pSourceTypeDescriptor, const ptrdiff_t nSourceOffset, const PRTTI_TYPE_DESCRIPTOR pTargetTypeDescriptor) {
#endif
#ifdef _M_X64
			if (!pBaseAddress || !pCompleteObject || !pCompleteObjectLocator || !pSourceTypeDescriptor || !pTargetTypeDescriptor) {
#elif _M_IX86
			if (!pCompleteObject || !pCompleteObjectLocator || !pSourceTypeDescriptor || !pTargetTypeDescriptor) {
#endif
				return nullptr;
			}

#ifdef _M_X64
			auto const& pBCA = __GetBaseClassArray(pBaseAddress, __GetClassHierarchyDescriptor(pBaseAddress, pCompleteObjectLocator));
			const unsigned int unNumberOfBaseClasses = __GetClassHierarchyDescriptor(pBaseAddress, pCompleteObjectLocator)->m_unNumberOfBaseClasses;
#elif _M_IX86
			const auto& pBCA = pCompleteObjectLocator->m_pClassHierarchyDescriptor->m_pBaseClassArray;
			const unsigned int unNumberOfBaseClasses = pCompleteObjectLocator->m_pClassHierarchyDescriptor->m_unNumberOfBaseClasses;
#endif

			PRTTI_BASE_CLASS_DESCRIPTOR pCrossCastTargetBCD = nullptr;
			PRTTI_BASE_CLASS_DESCRIPTOR pDownCastResultBCD = nullptr;
			PRTTI_BASE_CLASS_DESCRIPTOR pCrossCastSourceBCD = nullptr;

			PRTTI_BASE_CLASS_DESCRIPTOR pTargetBCD = nullptr;
			unsigned int unTarget = static_cast<unsigned int>(-1);
			unsigned int unTargetBases = 0;

			bool bDownCastAllowed = true;
			bool bDirectlyPublic = false;
			ptrdiff_t nOffsetDownCastResult = -1;

			PRTTI_BASE_CLASS_ARRAY pTargetBCA = nullptr;
			PRTTI_BASE_CLASS_DESCRIPTOR pSourceInTargetBCD = nullptr;

			for (unsigned int i = 0; i < unNumberOfBaseClasses; ++i) {
#ifdef _M_X64
				const auto& pBCD = __GetBaseClassDescriptor(pBaseAddress, pBCA, i);
#elif _M_IX86
				const auto& pBCD = pBCA->m_pBaseClassDescriptors[i];
#endif
				if (!pBCD) {
					continue;
				}

#ifdef _M_X64
				if (((i - unTarget) > unTargetBases) && IsTypeDescriptorEqual(__GetTypeDescriptor(pBaseAddress, pBCD), pTargetTypeDescriptor)) {
#elif _M_IX86
				if (((i - unTarget) > unTargetBases) && IsTypeDescriptorEqual(pBCD->m_pTypeDescriptor, pTargetTypeDescriptor)) {
#endif
					if (!(pBCD->m_unAttributes & (BCD_NOTVISIBLE | BCD_AMBIGUOUS))) {
						pCrossCastTargetBCD = pBCD;
					}

					pTargetBCD = pBCD;
					unTarget = i;
					unTargetBases = pBCD->m_unNumberOfContainedBases;
				}

#ifdef _M_X64
				if (IsTypeDescriptorEqual(__GetTypeDescriptor(pBaseAddress, pBCD), pSourceTypeDescriptor) && (PMDtoOffset(pCompleteObject, pBCD->m_Where) == nSourceOffset)) {
#elif _M_IX86
				if (IsTypeDescriptorEqual(pBCD->m_pTypeDescriptor, pSourceTypeDescriptor) && (PMDtoOffset(pCompleteObject, pBCD->m_Where) == nSourceOffset)) {
#endif
					if ((i - unTarget) <= unTargetBases) {
						if (bDownCastAllowed) {
							if (!pTargetBCD) {
								continue;
							}

							if (!(pTargetBCD->m_unAttributes & BCD_HASPCHD)) {
								if (!unTarget && (pTargetBCD->m_unAttributes & BCD_NOTVISIBLE)) {
									bDownCastAllowed = false;
								}

								bDirectlyPublic = true;
							} else {
#ifdef _M_X64
								pTargetBCA = __GetBaseClassArray(pBaseAddress, __GetClassHierarchyDescriptor(pBaseAddress, pTargetBCD));
								pSourceInTargetBCD = __GetBaseClassDescriptor(pBaseAddress, pTargetBCA, i - unTarget);
#elif _M_IX86
								pTargetBCA = pTargetBCD->m_pClassHierarchyDescriptor->m_pBaseClassArray;
								pSourceInTargetBCD = pTargetBCA->m_pBaseClassDescriptors[i - unTarget];
#endif

								if (pSourceInTargetBCD->m_unAttributes & BCD_NOTVISIBLE) {
									bDownCastAllowed = false;
								}

								bDirectlyPublic = !(pSourceInTargetBCD->m_unAttributes & BCD_PRIVORPROTBASE);
							}

							if (bDownCastAllowed && bDirectlyPublic) {
								const ptrdiff_t nOffsetTarget = PMDtoOffset(pCompleteObject, pTargetBCD->m_Where);
								if (pDownCastResultBCD && (nOffsetDownCastResult != nOffsetTarget)) {
									return nullptr;
								}

								pDownCastResultBCD = pTargetBCD;
								nOffsetDownCastResult = nOffsetTarget;
							}
						}
					} else {
						if (!(pBCD->m_unAttributes & (BCD_NOTVISIBLE | BCD_PRIVORPROTBASE))) {
							pCrossCastSourceBCD = pBCD;
						}
					}
				}
			}

			if (bDownCastAllowed && pDownCastResultBCD) {
				return pDownCastResultBCD;
			}

			if (pCrossCastSourceBCD && pCrossCastTargetBCD) {
				return pCrossCastTargetBCD;
			}

			return nullptr;
		}

#ifdef _M_X64
		void const* const __RTDynamicCast(void const* const pBaseAddress, void const* const pAddress, const LONG nOffset, const PRTTI_TYPE_DESCRIPTOR pSourceTypeDescriptor, const PRTTI_TYPE_DESCRIPTOR pDestinationTypeDescriptor) {
#elif _M_IX86
		void const* const __RTDynamicCast(void const* const pAddress, const LONG nOffset, const PRTTI_TYPE_DESCRIPTOR pSourceTypeDescriptor, const PRTTI_TYPE_DESCRIPTOR pDestinationTypeDescriptor) {
#endif
#ifdef _M_X64
			if (!pBaseAddress || !pAddress || !pSourceTypeDescriptor || !pDestinationTypeDescriptor) {
#elif _M_IX86
			if (!pAddress || !pSourceTypeDescriptor || !pDestinationTypeDescriptor) {
#endif
				return nullptr;
			}

			const auto& pCO = FindCompleteObject(pAddress);
			if (!pCO) {
				return nullptr;
			}

			const auto& pCOL = GetCompleteObjectLocatorFromObject(pAddress);
			if (!pCOL) {
				return nullptr;
			}

#ifdef _M_X64
			const auto& pCHD = reinterpret_cast<PRTTI_CLASS_HIERARCHY_DESCRIPTOR>(reinterpret_cast<size_t>(pBaseAddress) + pCOL->m_unClassHierarchyDescriptor);
#elif _M_IX86
			const auto& pCHD = pCOL->m_pClassHierarchyDescriptor;
#endif
			if (!pCHD) {
				return nullptr;
			}

			PRTTI_BASE_CLASS_DESCRIPTOR pBCD = nullptr;

			const unsigned int unAttributes = pCHD->m_unAttributes;
			if (!(unAttributes & CHD_MULTINH)) {
#ifdef _M_X64
				pBCD = FindSITargetTypeInstance(pBaseAddress, pCOL, pSourceTypeDescriptor, pDestinationTypeDescriptor);
#elif _M_IX86
				pBCD = FindSITargetTypeInstance(pCOL, pSourceTypeDescriptor, pDestinationTypeDescriptor);
#endif
			} else {
				const size_t unOffset = reinterpret_cast<size_t>(pAddress) - nOffset - reinterpret_cast<size_t>(pCO);

				if (!(unAttributes & CHD_VIRTINH)) {
#ifdef _M_X64
					pBCD = FindMITargetTypeInstance(pBaseAddress, pCO, pCOL, pSourceTypeDescriptor, unOffset, pDestinationTypeDescriptor);
#elif _M_IX86
					pBCD = FindMITargetTypeInstance(pCO, pCOL, pSourceTypeDescriptor, unOffset, pDestinationTypeDescriptor);
#endif
				} else {
#ifdef _M_X64
					pBCD = FindVITargetTypeInstance(pBaseAddress, pCO, pCOL, pSourceTypeDescriptor, unOffset, pDestinationTypeDescriptor);
#elif _M_IX86
					pBCD = FindVITargetTypeInstance(pCO, pCOL, pSourceTypeDescriptor, unOffset, pDestinationTypeDescriptor);
#endif
				}
			}

			if (!pBCD) {
				return nullptr;
			}

			return reinterpret_cast<void*>(reinterpret_cast<size_t>(pCO) + PMDtoOffset(pCO, pBCD->m_Where));
		}

		void const* const Object::DynamicCast(void const* const pAddress, const Object* pObject) {
			if (!pAddress || !pObject) {
				return nullptr;
			}

#ifdef _M_X64
			return __RTDynamicCast(m_pBaseAddress, pAddress, 0, m_pTypeDescriptor, pObject->GetTypeDescriptor());
#elif _M_IX86
			return __RTDynamicCast(pAddress, 0, m_pTypeDescriptor, pObject->GetTypeDescriptor());
#endif
		}

		const PRTTI_TYPE_DESCRIPTOR Object::GetTypeDescriptor() const {
			return m_pTypeDescriptor;
		}

		const PRTTI_CLASS_HIERARCHY_DESCRIPTOR Object::GetClassHierarchyDescriptor() const {
			return m_pClassHierarchyDescriptor;
		}

		const PRTTI_COMPLETE_OBJECT_LOCATOR Object::GetCompleteObject() const {
			return m_pCompleteObject;
		}

		void** Object::GetVTable() const {
			return m_pVTable;
		}

		std::vector<std::unique_ptr<Object>>& Object::GetBaseObjects() {
			return m_vecBaseClasses;
		}

		// ----------------------------------------------------------------
		// FindObject
		// ----------------------------------------------------------------

		std::unique_ptr<Object> FindObject(void const* const pBaseAddress, void const* const pAddress, const size_t unSize, char const* const szName, bool bCompleteObject) {
			if (!pBaseAddress || !pAddress || !unSize || !szName) {
				return nullptr;
			}

			const size_t unNameLength = strnlen_s(szName, 0x1000);
			if (!unNameLength || (unSize <= unNameLength)) {
				return nullptr;
			}

			void* pReference = const_cast<void*>(pAddress);
			void* pEndAddress = reinterpret_cast<char*>(const_cast<void*>(pAddress)) + unSize - unNameLength;
			while (pReference && (pReference < pEndAddress)) {
				pReference = const_cast<void*>(FindData(pReference, reinterpret_cast<size_t>(pEndAddress) - reinterpret_cast<size_t>(pReference), reinterpret_cast<unsigned char const* const>(szName), unNameLength));
				if (!pReference) {
					break;
				}

				const auto& pTypeDescriptor = reinterpret_cast<PRTTI_TYPE_DESCRIPTOR>(reinterpret_cast<char*>(pReference) - sizeof(void*) * 2);
				if ((pTypeDescriptor->m_pVFTable < pBaseAddress) || (pTypeDescriptor->m_pVFTable >= pEndAddress)) {
					pReference = reinterpret_cast<void*>(reinterpret_cast<char*>(pReference) + 1);
					continue;
				}

				void* pTypeDescriptorReference = const_cast<void*>(pAddress);
				while (pTypeDescriptorReference && (pTypeDescriptorReference < pEndAddress)) {
#ifdef _M_X64
					const size_t unTypeDescriptorOffsetTemp = reinterpret_cast<size_t>(pTypeDescriptor) - reinterpret_cast<size_t>(pBaseAddress);
					const unsigned int unTypeDescriptorOffset = (*(reinterpret_cast<const unsigned int*>(&unTypeDescriptorOffsetTemp)));
					pTypeDescriptorReference = const_cast<void*>(FindData(pTypeDescriptorReference, reinterpret_cast<size_t>(pEndAddress) - reinterpret_cast<size_t>(pTypeDescriptorReference), reinterpret_cast<unsigned char const* const>(&unTypeDescriptorOffset), sizeof(int)));
#elif _M_IX86
					pTypeDescriptorReference = const_cast<void*>(FindData(pTypeDescriptorReference, reinterpret_cast<size_t>(pEndAddress) - reinterpret_cast<size_t>(pTypeDescriptorReference), reinterpret_cast<unsigned char const* const>(&pTypeDescriptor), sizeof(int)));
#endif
					if (!pTypeDescriptorReference) {
						break;
					}

					if (bCompleteObject) {
						const auto& pCompleteObjectLocator = reinterpret_cast<PRTTI_COMPLETE_OBJECT_LOCATOR>(reinterpret_cast<char*>(pTypeDescriptorReference) - sizeof(int) * 3);
						if ((pCompleteObjectLocator->m_unSignature != COL_SIG_REV0) && (pCompleteObjectLocator->m_unSignature != COL_SIG_REV1)) {
							pTypeDescriptorReference = reinterpret_cast<void*>(reinterpret_cast<char*>(pTypeDescriptorReference) + 1);
							continue;
						}

#ifdef _M_X64
						if (pCompleteObjectLocator->m_unSignature != COL_SIG_REV0) {
							if ((reinterpret_cast<size_t>(pCompleteObjectLocator) - reinterpret_cast<size_t>(pBaseAddress)) != pCompleteObjectLocator->m_unSelf) {
								pTypeDescriptorReference = reinterpret_cast<void*>(reinterpret_cast<char*>(pTypeDescriptorReference) + 1);
								continue;
							}
						}
#endif

#ifdef _M_X64
						const auto& pClassHierarchyDescriptor = reinterpret_cast<PRTTI_CLASS_HIERARCHY_DESCRIPTOR>(reinterpret_cast<size_t>(pBaseAddress) + pCompleteObjectLocator->m_unClassHierarchyDescriptor);
#elif _M_IX86
						const auto& pClassHierarchyDescriptor = pCompleteObjectLocator->m_pClassHierarchyDescriptor;
#endif
						if ((pClassHierarchyDescriptor < pBaseAddress) || (pClassHierarchyDescriptor >= pEndAddress)) {
							pTypeDescriptorReference = reinterpret_cast<void*>(reinterpret_cast<char*>(pTypeDescriptorReference) + 1);
							continue;
						}

						if ((pClassHierarchyDescriptor->m_unSignature != COL_SIG_REV0) && (pClassHierarchyDescriptor->m_unSignature != COL_SIG_REV1)) {
							pTypeDescriptorReference = reinterpret_cast<void*>(reinterpret_cast<char*>(pTypeDescriptorReference) + 1);
							continue;
						}

#ifdef _M_X64
						const auto& pBaseClassArray = reinterpret_cast<PRTTI_BASE_CLASS_ARRAY>(reinterpret_cast<size_t>(pBaseAddress) + pClassHierarchyDescriptor->m_unBaseClassArray);
#elif _M_IX86
						const auto& pBaseClassArray = pClassHierarchyDescriptor->m_pBaseClassArray;
#endif
						if ((pBaseClassArray < pBaseAddress) || (pBaseClassArray >= pEndAddress)) {
							pTypeDescriptorReference = reinterpret_cast<void*>(reinterpret_cast<char*>(pTypeDescriptorReference) + 1);
							continue;
						}

						for (unsigned int i = 0; i < pClassHierarchyDescriptor->m_unNumberOfBaseClasses; ++i) {
#ifdef _M_X64
							const auto& pBaseClassDescriptor = reinterpret_cast<PRTTI_BASE_CLASS_DESCRIPTOR>(reinterpret_cast<size_t>(pBaseAddress) + pBaseClassArray->m_unBaseClassDescriptors[i]);
#elif _M_IX86
							const auto& pBaseClassDescriptor = pBaseClassArray->m_pBaseClassDescriptors[i];
#endif
							if (!pBaseClassDescriptor) {
								break;
							}

#ifdef _M_X64
							if (reinterpret_cast<void*>(reinterpret_cast<size_t>(pBaseAddress) + pBaseClassDescriptor->m_unTypeDescriptor) == pTypeDescriptor) {
#elif _M_IX86
							if (pBaseClassDescriptor->m_pTypeDescriptor == pTypeDescriptor) {
#endif
								void* pCompleteObjectLocatorReference = const_cast<void*>(FindData(pAddress, unSize, reinterpret_cast<unsigned char const* const>(&pCompleteObjectLocator), sizeof(void*)));
								if (!pCompleteObjectLocatorReference) {
									return nullptr;
								}

								return std::make_unique<Object>(pBaseAddress, pAddress, unSize, pTypeDescriptor, pClassHierarchyDescriptor, pBaseClassArray, pCompleteObjectLocator, reinterpret_cast<void**>(reinterpret_cast<char*>(pCompleteObjectLocatorReference) + sizeof(void*)));
							}
						}
					} else {
						const auto& pBaseClassDescriptor = reinterpret_cast<PRTTI_BASE_CLASS_DESCRIPTOR>(pTypeDescriptorReference);
#ifdef _M_X64
						const auto& pClassHierarchyDescriptor = reinterpret_cast<PRTTI_CLASS_HIERARCHY_DESCRIPTOR>(reinterpret_cast<size_t>(pBaseAddress) + pBaseClassDescriptor->m_unClassHierarchyDescriptor);
#elif _M_IX86
						const auto& pClassHierarchyDescriptor = pBaseClassDescriptor->m_pClassHierarchyDescriptor;
#endif
						if ((pClassHierarchyDescriptor < pBaseAddress) || (pClassHierarchyDescriptor >= pEndAddress)) {
							pTypeDescriptorReference = reinterpret_cast<void*>(reinterpret_cast<char*>(pTypeDescriptorReference) + 1);
							continue;
						}

						if ((pClassHierarchyDescriptor->m_unSignature != COL_SIG_REV0) && (pClassHierarchyDescriptor->m_unSignature != COL_SIG_REV1)) {
							pTypeDescriptorReference = reinterpret_cast<void*>(reinterpret_cast<char*>(pTypeDescriptorReference) + 1);
							continue;
						}

#ifdef _M_X64
						const auto& pBaseClassArray = reinterpret_cast<PRTTI_BASE_CLASS_ARRAY>(reinterpret_cast<size_t>(pBaseAddress) + pClassHierarchyDescriptor->m_unBaseClassArray);
#elif _M_IX86
						const auto& pBaseClassArray = pClassHierarchyDescriptor->m_pBaseClassArray;
#endif
						if ((pBaseClassArray < pBaseAddress) || (pBaseClassArray >= pEndAddress)) {
							pTypeDescriptorReference = reinterpret_cast<void*>(reinterpret_cast<char*>(pTypeDescriptorReference) + 1);
							continue;
						}

#ifdef _M_X64
						if (reinterpret_cast<void*>(reinterpret_cast<size_t>(pBaseAddress) + pBaseClassDescriptor->m_unTypeDescriptor) == pTypeDescriptor) {
#elif _M_IX86
						if (pBaseClassDescriptor->m_pTypeDescriptor == pTypeDescriptor) {
#endif
							return std::make_unique<Object>(pBaseAddress, pAddress, unSize, pTypeDescriptor, pClassHierarchyDescriptor, pBaseClassArray, nullptr, nullptr);
						}
					}

					pTypeDescriptorReference = reinterpret_cast<void*>(reinterpret_cast<char*>(pTypeDescriptorReference) + 1);
				}

				pReference = reinterpret_cast<void*>(reinterpret_cast<char*>(pReference) + 1);
			}

			return nullptr;
		}

		std::unique_ptr<Object> FindObject(void const* const pAddress, const size_t unSize, char const* const szName, bool bCompleteObject) {
			return FindObject(pAddress, pAddress, unSize, szName, bCompleteObject);
		}

		std::unique_ptr<Object> FindObject(const HMODULE hModule, char const* const szName, bool bCompleteObject) {
			if (!hModule || !szName) {
				return nullptr;
			}

			const auto& pDH = reinterpret_cast<PIMAGE_DOS_HEADER>(hModule);
			const auto& pNTHs = reinterpret_cast<PIMAGE_NT_HEADERS>(reinterpret_cast<char*>(hModule) + pDH->e_lfanew);
			const auto& pOH = &(pNTHs->OptionalHeader);

			return FindObject(reinterpret_cast<void*>(hModule), static_cast<size_t>(pOH->SizeOfImage) - 1, szName, bCompleteObject);
		}

		std::unique_ptr<Object> FindObjectA(char const* const szModuleName, char const* const szName, bool bCompleteObject) {
			if (!szModuleName || !szName) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleA(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindObject(hModule, szName, bCompleteObject);
		}


		std::unique_ptr<Object> FindObjectW(wchar_t const* const szModuleName, char const* const szName, bool bCompleteObject) {
			if (!szModuleName || !szName) {
				return nullptr;
			}

			HMODULE hModule = GetModuleHandleW(szModuleName);
			if (!hModule) {
				return nullptr;
			}

			return FindObject(hModule, szName, bCompleteObject);
		}

#ifdef _UNICODE
		std::unique_ptr<Object> FindObject(wchar_t const* const szModuleName, char const* const szName, bool bCompleteObject) {
			return FindObjectW(szModuleName, szName, bCompleteObject);
		}
#else
		std::unique_ptr<Object> FindObject(char const* const szModuleName, char const* const szName, bool bCompleteObject) {
			return FindObjectA(szModuleName, szName, bCompleteObject);
		}
#endif
	}

	// ----------------------------------------------------------------
	// Sync
	// ----------------------------------------------------------------

	namespace Sync {

		// ----------------------------------------------------------------
		// Event
		// ----------------------------------------------------------------

		Event::Event(bool bManualReset, bool bInitialState) {
			m_hEvent = CreateEvent(nullptr, bManualReset, bInitialState, nullptr);
		}

		Event::~Event() {
			if (m_hEvent && (m_hEvent != INVALID_HANDLE_VALUE)) {
				CloseHandle(m_hEvent);
			}
		}

		HANDLE Event::GetEvent() const {
			return m_hEvent;
		}

		bool Event::Signal() {
			if (!m_hEvent || (m_hEvent == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (!SetEvent(m_hEvent)) {
				return false;
			}

			return true;
		}

		bool Event::Reset() {
			if (!m_hEvent || (m_hEvent == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (!ResetEvent(m_hEvent)) {
				return false;
			}

			return true;
		}

		bool Event::Pulse() {
			if (!m_hEvent || (m_hEvent == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (!PulseEvent(m_hEvent)) {
				return false;
			}

			return true;
		}

		bool Event::Wait(DWORD unMilliseconds) {
			if (!m_hEvent || (m_hEvent == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (WaitForSingleObject(m_hEvent, unMilliseconds) != WAIT_OBJECT_0) {
				return false;
			}

			return true;
		}

		// ----------------------------------------------------------------
		// EventServer
		// ----------------------------------------------------------------

		EventServer::EventServer(bool bIsGlobal, bool bManualReset, bool bInitialState) {
			memset(m_szEventName, 0, sizeof(m_szEventName));
			m_hEvent = nullptr;

			auto pTEB = GetTEB();
			if (!pTEB) {
				return;
			}

			const DWORD unPID = pTEB->ClientId.UniqueProcess & 0xFFFFFFFFi32;
			const DWORD unTID = pTEB->ClientId.UniqueThread & 0xFFFFFFFFi32;
			const DWORD64 unCycle = __rdtsc();
			if (_stprintf_s(m_szEventName, _T("EVENT:%08X:%08X:%08X%08X"), 0xFFFFFFFFi32 - unPID, 0xFFFFFFFFi32 - unTID, static_cast<DWORD>(unCycle & 0xFFFFFFFFi32), static_cast<DWORD>((unCycle >> 32) & 0xFFFFFFFFi32)) == -1) {
				memset(m_szEventName, 0, sizeof(m_szEventName));
				return;
			}

			TCHAR szEvent[64];
			memset(szEvent, 0, sizeof(szEvent));
			if (bIsGlobal) {
				if (_stprintf_s(szEvent, _T("Global\\%s"), m_szEventName) == -1) {
					memset(m_szEventName, 0, sizeof(m_szEventName));
					return;
				}
			} else {
				if (_stprintf_s(szEvent, _T("Local\\%s"), m_szEventName) == -1) {
					memset(m_szEventName, 0, sizeof(m_szEventName));
					return;
				}
			}

			m_hEvent = CreateEvent(nullptr, bManualReset, bInitialState, szEvent);
		}

		EventServer::~EventServer() {
			if (m_hEvent && (m_hEvent != INVALID_HANDLE_VALUE)) {
				CloseHandle(m_hEvent);
			}
		}

		bool EventServer::GetEventName(TCHAR szEventName[64]) {
			if (!m_hEvent || (m_hEvent == INVALID_HANDLE_VALUE) || !szEventName) {
				return false;
			}

			memcpy(szEventName, m_szEventName, sizeof(m_szEventName));

			return true;
		}

		HANDLE EventServer::GetEvent() const {
			return m_hEvent;
		}

		bool EventServer::Signal() {
			if (!m_hEvent || (m_hEvent == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (!SetEvent(m_hEvent)) {
				return false;
			}

			return true;
		}

		bool EventServer::Reset() {
			if (!m_hEvent || (m_hEvent == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (!ResetEvent(m_hEvent)) {
				return false;
			}

			return true;
		}

		bool EventServer::Pulse() {
			if (!m_hEvent || (m_hEvent == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (!PulseEvent(m_hEvent)) {
				return false;
			}

			return true;
		}

		bool EventServer::Wait(DWORD unMilliseconds) {
			if (!m_hEvent || (m_hEvent == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (WaitForSingleObject(m_hEvent, unMilliseconds) != WAIT_OBJECT_0) {
				return false;
			}

			return true;
		}

		// ----------------------------------------------------------------
		// EventClient
		// ----------------------------------------------------------------

		EventClient::EventClient(TCHAR szEventName[64], bool bIsGlobal) {
			m_hEvent = nullptr;

			if (!szEventName) {
				return;
			}

			TCHAR szEvent[64];
			memset(szEvent, 0, sizeof(szEvent));
			if (bIsGlobal) {
				if (_stprintf_s(szEvent, _T("Global\\%s"), szEventName) == -1) {
					return;
				}
			} else {
				if (_stprintf_s(szEvent, _T("Local\\%s"), szEventName) == -1) {
					return;
				}
			}

			m_hEvent = OpenEvent(EVENT_ALL_ACCESS, FALSE, szEvent);
		}

		EventClient::~EventClient() {
			if (m_hEvent && (m_hEvent != INVALID_HANDLE_VALUE)) {
				CloseHandle(m_hEvent);
			}
		}

		HANDLE EventClient::GetEvent() const {
			return m_hEvent;
		}

		bool EventClient::Signal() {
			if (!m_hEvent || (m_hEvent == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (!SetEvent(m_hEvent)) {
				return false;
			}

			return true;
		}

		bool EventClient::Reset() {
			if (!m_hEvent || (m_hEvent == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (!ResetEvent(m_hEvent)) {
				return false;
			}

			return true;
		}

		bool EventClient::Pulse() {
			if (!m_hEvent || (m_hEvent == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (!PulseEvent(m_hEvent)) {
				return false;
			}

			return true;
		}

		bool EventClient::Wait(DWORD unMilliseconds) {
			if (!m_hEvent || (m_hEvent == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (WaitForSingleObject(m_hEvent, unMilliseconds) != WAIT_OBJECT_0) {
				return false;
			}

			return true;
		}

		// ----------------------------------------------------------------
		// Mutex
		// ----------------------------------------------------------------

		Mutex::Mutex(bool bInitialState) {
			m_hMutex = CreateMutex(nullptr, bInitialState, nullptr);
		}

		Mutex::~Mutex() {
			if (m_hMutex && (m_hMutex != INVALID_HANDLE_VALUE)) {
				CloseHandle(m_hMutex);
			}
		}

		HANDLE Mutex::GetMutex() const {
			return m_hMutex;
		}

		bool Mutex::Lock(DWORD unMilliseconds) {
			if (!m_hMutex || (m_hMutex == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (WaitForSingleObject(m_hMutex, unMilliseconds) != WAIT_OBJECT_0) {
				return false;
			}

			return true;
		}

		bool Mutex::UnLock() {
			if (!m_hMutex || (m_hMutex == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (!ReleaseMutex(m_hMutex)) {
				return false;
			}

			return true;
		}

		// ----------------------------------------------------------------
		// MutexServer
		// ----------------------------------------------------------------

		MutexServer::MutexServer(bool bIsGlobal, bool bInitialState) {
			memset(m_szMutexName, 0, sizeof(m_szMutexName));
			m_hMutex = nullptr;

			auto pTEB = GetTEB();
			if (!pTEB) {
				return;
			}

			const DWORD unPID = pTEB->ClientId.UniqueProcess & 0xFFFFFFFFi32;
			const DWORD unTID = pTEB->ClientId.UniqueThread & 0xFFFFFFFFi32;
			const DWORD64 unCycle = __rdtsc();
			if (_stprintf_s(m_szMutexName, _T("MUTEX:%08X:%08X:%08X%08X"), 0xFFFFFFFFi32 - unPID, 0xFFFFFFFFi32 - unTID, static_cast<DWORD>(unCycle & 0xFFFFFFFFi32), static_cast<DWORD>((unCycle >> 32) & 0xFFFFFFFFi32)) == -1) {
				memset(m_szMutexName, 0, sizeof(m_szMutexName));
				return;
			}

			TCHAR szMutex[64];
			memset(szMutex, 0, sizeof(szMutex));
			if (bIsGlobal) {
				if (_stprintf_s(szMutex, _T("Global\\%s"), m_szMutexName) == -1) {
					memset(m_szMutexName, 0, sizeof(m_szMutexName));
					return;
				}
			} else {
				if (_stprintf_s(szMutex, _T("Local\\%s"), m_szMutexName) == -1) {
					memset(m_szMutexName, 0, sizeof(m_szMutexName));
					return;
				}
			}

			m_hMutex = CreateMutex(nullptr, bInitialState, szMutex);
		}

		MutexServer::~MutexServer() {
			if (m_hMutex && (m_hMutex != INVALID_HANDLE_VALUE)) {
				CloseHandle(m_hMutex);
			}
		}

		bool MutexServer::GetMutexName(TCHAR szMutexName[64]) {
			if (!m_hMutex || (m_hMutex == INVALID_HANDLE_VALUE) || !szMutexName) {
				return false;
			}

			memcpy(szMutexName, m_szMutexName, sizeof(m_szMutexName));

			return true;
		}

		HANDLE MutexServer::GetMutex() const {
			return m_hMutex;
		}

		bool MutexServer::Lock(DWORD unMilliseconds) {
			if (!m_hMutex || (m_hMutex == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (WaitForSingleObject(m_hMutex, unMilliseconds) != WAIT_OBJECT_0) {
				return false;
			}

			return true;
		}

		bool MutexServer::UnLock() {
			if (!m_hMutex || (m_hMutex == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (!ReleaseMutex(m_hMutex)) {
				return false;
			}

			return true;
		}

		// ----------------------------------------------------------------
		// MutexClient
		// ----------------------------------------------------------------

		MutexClient::MutexClient(TCHAR szMutexName[64], bool bIsGlobal) {
			m_hMutex = nullptr;

			if (!szMutexName) {
				return;
			}

			TCHAR szMutex[64];
			memset(szMutex, 0, sizeof(szMutex));
			if (bIsGlobal) {
				if (_stprintf_s(szMutex, _T("Global\\%s"), szMutexName) == -1) {
					return;
				}
			} else {
				if (_stprintf_s(szMutex, _T("Local\\%s"), szMutexName) == -1) {
					return;
				}
			}

			m_hMutex = OpenMutex(MUTEX_ALL_ACCESS, FALSE, szMutex);
		}

		MutexClient::~MutexClient() {
			if (m_hMutex && (m_hMutex != INVALID_HANDLE_VALUE)) {
				CloseHandle(m_hMutex);
			}
		}

		HANDLE MutexClient::GetMutex() const {
			return m_hMutex;
		}

		bool MutexClient::Lock(DWORD unMilliseconds) {
			if (!m_hMutex || (m_hMutex == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (WaitForSingleObject(m_hMutex, unMilliseconds) != WAIT_OBJECT_0) {
				return false;
			}

			return true;
		}

		bool MutexClient::UnLock() {
			if (!m_hMutex || (m_hMutex == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (!ReleaseMutex(m_hMutex)) {
				return false;
			}

			return true;
		}

		// ----------------------------------------------------------------
		// Semaphore
		// ----------------------------------------------------------------

		Semaphore::Semaphore(LONG nInitialCount, LONG nMaximumCount) {
			m_hSemaphore = CreateSemaphore(nullptr, nInitialCount, nMaximumCount, nullptr);
		}

		Semaphore::~Semaphore() {
			if (m_hSemaphore && (m_hSemaphore != INVALID_HANDLE_VALUE)) {
				CloseHandle(m_hSemaphore);
			}
		}

		HANDLE Semaphore::GetSemaphore() const {
			return m_hSemaphore;
		}

		bool Semaphore::Enter(DWORD unMilliseconds) {
			if (!m_hSemaphore || (m_hSemaphore == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (WaitForSingleObject(m_hSemaphore, unMilliseconds) != WAIT_OBJECT_0) {
				return false;
			}

			return true;
		}

		bool Semaphore::Leave(LONG nReleaseCount) {
			if (!m_hSemaphore || (m_hSemaphore == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (!ReleaseSemaphore(m_hSemaphore, nReleaseCount, nullptr)) {
				return false;
			}

			return true;
		}

		// ----------------------------------------------------------------
		// SemaphoreServer
		// ----------------------------------------------------------------

		SemaphoreServer::SemaphoreServer(bool bIsGlobal, LONG nInitialCount, LONG nMaximumCount) {
			memset(m_szSemaphoreName, 0, sizeof(m_szSemaphoreName));
			m_hSemaphore = nullptr;

			auto pTEB = GetTEB();
			if (!pTEB) {
				return;
			}

			const DWORD unPID = pTEB->ClientId.UniqueProcess & 0xFFFFFFFFi32;
			const DWORD unTID = pTEB->ClientId.UniqueThread & 0xFFFFFFFFi32;
			const DWORD64 unCycle = __rdtsc();
			if (_stprintf_s(m_szSemaphoreName, _T("SEMAPHORE:%08X:%08X:%08X%08X"), 0xFFFFFFFFi32 - unPID, 0xFFFFFFFFi32 - unTID, static_cast<DWORD>(unCycle & 0xFFFFFFFFi32), static_cast<DWORD>((unCycle >> 32) & 0xFFFFFFFFi32)) == -1) {
				memset(m_szSemaphoreName, 0, sizeof(m_szSemaphoreName));
				return;
			}

			TCHAR szSemaphore[64];
			memset(szSemaphore, 0, sizeof(szSemaphore));
			if (bIsGlobal) {
				if (_stprintf_s(szSemaphore, _T("Global\\%s"), m_szSemaphoreName) == -1) {
					memset(m_szSemaphoreName, 0, sizeof(m_szSemaphoreName));
					return;
				}
			} else {
				if (_stprintf_s(szSemaphore, _T("Local\\%s"), m_szSemaphoreName) == -1) {
					memset(m_szSemaphoreName, 0, sizeof(m_szSemaphoreName));
					return;
				}
			}

			m_hSemaphore = CreateSemaphore(nullptr, nInitialCount, nMaximumCount, szSemaphore);
		}

		SemaphoreServer::~SemaphoreServer() {
			if (m_hSemaphore && (m_hSemaphore != INVALID_HANDLE_VALUE)) {
				CloseHandle(m_hSemaphore);
			}
		}

		bool SemaphoreServer::GetSemaphoreName(TCHAR szSemaphoreName[64]) {
			if (!m_hSemaphore || (m_hSemaphore == INVALID_HANDLE_VALUE) || !szSemaphoreName) {
				return false;
			}

			memcpy(szSemaphoreName, m_szSemaphoreName, sizeof(m_szSemaphoreName));

			return true;
		}

		HANDLE SemaphoreServer::GetSemaphore() const {
			return m_hSemaphore;
		}

		bool SemaphoreServer::Enter(DWORD unMilliseconds) {
			if (!m_hSemaphore || (m_hSemaphore == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (WaitForSingleObject(m_hSemaphore, unMilliseconds) != WAIT_OBJECT_0) {
				return false;
			}

			return true;
		}

		bool SemaphoreServer::Leave(LONG nReleaseCount) {
			if (!m_hSemaphore || (m_hSemaphore == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (!ReleaseSemaphore(m_hSemaphore, nReleaseCount, nullptr)) {
				return false;
			}

			return true;
		}

		// ----------------------------------------------------------------
		// SemaphoreClient
		// ----------------------------------------------------------------

		SemaphoreClient::SemaphoreClient(TCHAR szSemaphoreName[64], bool bIsGlobal) {
			m_hSemaphore = nullptr;

			if (!szSemaphoreName) {
				return;
			}

			TCHAR szSemaphore[64];
			memset(szSemaphore, 0, sizeof(szSemaphore));
			if (bIsGlobal) {
				if (_stprintf_s(szSemaphore, _T("Global\\%s"), szSemaphoreName) == -1) {
					return;
				}
			} else {
				if (_stprintf_s(szSemaphore, _T("Local\\%s"), szSemaphoreName) == -1) {
					return;
				}
			}

			m_hSemaphore = OpenSemaphore(SEMAPHORE_ALL_ACCESS, FALSE, szSemaphore);
		}

		SemaphoreClient::~SemaphoreClient() {
			if (m_hSemaphore && (m_hSemaphore != INVALID_HANDLE_VALUE)) {
				CloseHandle(m_hSemaphore);
			}
		}

		HANDLE SemaphoreClient::GetSemaphore() const {
			return m_hSemaphore;
		}

		bool SemaphoreClient::Enter(DWORD unMilliseconds) {
			if (!m_hSemaphore || (m_hSemaphore == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (WaitForSingleObject(m_hSemaphore, unMilliseconds) != WAIT_OBJECT_0) {
				return false;
			}

			return true;
		}

		bool SemaphoreClient::Leave(LONG nReleaseCount) {
			if (!m_hSemaphore || (m_hSemaphore == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (!ReleaseSemaphore(m_hSemaphore, nReleaseCount, nullptr)) {
				return false;
			}

			return true;
		}

		// ----------------------------------------------------------------
		// CriticalSection
		// ----------------------------------------------------------------

		CriticalSection::CriticalSection() {
			InitializeCriticalSection(&m_CriticalSection);
		}

		CriticalSection::CriticalSection(DWORD unSpinCount) {
			InitializeCriticalSectionAndSpinCount(&m_CriticalSection, unSpinCount);
		}

		CriticalSection::~CriticalSection() {
			DeleteCriticalSection(&m_CriticalSection);
		}

		PCRITICAL_SECTION CriticalSection::GetCriticalSection() {
			return &m_CriticalSection;
		}

		void CriticalSection::Enter() {
			EnterCriticalSection(&m_CriticalSection);
		}

		void CriticalSection::Leave() {
			LeaveCriticalSection(&m_CriticalSection);
		}

		// ----------------------------------------------------------------
		// SRWLock
		// ----------------------------------------------------------------

		SRWLock::SRWLock(bool bIsShared) {
			m_bIsShared = bIsShared;
			InitializeSRWLock(&m_SRWLock);
		}

		SRWLock::~SRWLock() {
			Release();
		}

		bool SRWLock::IsShared() const {
			return m_bIsShared;
		}

		PSRWLOCK SRWLock::GetSRWLock() {
			return &m_SRWLock;
		}

		void SRWLock::Acquire() {
			if (m_bIsShared) {
				AcquireSRWLockShared(&m_SRWLock);
			} else {
				AcquireSRWLockExclusive(&m_SRWLock);
			}
		}

		void SRWLock::Release() {
			if (m_bIsShared) {
				ReleaseSRWLockShared(&m_SRWLock);
			} else {
				AcquireSRWLockExclusive(&m_SRWLock);
			}
		}

		// ----------------------------------------------------------------
		// ConditionVariable
		// ----------------------------------------------------------------

		ConditionVariable::ConditionVariable() {
			InitializeConditionVariable(&m_ConditionVariable);
		}

		ConditionVariable::~ConditionVariable() {
			WakeAll();
		}

		CONDITION_VARIABLE ConditionVariable::GetConditionVariable() const {
			return m_ConditionVariable;
		}

		bool ConditionVariable::Sleep(CriticalSection* pLock, DWORD unMilliseconds) {
			if (!pLock) {
				return false;
			}

			if (!SleepConditionVariableCS(&m_ConditionVariable, pLock->GetCriticalSection(), unMilliseconds)) {
				return false;
			}

			return true;
		}

		bool ConditionVariable::Sleep(SRWLock* pLock, DWORD unMilliseconds) {
			if (!pLock) {
				return false;
			}

			if (!SleepConditionVariableSRW(&m_ConditionVariable, pLock->GetSRWLock(), unMilliseconds, pLock->IsShared() ? CONDITION_VARIABLE_LOCKMODE_SHARED : 0)) {
				return false;
			}

			return true;
		}

		void ConditionVariable::Wake() {
			WakeConditionVariable(&m_ConditionVariable);
		}

		void ConditionVariable::WakeAll() {
			WakeAllConditionVariable(&m_ConditionVariable);
		}

		// ----------------------------------------------------------------
		// Suspender
		// ----------------------------------------------------------------

		Suspender::~Suspender() {
			Resume();
		}

		bool Suspender::Suspend() {
			if (!m_Mutex.Lock()) {
				return false;
			}

			const auto& hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, NULL);
			if (!hSnap || (hSnap == INVALID_HANDLE_VALUE)) {
				m_Mutex.UnLock();
				return false;
			}

			THREADENTRY32 te;
			memset(&te, 0, sizeof(te));

			te.dwSize = sizeof(THREADENTRY32);

			if (!Thread32First(hSnap, &te)) {
				CloseHandle(hSnap);
				m_Mutex.UnLock();
				return false;
			}

			const auto& pTEB = GetTEB();
			if (!pTEB) {
				CloseHandle(hSnap);
				m_Mutex.UnLock();
				return false;
			}

			do {
				if ((pTEB->ClientId.UniqueProcess == te.th32OwnerProcessID) && (pTEB->ClientId.UniqueThread != te.th32ThreadID)) {
					HANDLE hThread = OpenThread(THREAD_SUSPEND_RESUME, FALSE, te.th32ThreadID);
					if (hThread && (hThread != INVALID_HANDLE_VALUE)) {
						SuspendThread(hThread);

						CONTEXT ctx;
						memset(&ctx, 0, sizeof(CONTEXT));

						ctx.ContextFlags = CONTEXT_FULL;

						if (!GetThreadContext(hThread, &ctx)) {
							ResumeThread(hThread);
							CloseHandle(hThread);
							continue;
						}

						m_Threads.emplace_back(te.th32ThreadID, hThread, ctx);
					}
				}
			} while (Thread32Next(hSnap, &te));

			CloseHandle(hSnap);

			if (!m_Mutex.UnLock()) {
				return false;
			}

			return true;
		}

		void Suspender::Resume() {

			for (auto& thread : m_Threads) {
				SetThreadContext(thread.m_hHandle, &thread.m_CTX);
				ResumeThread(thread.m_hHandle);
				CloseHandle(thread.m_hHandle);
			}

			m_Threads.clear();
		}

		void Suspender::FixExecutionAddress(void* pAddress, void* pNewAddress) {
			for (auto& thread : m_Threads) {
#ifdef _M_X64
				DWORD64 unIP = thread.m_CTX.Rip;
#elif _M_IX86
				DWORD unIP = thread.m_CTX.Eip;
#endif

				if (reinterpret_cast<void*>(unIP) == pAddress) {
#ifdef _M_X64
					unIP = reinterpret_cast<DWORD64>(pNewAddress);
#elif _M_IX86
					unIP = reinterpret_cast<DWORD>(pNewAddress);
#endif
				}

#ifdef _M_X64
				thread.m_CTX.Rip = unIP;
#elif _M_IX86
				thread.m_CTX.Eip = unIP;
#endif
			}
		}

		Suspender g_Suspender;
	}

	// ----------------------------------------------------------------
	// Pipe
	// ----------------------------------------------------------------

	namespace Pipe {

		// ----------------------------------------------------------------
		// PipeServer
		// ----------------------------------------------------------------

		PipeServer::PipeServer(const size_t unBufferSize) {
			m_unBufferSize = unBufferSize;
			memset(m_szPipeName, 0, sizeof(m_szPipeName));
			m_hPipe = nullptr;

			if (!unBufferSize) {
				return;
			}

			auto pTEB = GetTEB();
			if (!pTEB) {
				return;
			}

			const DWORD unPID = pTEB->ClientId.UniqueProcess & 0xFFFFFFFFi32;
			const DWORD unTID = pTEB->ClientId.UniqueThread & 0xFFFFFFFFi32;
			const DWORD64 unCycle = __rdtsc();
			if (_stprintf_s(m_szPipeName, _T("PIPE:%08X:%08X:%08X%08X"), 0xFFFFFFFFi32 - unPID, 0xFFFFFFFFi32 - unTID, static_cast<DWORD>(unCycle & 0xFFFFFFFFi32), static_cast<DWORD>((unCycle >> 32) & 0xFFFFFFFFi32)) == -1) {
				memset(m_szPipeName, 0, sizeof(m_szPipeName));
				return;
			}

			TCHAR szPipe[64];
			memset(szPipe, 0, sizeof(szPipe));
			if (_stprintf_s(szPipe, _T("\\\\.\\pipe\\%s"), m_szPipeName) == -1) {
				memset(m_szPipeName, 0, sizeof(m_szPipeName));
				return;
			}

			m_hPipe = CreateNamedPipe(szPipe, PIPE_ACCESS_DUPLEX, PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT, 1, static_cast<DWORD>(unBufferSize & 0xFFFFFFFF), static_cast<DWORD>(unBufferSize & 0xFFFFFFFF), NMPWAIT_USE_DEFAULT_WAIT, nullptr);
		}

		PipeServer::~PipeServer() {
			Close();
		}

		bool PipeServer::GetPipeName(TCHAR szPipeName[64]) {
			memcpy(szPipeName, m_szPipeName, sizeof(m_szPipeName));
			return true;
		}

		HANDLE PipeServer::GetPipe() const {
			return m_hPipe;
		}

		bool PipeServer::Open() {
			if (!m_hPipe || (m_hPipe == INVALID_HANDLE_VALUE)) {
				TCHAR szPipe[64];
				memset(szPipe, 0, sizeof(szPipe));
				if (_stprintf_s(szPipe, _T("\\\\.\\pipe\\%s"), m_szPipeName) == -1) {
					memset(m_szPipeName, 0, sizeof(m_szPipeName));
					return false;
				}

				m_hPipe = CreateNamedPipe(szPipe, PIPE_ACCESS_DUPLEX, PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT, 1, static_cast<DWORD>(m_unBufferSize & 0xFFFFFFFF), static_cast<DWORD>(m_unBufferSize & 0xFFFFFFFF), NMPWAIT_USE_DEFAULT_WAIT, nullptr);
				if (!m_hPipe || (m_hPipe == INVALID_HANDLE_VALUE)) {
					return false;
				}
			}

			if (!ConnectNamedPipe(m_hPipe, nullptr)) {
				return false;
			}

			return true;
		}

		bool PipeServer::Close() {
			if (!m_hPipe || (m_hPipe == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (!CloseHandle(m_hPipe)) {
				return false;
			}

			m_hPipe = nullptr;

			memset(m_szPipeName, 0, sizeof(m_szPipeName));

			const DWORD unPID = GetCurrentProcessId();
			const DWORD unTID = GetCurrentThreadId();
			const DWORD64 unCycle = __rdtsc();
			if (_stprintf_s(m_szPipeName, _T("PIPE:%08X:%08X:%08X%08X"), 0xFFFFFFFFi32 - unPID, 0xFFFFFFFFi32 - unTID, static_cast<DWORD>(unCycle & 0xFFFFFFFFi32), static_cast<DWORD>((unCycle >> 32) & 0xFFFFFFFFi32)) == -1) {
				memset(m_szPipeName, 0, sizeof(m_szPipeName));
				return false;
			}

			return true;
		}

		bool PipeServer::Send(unsigned char pData[]) {
			if (!pData || !m_hPipe || (m_hPipe == INVALID_HANDLE_VALUE)) {
				return false;
			}

			DWORD unNumberOfBytesWritten = 0;
			if (!WriteFile(m_hPipe, pData, static_cast<DWORD>(m_unBufferSize & 0xFFFFFFFF), &unNumberOfBytesWritten, nullptr)) {
				if (GetLastError() == ERROR_NO_DATA) {
					return true;
				}

				return false;
			}

			if (unNumberOfBytesWritten != m_unBufferSize) {
				return false;
			}

			return true;
		}

		bool PipeServer::Receive(unsigned char pData[]) {
			if (!pData || !m_hPipe || (m_hPipe == INVALID_HANDLE_VALUE)) {
				return false;
			}

			DWORD unNumberOfBytesRead = 0;
			if (!ReadFile(m_hPipe, pData, static_cast<DWORD>(m_unBufferSize & 0xFFFFFFFF), &unNumberOfBytesRead, nullptr)) {
				if (GetLastError() == ERROR_BROKEN_PIPE) {
					return true;
				}

				return false;
			}

			if (unNumberOfBytesRead != m_unBufferSize) {
				return false;
			}

			return true;
		}

		// ----------------------------------------------------------------
		// PipeClient
		// ----------------------------------------------------------------

		PipeClient::PipeClient(const size_t unBufferSize) {
			m_unBufferSize = unBufferSize;
			m_hPipe = nullptr;
		}

		PipeClient::~PipeClient() {
			Close();
		}

		HANDLE PipeClient::GetPipe() const {
			return m_hPipe;
		}

		bool PipeClient::Open(TCHAR szPipeName[64]) {
			if (!szPipeName) {
				return false;
			}

			TCHAR szPipe[64];
			memset(szPipe, 0, sizeof(szPipe));
			_stprintf_s(szPipe, _T("\\\\.\\pipe\\%s"), szPipeName);

			m_hPipe = CreateFile(szPipe, GENERIC_READ | GENERIC_WRITE, NULL, nullptr, OPEN_EXISTING, NULL, nullptr);
			if (!m_hPipe || (m_hPipe == INVALID_HANDLE_VALUE)) {
				return false;
			}

			return true;
		}

		bool PipeClient::Close() {
			if (!m_hPipe || (m_hPipe == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (!CloseHandle(m_hPipe)) {
				return false;
			}

			m_hPipe = nullptr;

			return true;
		}

		bool PipeClient::Send(unsigned char pData[]) {
			if (!pData || !m_hPipe || (m_hPipe == INVALID_HANDLE_VALUE)) {
				return false;
			}

			DWORD unNumberOfBytesWritten = 0;
			if (!WriteFile(m_hPipe, pData, static_cast<DWORD>(m_unBufferSize & 0xFFFFFFFF), &unNumberOfBytesWritten, nullptr)) {
				if (GetLastError() == ERROR_NO_DATA) {
					return true;
				}

				return false;
			}

			if (unNumberOfBytesWritten != m_unBufferSize) {
				return false;
			}

			return true;
		}

		bool PipeClient::Receive(unsigned char pData[]) {
			if (!pData || !m_hPipe || (m_hPipe == INVALID_HANDLE_VALUE)) {
				return false;
			}

			DWORD unNumberOfBytesRead = 0;
			if (!ReadFile(m_hPipe, pData, static_cast<DWORD>(m_unBufferSize & 0xFFFFFFFF), &unNumberOfBytesRead, nullptr)) {
				if (GetLastError() == ERROR_BROKEN_PIPE) {
					return true;
				}

				return false;
			}

			if (unNumberOfBytesRead != m_unBufferSize) {
				return false;
			}

			return true;
		}
	}

	// ----------------------------------------------------------------
	// Parallel
	// ----------------------------------------------------------------

	namespace Parallel {

		/*
		// ----------------------------------------------------------------
		// Thread Data
		// ----------------------------------------------------------------

		typedef struct _THREAD_DATA {
			void* m_pParameter;
		} THREAD_DATA, *PTHREAD_DATA;

		// ----------------------------------------------------------------
		// Thread Routine
		// ----------------------------------------------------------------

		DWORD WINAPI ThreadRoutine(PVOID lpThreadParameter) {
			auto pTD = reinterpret_cast<PTHREAD_DATA>(lpThreadParameter);
			if (!pTD) {
				return EXIT_SUCCESS;
			}

			auto pThread = static_cast<Thread*>(pTD->m_pParameter);
			if (!pThread) {
				return EXIT_SUCCESS;
			}

			auto pCallback = pThread->GetCallBack();
			if (pCallback) {
				pCallback(pThread->GetData());
			}

			return EXIT_SUCCESS;
		}

		// ----------------------------------------------------------------
		// Thread
		// ----------------------------------------------------------------

		Thread::Thread() {
			m_pCallBack = nullptr;
			m_pData = nullptr;
			m_hThread = nullptr;
		}

		Thread::Thread(const fnThreadCallBack pCallBack) {
			m_pCallBack = pCallBack;
			m_pData = nullptr;
			m_hThread = nullptr;
		}

		Thread::Thread(const fnThreadCallBack pCallBack, void* pData) {
			m_pCallBack = pCallBack;
			m_pData = pData;
			m_hThread = nullptr;
		}

		Thread::~Thread() {
			Join();
		}

		bool Thread::SetCallBack(const fnThreadCallBack pCallBack) {
			if (!pCallBack) {
				return false;
			}

			m_pCallBack = pCallBack;

			return true;
		}

		bool Thread::SetData(void* pData) {
			if (!pData) {
				return false;
			}

			m_pData = pData;

			return true;
		}

		bool Thread::Start() {
			if (!m_pCallBack || (m_hThread && (m_hThread != INVALID_HANDLE_VALUE))) {
				return false;
			}

			auto pTD = std::make_unique<THREAD_DATA>();
			if (!pTD) {
				return false;
			}

			memset(pTD.get(), 0, sizeof(THREAD_DATA));

			pTD->m_pParameter = this;

			m_hThread = CreateThread(nullptr, NULL, ThreadRoutine, pTD.get(), NULL, nullptr);
			if (!m_hThread || (m_hThread == INVALID_HANDLE_VALUE)) {
				return false;
			}

			return true;
		}

		bool Thread::Join() {
			if (!m_pCallBack || !m_hThread || (m_hThread == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (WaitForSingleObject(m_hThread, INFINITE) != WAIT_OBJECT_0) {
				return false;
			}

			return true;
		}

		bool Thread::Suspend() {
			if (!m_pCallBack || !m_hThread || (m_hThread == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (SuspendThread(m_hThread) == static_cast<DWORD>(-1)) {
				return false;
			}

			return true;
		}

		bool Thread::Resume() {
			if (!m_pCallBack || !m_hThread || (m_hThread == INVALID_HANDLE_VALUE)) {
				return false;
			}

			if (ResumeThread(m_hThread) == static_cast<DWORD>(-1)) {
				return false;
			}

			return true;
		}

		fnThreadCallBack Thread::GetCallBack() const {
			return m_pCallBack;
		}

		void* Thread::GetData() const {
			return m_pData;
		}
		*/

		// ----------------------------------------------------------------
		// Fiber Data
		// ----------------------------------------------------------------

		typedef struct _FIBER_DATA {
			void* m_pFiberMain;
			void* m_pFiber;
			void* m_pParameter;
		} FIBER_DATA, *PFIBER_DATA;

		// ----------------------------------------------------------------
		// FiberRoutine
		// ----------------------------------------------------------------

		void WINAPI FiberRoutine(PVOID lpFiberParameter) {
			auto pFD = reinterpret_cast<PFIBER_DATA>(lpFiberParameter);
			if (!pFD) {
				return;
			}

			if (!pFD->m_pFiberMain) {
				return;
			}

			if (!pFD->m_pFiber) {
				SwitchToFiber(pFD->m_pFiberMain);
				return;
			}

			auto pFiber = static_cast<Fiber*>(pFD->m_pParameter);
			if (!pFiber) {
				SwitchToFiber(pFD->m_pFiberMain);
				return;
			}

			auto pCallback = pFiber->GetCallBack();
			if (pCallback) {
				pCallback(pFiber->GetData());
			}

			SwitchToFiber(pFD->m_pFiberMain);
		}

		// ----------------------------------------------------------------
		// Fiber
		// ----------------------------------------------------------------

		Fiber::Fiber() {
			m_pCallBack = nullptr;
			m_pData = nullptr;
		}

		Fiber::Fiber(const fnFiberCallBack pCallBack) {
			m_pCallBack = pCallBack;
			m_pData = nullptr;
		}

		Fiber::Fiber(const fnFiberCallBack pCallBack, void* pData) {
			m_pCallBack = pCallBack;
			m_pData = pData;
		}

		bool Fiber::SetCallBack(const fnFiberCallBack pCallBack) {
			if (!pCallBack) {
				return false;
			}

			m_pCallBack = pCallBack;

			return true;
		}

		bool Fiber::SetData(void* pData) {
			if (!pData) {
				return false;
			}

			m_pData = pData;

			return true;
		}

		bool Fiber::Switch() {
			if (!m_pCallBack) {
				return false;
			}

			auto pFD = std::make_unique<FIBER_DATA>();
			if (!pFD) {
				return false;
			}

			memset(pFD.get(), 0, sizeof(FIBER_DATA));

			pFD->m_pFiberMain = ConvertThreadToFiber(nullptr);
			if (!pFD->m_pFiberMain) {
				return false;
			}

			pFD->m_pFiber = CreateFiber(NULL, FiberRoutine, pFD.get());
			if (!pFD->m_pFiber) {
				return false;
			}

			pFD->m_pParameter = this;

			SwitchToFiber(pFD->m_pFiber);
			DeleteFiber(pFD->m_pFiber);
			return true;
		}

		fnFiberCallBack Fiber::GetCallBack() const {
			return m_pCallBack;
		}

		void* Fiber::GetData() const {
			return m_pData;
		}
	};

	// ----------------------------------------------------------------
	// Memory
	// ----------------------------------------------------------------

	namespace Memory {

		// ----------------------------------------------------------------
		// __is_relative
		// ----------------------------------------------------------------

		static size_t inline __is_relative(void const* const pSourceAddress, void const* const pDestinationAddress, const size_t unMaxDistance = 0x7FFFFFFF) {
			const size_t unRelativeOffset = reinterpret_cast<size_t>(pSourceAddress) - reinterpret_cast<size_t>(pDestinationAddress);
			const size_t unDistance = (pSourceAddress > pDestinationAddress) ? unRelativeOffset : reinterpret_cast<size_t>(pDestinationAddress) - reinterpret_cast<size_t>(pSourceAddress);
			if (unDistance <= unMaxDistance) {
				return unRelativeOffset;
			}

			return 0;
		};

		// ----------------------------------------------------------------
		// Shared
		// ----------------------------------------------------------------

		Shared::Shared(const size_t unSize) {
			m_hMap = nullptr;
			m_pAddress = nullptr;

			if (!unSize) {
				return;
			}

#ifdef _M_X64
			m_hMap = CreateFileMapping(INVALID_HANDLE_VALUE, nullptr, PAGE_EXECUTE_READWRITE, static_cast<DWORD>((unSize >> 32) & 0xFFFFFFFFi32), static_cast<DWORD>(unSize & 0xFFFFFFFFi32), nullptr);
#elif _M_IX86
			m_hMap = CreateFileMapping(INVALID_HANDLE_VALUE, nullptr, PAGE_EXECUTE_READWRITE, NULL, static_cast<DWORD>(unSize & 0xFFFFFFFFi32), nullptr);
#endif
			if (!m_hMap || (m_hMap == INVALID_HANDLE_VALUE)) {
				m_hMap = nullptr;
				m_pAddress = nullptr;
				return;
			}

			m_pAddress = MapViewOfFile(m_hMap, FILE_MAP_WRITE | FILE_MAP_READ | FILE_MAP_EXECUTE, NULL, NULL, NULL);
		}

		Shared::~Shared() {
			if (m_pAddress) {
				UnmapViewOfFile(m_pAddress);
			}

			if (m_hMap && (m_hMap != INVALID_HANDLE_VALUE)) {
				CloseHandle(m_hMap);
			}
		}

		HANDLE Shared::GetShared() const {
			return m_hMap;
		}

		void* Shared::GetAddress() const {
			return m_pAddress;
		}

		// ----------------------------------------------------------------
		// SharedServer
		// ----------------------------------------------------------------

		SharedServer::SharedServer(const size_t unSize, bool bIsGlobal) {
			memset(m_szSharedName, 0, sizeof(m_szSharedName));
			m_hMap = nullptr;
			m_pAddress = nullptr;

			if (!unSize) {
				return;
			}

			auto pTEB = GetTEB();
			if (!pTEB) {
				return;
			}

			const DWORD unPID = pTEB->ClientId.UniqueProcess & 0xFFFFFFFFi32;
			const DWORD unTID = pTEB->ClientId.UniqueThread & 0xFFFFFFFFi32;
			const DWORD64 unCycle = __rdtsc();
			if (_stprintf_s(m_szSharedName, _T("SHARED:%08X:%08X:%08X%08X"), 0xFFFFFFFFi32 - unPID, 0xFFFFFFFFi32 - unTID, static_cast<DWORD>(unCycle & 0xFFFFFFFFi32), static_cast<DWORD>((unCycle >> 32) & 0xFFFFFFFFi32)) == -1) {
				memset(m_szSharedName, 0, sizeof(m_szSharedName));
				return;
			}

			TCHAR szShared[64];
			memset(szShared, 0, sizeof(szShared));
			if (bIsGlobal) {
				if (_stprintf_s(szShared, _T("Global\\%s"), m_szSharedName) == -1) {
					memset(m_szSharedName, 0, sizeof(m_szSharedName));
					return;
				}
			} else {
				if (_stprintf_s(szShared, _T("Local\\%s"), m_szSharedName) == -1) {
					memset(m_szSharedName, 0, sizeof(m_szSharedName));
					return;
				}
			}

#ifdef _M_X64
			m_hMap = CreateFileMapping(INVALID_HANDLE_VALUE, nullptr, PAGE_EXECUTE_READWRITE, static_cast<DWORD>((unSize >> 32) & 0xFFFFFFFFi32), static_cast<DWORD>(unSize & 0xFFFFFFFFi32), szShared);
#elif _M_IX86
			m_hMap = CreateFileMapping(INVALID_HANDLE_VALUE, nullptr, PAGE_EXECUTE_READWRITE, NULL, static_cast<DWORD>(unSize & 0xFFFFFFFFi32), szShared);
#endif
			if (!m_hMap || (m_hMap == INVALID_HANDLE_VALUE)) {
				memset(m_szSharedName, 0, sizeof(m_szSharedName));
				m_hMap = nullptr;
				m_pAddress = nullptr;
				return;
			}

			m_pAddress = MapViewOfFile(m_hMap, FILE_MAP_WRITE | FILE_MAP_READ | FILE_MAP_EXECUTE, NULL, NULL, NULL);
		}

		SharedServer::~SharedServer() {
			if (m_pAddress) {
				UnmapViewOfFile(m_pAddress);
			}

			if (m_hMap && (m_hMap != INVALID_HANDLE_VALUE)) {
				CloseHandle(m_hMap);
			}
		}

		bool SharedServer::GetSharedName(TCHAR szSharedName[64]) {
			if (!m_hMap || (m_hMap == INVALID_HANDLE_VALUE)) {
				return false;
			}

			memcpy(szSharedName, m_szSharedName, sizeof(m_szSharedName));

			return true;
		}

		HANDLE SharedServer::GetShared() const {
			return m_hMap;
		}

		void* SharedServer::GetAddress() const {
			return m_pAddress;
		}

		// ----------------------------------------------------------------
		// SharedClient
		// ----------------------------------------------------------------

		SharedClient::SharedClient(TCHAR szSharedName[64], bool bIsGlobal) {
			m_hMap = nullptr;
			m_pAddress = nullptr;

			if (!szSharedName) {
				return;
			}

			TCHAR szShared[64];
			memset(szShared, 0, sizeof(szShared));
			if (bIsGlobal) {
				if (_stprintf_s(szShared, _T("Global\\%s"), szSharedName) == -1) {
					return;
				}
			} else {
				if (_stprintf_s(szShared, _T("Local\\%s"), szSharedName) == -1) {
					return;
				}
			}

			m_hMap = OpenFileMapping(FILE_MAP_WRITE | FILE_MAP_READ | FILE_MAP_EXECUTE, FALSE, szShared);
			if (!m_hMap || (m_hMap == INVALID_HANDLE_VALUE)) {
				m_hMap = nullptr;
				return;
			}

			m_pAddress = MapViewOfFile(m_hMap, FILE_MAP_WRITE | FILE_MAP_READ | FILE_MAP_EXECUTE, NULL, NULL, NULL);
		}

		SharedClient::~SharedClient() {
			if (m_pAddress) {
				UnmapViewOfFile(m_pAddress);
			}

			if (m_hMap && (m_hMap != INVALID_HANDLE_VALUE)) {
				CloseHandle(m_hMap);
			}
		}

		HANDLE SharedClient::GetShared() const {
			return m_hMap;
		}

		void* SharedClient::GetAddress() const {
			return m_pAddress;
		}

		// ----------------------------------------------------------------
		// Page
		// ----------------------------------------------------------------

		static DWORD unPageSize = 0;
		static DWORD unAllocationGranularity = 0;

		Page::Page(size_t unCapacity) {
			if (!unPageSize || !unAllocationGranularity) {
				SYSTEM_INFO sysinf;
				GetSystemInfo(&sysinf);
				unPageSize = sysinf.dwPageSize;
				unAllocationGranularity = sysinf.dwAllocationGranularity;
			}

			if (!unCapacity) {
				unCapacity = unPageSize;
			} else {
				if (unCapacity < unPageSize) {
					unCapacity = unPageSize;
				} else {
					unCapacity = __align_up(unCapacity, static_cast<size_t>(unAllocationGranularity));
				}
			}

			m_unCapacity = unCapacity;
			m_pPageAddress = VirtualAlloc(nullptr, unCapacity, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
			if (m_pPageAddress) {
				m_FreeBlocks.emplace(m_pPageAddress, unCapacity);
			}
		}

		Page::~Page() {
			if (m_pPageAddress) {
				VirtualFree(m_pPageAddress, 0, MEM_RELEASE);
			}
		}

		void* Page::Alloc(size_t unSize) {
			if (!m_pPageAddress || !unSize) {
				return nullptr;
			}

			for (auto it = m_FreeBlocks.begin(); it != m_FreeBlocks.end(); ++it) {
				if (it->m_unSize >= unSize) {
					void* pAddress = it->m_pAddress;

					if (it->m_unSize > unSize) {
						m_FreeBlocks.emplace(reinterpret_cast<char*>(it->m_pAddress) + unSize, it->m_unSize - unSize);
					}

					m_ActiveBlocks.emplace(pAddress, unSize);
					m_FreeBlocks.erase(it);

					return pAddress;
				}
			}

			return nullptr;
		}

		bool Page::DeAlloc(void* pAddress) {
			if (!m_pPageAddress || !pAddress) {
				return false;
			}

			auto it = m_ActiveBlocks.find(Block(pAddress, 0));
			if (it != m_ActiveBlocks.end()) {
				m_FreeBlocks.emplace(*it);
				m_ActiveBlocks.erase(it);
				MergeFreeBlocks();
				return true;
			}

			return false;
		}

		void Page::DeAllocAll() {
			if (!m_pPageAddress) {
				return;
			}

			m_FreeBlocks.clear();
			m_ActiveBlocks.clear();

			m_FreeBlocks.emplace(m_pPageAddress, m_unCapacity);

			return;
		}

		void Page::MergeFreeBlocks() {
			if (m_FreeBlocks.size() <= 1) {
				return;
			}

			std::set<Block> MergedFreeBlocks;
			auto it = m_FreeBlocks.begin();
			auto PrevBlock = *it;
			++it;

			while (it != m_FreeBlocks.end()) {
				if ((reinterpret_cast<char*>(PrevBlock.m_pAddress) + PrevBlock.m_unSize) == it->m_pAddress) {
					PrevBlock.m_unSize += it->m_unSize;
				} else {
					MergedFreeBlocks.insert(PrevBlock);
					PrevBlock = *it;
				}

				++it;
			}

			MergedFreeBlocks.insert(PrevBlock);
			m_FreeBlocks = MergedFreeBlocks;
		}

		void* Page::GetAddress() const {
			return m_pPageAddress;
		}

		size_t Page::GetCapacity() const {
			return m_unCapacity;
		}

		size_t Page::GetSize() const {
			size_t unSize = 0;

			for (const auto& block : m_ActiveBlocks) {
				unSize += block.m_unSize;
			}

			return unSize;
		}

		bool Page::IsEmpty() const {
			return m_ActiveBlocks.empty();
		}

		// ----------------------------------------------------------------
		// NearPage
		// ----------------------------------------------------------------

		NearPage::NearPage(size_t unCapacity, void* pDesiredAddress) {
			if (!unPageSize || !unAllocationGranularity) {
				SYSTEM_INFO sysinf;
				GetSystemInfo(&sysinf);
				unPageSize = sysinf.dwPageSize;
				unAllocationGranularity = sysinf.dwAllocationGranularity;
			}

			if (!unCapacity) {
				unCapacity = unPageSize;
			} else {
				if (unCapacity < unPageSize) {
					unCapacity = unPageSize;
				} else {
					unCapacity = __align_up(unCapacity, static_cast<size_t>(unAllocationGranularity));
				}
			}

			m_unCapacity = unCapacity;
			m_pPageAddress = nullptr;

			if (pDesiredAddress) {
				const size_t unBegin = reinterpret_cast<size_t>(pDesiredAddress) - 0x7FFFFFFF + 1;
				const size_t unEnd = reinterpret_cast<size_t>(pDesiredAddress) + 0x7FFFFFFF - unCapacity;

				MEMORY_BASIC_INFORMATION mbi;
				memset(&mbi, 0, sizeof(mbi));

				// [unAddress; unEnd] - From unAddress to unEnd (Forward)
				for (size_t unAddress = reinterpret_cast<size_t>(pDesiredAddress); unAddress < unEnd; unAddress = __align_up(unAddress + static_cast<size_t>(unAllocationGranularity) - 1, static_cast<size_t>(unAllocationGranularity))) {
					if (!VirtualQuery(reinterpret_cast<void*>(unAddress), &mbi, sizeof(mbi))) {
						break;
					}

					if (mbi.State == MEM_FREE && mbi.RegionSize >= unCapacity) {
						void* pPageAddress = VirtualAlloc(reinterpret_cast<void*>(unAddress), unCapacity, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
						if (pPageAddress) {
							if (__is_relative(pDesiredAddress, pPageAddress)) {
								m_pPageAddress = pPageAddress;
							} else {
								VirtualFree(pPageAddress, 0, MEM_RELEASE);
							}

							break;
						}
					}
				}

				// [unAddress; unBegin] - From unAddress to unBegin (Backward)
				if (!m_pPageAddress) {
					for (size_t unAddress = reinterpret_cast<size_t>(pDesiredAddress); unAddress > unBegin; unAddress = __align_down(unAddress - 1, static_cast<size_t>(unAllocationGranularity))) {
						if (!VirtualQuery(reinterpret_cast<void*>(unAddress), &mbi, sizeof(mbi))) {
							break;
						}

						if (mbi.State == MEM_FREE && mbi.RegionSize >= unCapacity) {
							void* pPageAddress = VirtualAlloc(reinterpret_cast<void*>(unAddress), unCapacity, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
							if (pPageAddress) {
								if (__is_relative(pDesiredAddress, pPageAddress)) {
									m_pPageAddress = pPageAddress;
								} else {
									VirtualFree(pPageAddress, 0, MEM_RELEASE);
								}

								break;
							}
						}
					}
				}
			} else {
				m_pPageAddress = VirtualAlloc(nullptr, unCapacity, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
			}

			if (m_pPageAddress) {
				m_FreeBlocks.emplace(m_pPageAddress, unCapacity);
			}
		}

		NearPage::~NearPage() {
			if (m_pPageAddress) {
				VirtualFree(m_pPageAddress, 0, MEM_RELEASE);
			}
		}

		void* NearPage::Alloc(size_t unSize) {
			if (!m_pPageAddress || !unSize) {
				return nullptr;
			}

			for (auto it = m_FreeBlocks.begin(); it != m_FreeBlocks.end(); ++it) {
				if (it->m_unSize >= unSize) {
					void* pAddress = it->m_pAddress;

					if (it->m_unSize > unSize) {
						m_FreeBlocks.emplace(reinterpret_cast<char*>(it->m_pAddress) + unSize, it->m_unSize - unSize);
					}

					m_ActiveBlocks.emplace(pAddress, unSize);
					m_FreeBlocks.erase(it);

					return pAddress;
				}
			}

			return nullptr;
		}

		bool NearPage::DeAlloc(void* pAddress) {
			if (!m_pPageAddress || !pAddress) {
				return false;
			}

			auto it = m_ActiveBlocks.find(Block(pAddress, 0));
			if (it != m_ActiveBlocks.end()) {
				m_FreeBlocks.emplace(*it);
				m_ActiveBlocks.erase(it);
				MergeFreeBlocks();
				return true;
			}

			return false;
		}

		void NearPage::DeAllocAll() {
			if (!m_pPageAddress) {
				return;
			}

			m_FreeBlocks.clear();
			m_ActiveBlocks.clear();

			m_FreeBlocks.emplace(m_pPageAddress, m_unCapacity);

			return;
		}

		void NearPage::MergeFreeBlocks() {
			if (m_FreeBlocks.size() <= 1) {
				return;
			}

			std::set<Block> MergedFreeBlocks;
			auto it = m_FreeBlocks.begin();
			auto PrevBlock = *it;
			++it;

			while (it != m_FreeBlocks.end()) {
				if ((reinterpret_cast<char*>(PrevBlock.m_pAddress) + PrevBlock.m_unSize) == it->m_pAddress) {
					PrevBlock.m_unSize += it->m_unSize;
				} else {
					MergedFreeBlocks.insert(PrevBlock);
					PrevBlock = *it;
				}

				++it;
			}

			MergedFreeBlocks.insert(PrevBlock);
			m_FreeBlocks = MergedFreeBlocks;
		}

		void* NearPage::GetAddress() const {
			return m_pPageAddress;
		}

		size_t NearPage::GetCapacity() const {
			return m_unCapacity;
		}

		size_t NearPage::GetSize() const {
			size_t unSize = 0;

			for (const auto& block : m_ActiveBlocks) {
				unSize += block.m_unSize;
			}

			return unSize;
		}

		bool NearPage::IsEmpty() const {
			return m_ActiveBlocks.empty();
		}

		// ----------------------------------------------------------------
		// Storage
		// ----------------------------------------------------------------

		Storage::Storage(size_t unTotalCapacity, size_t unPageCapacity) {
			if (!unPageSize || !unAllocationGranularity) {
				SYSTEM_INFO sysinf;
				GetSystemInfo(&sysinf);
				unPageSize = sysinf.dwPageSize;
				unAllocationGranularity = sysinf.dwAllocationGranularity;
			}

			if (!unTotalCapacity) {
				unTotalCapacity = unPageSize;
			} else {
				if (unTotalCapacity < unPageSize) {
					unTotalCapacity = unPageSize;
				} else {
					unTotalCapacity = __align_up(unTotalCapacity, static_cast<size_t>(unAllocationGranularity));
				}
			}

			if (!unPageCapacity) {
				unPageCapacity = unPageSize;
			} else {
				if (unPageCapacity < unPageSize) {
					unPageCapacity = unPageSize;
				} else {
					unPageCapacity = __align_up(unPageCapacity, static_cast<size_t>(unAllocationGranularity));
				}
			}

			m_unTotalCapacity = unTotalCapacity;
			m_unPageCapacity = unPageCapacity;
			m_unUsedSpace = 0;
		}

		void* Storage::Alloc(size_t unSize) {
			if (unSize > m_unPageCapacity) {
				return nullptr;
			}

			if (m_unUsedSpace + unSize > m_unTotalCapacity) {
				return nullptr;
			}

			if (m_Pages.empty()) {
				m_Pages.emplace_back(m_unPageCapacity);
				if (!m_Pages.back().GetAddress()) {
					m_Pages.pop_back();
				}
			}

			for (auto& Page : m_Pages) {
				if ((Page.GetCapacity() - Page.GetSize()) >= unSize) {
					void* pMemory = Page.Alloc(unSize);
					if (!pMemory) {
						continue;
					}

					m_unUsedSpace += unSize;
					return pMemory;
				}
			}

			if (m_unUsedSpace + m_unPageCapacity <= m_unTotalCapacity) {
				m_Pages.emplace_back(m_unPageCapacity);

				void* pMemory = m_Pages.back().Alloc(unSize);
				if (pMemory) {
					m_unUsedSpace += unSize;
					return pMemory;
				}

				m_Pages.pop_back();
			}

			return nullptr;
		}

		bool Storage::DeAlloc(void* pAddress) {
			if (m_Pages.empty()) {
				return false;
			}

			for (auto it = m_Pages.begin(); it != m_Pages.end(); ++it) {
				if (it->DeAlloc(pAddress)) {
					m_unUsedSpace -= it->GetSize();

					if (it->IsEmpty()) {
						m_Pages.erase(it);
					}

					return true;
				}
			}

			return false;
		}

		bool Storage::DeAllocAll() {
			if (m_Pages.empty()) {
				return false;
			}

			for (auto& Page : m_Pages) {
				Page.DeAllocAll();
			}

			m_Pages.clear();
			m_unUsedSpace = 0;

			return true;
		}

		size_t Storage::GetCapacity() const {
			return m_unTotalCapacity;
		}

		size_t Storage::GetSize() const {
			return m_unUsedSpace;
		}

		bool Storage::IsEmpty() const {
			if (m_Pages.empty()) {
				return true;
			}

			for (auto it = m_Pages.begin(); it != m_Pages.end(); ++it) {
				if (!it->IsEmpty()) {
					return false;
				}
			}

			return true;
		}

		// ----------------------------------------------------------------
		// NearStorage
		// ----------------------------------------------------------------

		NearStorage::NearStorage(size_t unTotalCapacity, size_t unPageCapacity) {
			if (!unPageSize || !unAllocationGranularity) {
				SYSTEM_INFO sysinf;
				GetSystemInfo(&sysinf);
				unPageSize = sysinf.dwPageSize;
				unAllocationGranularity = sysinf.dwAllocationGranularity;
			}

			if (!unTotalCapacity) {
				unTotalCapacity = unPageSize;
			} else {
				if (unTotalCapacity < unPageSize) {
					unTotalCapacity = unPageSize;
				} else {
					unTotalCapacity = __align_up(unTotalCapacity, static_cast<size_t>(unAllocationGranularity));
				}
			}

			if (!unPageCapacity) {
				unPageCapacity = unPageSize;
			} else {
				if (unPageCapacity < unPageSize) {
					unPageCapacity = unPageSize;
				} else {
					unPageCapacity = __align_up(unPageCapacity, static_cast<size_t>(unAllocationGranularity));
				}
			}

			m_unTotalCapacity = unTotalCapacity;
			m_unPageCapacity = unPageCapacity;
			m_unUsedSpace = 0;
		}

		void* NearStorage::Alloc(size_t unSize, void* pDesiredAddress) {
			if (unSize > m_unPageCapacity) {
				return nullptr;
			}

			if (m_unUsedSpace + unSize > m_unTotalCapacity) {
				return nullptr;
			}

			if (m_Pages.empty()) {
				m_Pages.emplace_back(m_unPageCapacity, pDesiredAddress);
				if (!m_Pages.back().GetAddress()) {
					m_Pages.pop_back();
				}
			}

			if (pDesiredAddress) {
				for (auto& Page : m_Pages) {
					if ((Page.GetCapacity() - Page.GetSize()) >= unSize) {
						if (!__is_relative(pDesiredAddress, reinterpret_cast<char*>(Page.GetAddress()) + Page.GetSize())) {
							continue;
						}

						void* pMemory = Page.Alloc(unSize);
						if (!pMemory) {
							continue;
						}

						m_unUsedSpace += unSize;
						return pMemory;
					}
				}

				m_Pages.emplace_back(m_unPageCapacity, pDesiredAddress);

				void* pMemory = m_Pages.back().Alloc(unSize);
				if (pMemory) {
					m_unUsedSpace += unSize;
					return pMemory;
				}

				m_Pages.pop_back();
			} else {
				for (auto& Page : m_Pages) {
					if ((Page.GetCapacity() - Page.GetSize()) >= unSize) {
						void* pMemory = Page.Alloc(unSize);
						if (!pMemory) {
							continue;
						}

						m_unUsedSpace += unSize;
						return pMemory;
					}
				}
			}

			if (m_unUsedSpace + m_unPageCapacity <= m_unTotalCapacity) {
				m_Pages.emplace_back(m_unPageCapacity, pDesiredAddress);

				void* pMemory = m_Pages.back().Alloc(unSize);
				if (pMemory) {
					m_unUsedSpace += unSize;
					return pMemory;
				}

				m_Pages.pop_back();
			}

			return nullptr;
		}

		bool NearStorage::DeAlloc(void* pAddress) {
			if (m_Pages.empty()) {
				return false;
			}

			for (auto it = m_Pages.begin(); it != m_Pages.end(); ++it) {
				if (it->DeAlloc(pAddress)) {
					m_unUsedSpace -= it->GetSize();

					if (it->IsEmpty()) {
						m_Pages.erase(it);
					}

					return true;
				}
			}

			return false;
		}

		bool NearStorage::DeAllocAll() {
			if (m_Pages.empty()) {
				return false;
			}

			for (auto& Page : m_Pages) {
				Page.DeAllocAll();
			}

			m_Pages.clear();
			m_unUsedSpace = 0;

			return true;
		}

		size_t NearStorage::GetCapacity() const {
			return m_unTotalCapacity;
		}

		size_t NearStorage::GetSize() const {
			return m_unUsedSpace;
		}

		bool NearStorage::IsEmpty() const {
			if (m_Pages.empty()) {
				return true;
			}

			for (auto it = m_Pages.begin(); it != m_Pages.end(); ++it) {
				if (!it->IsEmpty()) {
					return false;
				}
			}

			return true;
		}

		// ----------------------------------------------------------------
		// Protection
		// ----------------------------------------------------------------

		Protection::Protection(void const* const pAddress, const size_t unSize, const bool bAutoRestore) : m_pAddress(pAddress), m_unSize(unSize), m_bAutoRestore(bAutoRestore) {
			m_unOriginalProtection = 0;

			if (!pAddress || !unSize) {
				return;
			}

			MEMORY_BASIC_INFORMATION mbi;
			memset(&mbi, 0, sizeof(mbi));

			if (!VirtualQuery(m_pAddress, &mbi, sizeof(mbi))) {
				return;
			}

			m_unOriginalProtection = mbi.Protect;
		}

		Protection::~Protection() {
			if (!m_pAddress || !m_unSize || !m_bAutoRestore) {
				return;
			}

			DWORD unProtection = 0;
			VirtualProtect(const_cast<void*>(m_pAddress), m_unSize, m_unOriginalProtection, &unProtection);
		}

		bool Protection::GetProtection(const PDWORD pProtection) {
			if (!m_pAddress || !m_unSize) {
				return false;
			}

			MEMORY_BASIC_INFORMATION mbi;
			memset(&mbi, 0, sizeof(mbi));

			if (!VirtualQuery(m_pAddress, &mbi, sizeof(mbi))) {
				return false;
			}

			if (pProtection) {
				*pProtection = mbi.Protect;
			}

			return true;
		}

		bool Protection::ChangeProtection(const DWORD unNewProtection) {
			if (!m_pAddress || !m_unSize) {
				return false;
			}

			if (unNewProtection & (PAGE_EXECUTE | PAGE_EXECUTE_READ | PAGE_EXECUTE_READWRITE)) {
				MEMORY_BASIC_INFORMATION mbi;
				memset(&mbi, 0, sizeof(mbi));

				if (!VirtualQuery(m_pAddress, &mbi, sizeof(mbi))) {
					return false;
				}

				if (!FlushInstructionCache(reinterpret_cast<HANDLE>(-1), mbi.BaseAddress, mbi.RegionSize)) {
					return false;
				}
			}

			DWORD unProtection = 0;
			if (!VirtualProtect(const_cast<void*>(m_pAddress), m_unSize, unNewProtection, &unProtection)) {
				return false;
			}

			return true;
		}

		bool Protection::RestoreProtection() {
			if (!m_pAddress || !m_unSize) {
				return false;
			}

			DWORD unProtection = 0;
			if (!VirtualProtect(const_cast<void*>(m_pAddress), m_unSize, m_unOriginalProtection, &unProtection)) {
				return false;
			}

			return true;
		}

		void const* Protection::GetAddress() const {
			return m_pAddress;
		}

		size_t Protection::GetSize() const {
			return m_unSize;
		}

		DWORD Protection::GetOriginalProtection() const {
			return m_unOriginalProtection;
		}
	}

	// ----------------------------------------------------------------
	// Exception
	// ----------------------------------------------------------------

	namespace Exception {

		// ----------------------------------------------------------------
		// ExceptionHandler
		// ----------------------------------------------------------------

		static LONG NTAPI ExceptionHandler(const PEXCEPTION_POINTERS pExceptionInfo) noexcept {
			if (!pExceptionInfo) {
				return EXCEPTION_ACCESS_VIOLATION;
			}

			const auto& pException = pExceptionInfo->ExceptionRecord;
			if (!pException) {
				return EXCEPTION_ACCESS_VIOLATION;
			}

			const auto& pCTX = pExceptionInfo->ContextRecord;
			if (!pCTX) {
				return EXCEPTION_ACCESS_VIOLATION;
			}

			const auto& Exception = *pException;
			auto& vecCallBacks = g_ExceptionListener.GetCallBacks();
			for (auto it = vecCallBacks.begin(); it != vecCallBacks.end();) {
				const auto& CallBack = (*it);
				if (!CallBack) {
					it = vecCallBacks.erase(it);
					continue;
				}

				if (CallBack(Exception, pCTX)) {
					return EXCEPTION_CONTINUE_EXECUTION;
				}

				++it;
			}

			return EXCEPTION_CONTINUE_SEARCH;
		}

		// ----------------------------------------------------------------
		// MemoryHookCallBack
		// ----------------------------------------------------------------

		static bool MemoryHookCallBack(const EXCEPTION_RECORD& Exception, const PCONTEXT pCTX) {
			if (Exception.ExceptionCode != EXCEPTION_ACCESS_VIOLATION) {
				return false;
			}

			for (auto it = g_MemoryHooks.begin(); it != g_MemoryHooks.end(); ++it) {
				const auto& pHook = it->second;
				if (!pHook) {
					continue;
				}

				if (pHook->GetAddress() != Exception.ExceptionAddress) {
					continue;
				}

				if (pHook->IsAutoDisable()) {
					pHook->Disable();
				}

				const auto& pCallBack = pHook->GetCallBack();
				if (!pCallBack) {
					return false;
				}

				return pCallBack(pHook, pCTX);
			}

			return false;
		}

		// ----------------------------------------------------------------
		// InterruptHookCallBack
		// ----------------------------------------------------------------

		static bool InterruptHookCallBack(const EXCEPTION_RECORD& Exception, const PCONTEXT pCTX) {
			if (Exception.ExceptionCode != EXCEPTION_ACCESS_VIOLATION) {
				return false;
			}

			unsigned char* pCode = reinterpret_cast<unsigned char*>(Exception.ExceptionAddress);
			if (pCode[0] != 0xCD) {
				return false;
			}

			const unsigned char unInterrupt = pCode[1];

			for (auto it = g_InterruptHooks.begin(); it != g_InterruptHooks.end(); ++it) {
				const auto& pHook = it->second;
				if (!pHook) {
					continue;
				}

				if (pHook->GetInterrupt() != unInterrupt) {
					continue;
				}

				const auto& pCallBack = pHook->GetCallBack();
				if (!pCallBack) {
					return false;
				}

				if (pCallBack(pHook, pCTX)) {
#ifdef _M_X64
					pCTX->Rip += 2;
#elif _M_IX86
					pCTX->Eip += 2;
#endif
					return true;
				}
			}

			return false;
		}

		// ----------------------------------------------------------------
		// ExceptionListener
		// ----------------------------------------------------------------

		ExceptionListener::ExceptionListener() {
			m_pVEH = AddVectoredExceptionHandler(TRUE, ExceptionHandler);
			if (m_pVEH) {

				// Built-in CallBacks
				AddCallBack(MemoryHookCallBack); // Memory Hooks
				AddCallBack(InterruptHookCallBack); // Interrupt Hooks
			}
		}

		ExceptionListener::~ExceptionListener() {
			if (m_pVEH) {
				RemoveVectoredExceptionHandler(m_pVEH);

				// Built-in CallBacks
				RemoveCallBack(MemoryHookCallBack); // Memory Hooks
				RemoveCallBack(InterruptHookCallBack); // Interrupt Hooks
			}
		}

		bool ExceptionListener::EnableHandler() {
			if (m_pVEH) {
				return false;
			}

			m_pVEH = AddVectoredExceptionHandler(TRUE, ExceptionHandler);
			return true;
		}

		bool ExceptionListener::DisableHandler() {
			if (!m_pVEH) {
				return false;
			}

			RemoveVectoredExceptionHandler(m_pVEH);
			m_pVEH = nullptr;
			return true;
		}

		bool ExceptionListener::RefreshHandler() {
			if (!DisableHandler()) {
				return false;
			}

			if (!EnableHandler()) {
				return false;
			}

			return true;
		}

		bool ExceptionListener::AddCallBack(const fnExceptionCallBack pCallBack) {
			if (!pCallBack) {
				return false;
			}

			for (auto it = m_CallBacks.begin(); it != m_CallBacks.end(); ++it) {
				if (pCallBack == *it) {
					return false;
				}
			}

			m_CallBacks.push_back(pCallBack);
			return true;
		}

		bool ExceptionListener::RemoveCallBack(const fnExceptionCallBack pCallBack) {
			if (!pCallBack) {
				return false;
			}

			for (auto it = m_CallBacks.begin(); it != m_CallBacks.end(); ++it) {
				if (pCallBack == *it) {
					m_CallBacks.erase(it);
					return true;
				}
			}

			return false;
		}

		std::deque<fnExceptionCallBack>& ExceptionListener::GetCallBacks() {
			return m_CallBacks;
		}

		ExceptionListener g_ExceptionListener;
	}

	// ----------------------------------------------------------------
	// rddisasm
	// ----------------------------------------------------------------

	namespace rddisasm {

		typedef enum _RD_ILUT_TYPE {
			RD_ILUT_INSTRUCTION = 0,
			RD_ILUT_OPCODE,
			RD_ILUT_OPCODE_3DNOW,
			RD_ILUT_MODRM_MOD,
			RD_ILUT_MODRM_REG,
			RD_ILUT_MODRM_RM,
			RD_ILUT_MAN_PREFIX,
			RD_ILUT_MODE,
			RD_ILUT_DSIZE,
			RD_ILUT_ASIZE,
			RD_ILUT_AUXILIARY,
			RD_ILUT_VENDOR,
			RD_ILUT_FEATURE,
			RD_ILUT_VEX_MMMMM,
			RD_ILUT_VEX_PP,
			RD_ILUT_VEX_L,
			RD_ILUT_VEX_W,
			RD_ILUT_VEX_WI
		} RD_ILUT_TYPE, *PRD_ILUT_TYPE;

		typedef struct _RD_TABLE {
			unsigned int m_unType;
			const void* m_pTable[1];
		} RD_TABLE, *PRD_TABLE;

		typedef struct _RD_TABLE_INSTRUCTION {
			unsigned int m_unType;
			const void* m_pInstruction;
		} RD_TABLE_INSTRUCTION, *PRD_TABLE_INSTRUCTION;

		typedef struct _RD_TABLE_OPCODE {
			unsigned int m_unType;
			const void* m_pTable[256];
		} RD_TABLE_OPCODE, *PRD_TABLE_OPCODE;

		typedef struct _RD_TABLE_MODRM_MOD {
			unsigned int m_unType;
			const void* m_pTable[2];
		} RD_TABLE_MODRM_MOD, *PRD_TABLE_MODRM_MOD;

		typedef struct _RD_TABLE_MODRM_REG {
			unsigned int m_unType;
			const void* m_pTable[8];
		} RD_TABLE_MODRM_REG, *PRD_TABLE_MODRM_REG;

		typedef struct _RD_TABLE_MODRM_RM {
			unsigned int m_unType;
			const void* m_pTable[8];
		} RD_TABLE_MODRM_RM, *PRD_TABLE_MODRM_RM;

		typedef struct _RD_TABLE_MPREFIX {
			unsigned int m_unType;
			const void* m_pTable[4];
		} RD_TABLE_MPREFIX, *PRD_TABLE_MPREFIX;

		typedef struct _RD_TABLE_AUXILIARY {
			unsigned int m_unType;
			const void* m_pTable[8];
		} RD_TABLE_AUXILIARY, *PRD_TABLE_AUXILIARY;

		typedef struct _RD_TABLE_VENDOR {
			unsigned int m_unType;
			const void* m_pTable[6];
		} RD_TABLE_VENDOR;

		typedef struct _RD_TABLE_FEATURE {
			unsigned int m_unType;
			const void* m_pTable[8];
		} RD_TABLE_FEATURE;

		typedef struct _RD_TABLE_DSIZE {
			unsigned int m_unType;
			const void* m_pTable[6];
		} RD_TABLE_DSIZE, *PRD_TABLE_DSIZE;

		typedef struct _RD_TABLE_ASIZE {
			unsigned int m_unType;
			const void* m_pTable[4];
		} RD_TABLE_ASIZE, *PRD_TABLE_ASIZE;

		typedef struct _RD_TABLE_MODE {
			unsigned int m_unType;
			const void* m_pTable[4];
		} RD_TABLE_MODE, *PRD_TABLE_MODE;

		typedef struct _RD_TABLE_VEX_MMMMM {
			unsigned int m_unType;
			const void* m_pTable[32];
		} RD_TABLE_VEX_MMMMM, *PRD_TABLE_VEX_MMMMM;

		typedef struct _RD_TABLE_VEX_PP {
			unsigned int m_unType;
			const void* m_pTable[4];
		} RD_TABLE_VEX_PP, *PRD_TABLE_VEX_PP;

		typedef struct _RD_TABLE_VEX_L {
			unsigned int m_unType;
			const void* m_pTable[4];
		} RD_TABLE_VEX_L, *PRD_TABLE_VEX_L;

		typedef struct _RD_TABLE_VEX_W {
			unsigned int m_unType;
			const void* m_pTable[8];
		} RD_TABLE_VEX_W, *PRD_TABLE_VEX_W;

#pragma warning(push)
#pragma warning(disable: 4214)
		__declspec(align(128)) typedef struct _RD_INSTRUCTION {
			unsigned short m_unInstruction;
			unsigned char m_unCategory;
			unsigned char m_unIsaSet;
			unsigned short m_unMnemonic;
			unsigned short m_unValidPrefixes;
			unsigned int m_unValidModes;
			unsigned char m_unValidDecorators;
			unsigned char m_unOpsCount;
			unsigned char m_unTupleType;
			unsigned char m_unExcType : 5;
			unsigned char m_unExcClass : 3;
			unsigned char m_unFpuFlags;
			unsigned char m_unReserved2;
			unsigned short m_unReserved3;
			unsigned int m_unAttributes;
			unsigned long long m_unCpuidFlag;
			unsigned int m_unTestedFlags;
			unsigned int m_unModifiedFlags;
			unsigned int m_unSetFlags;
			unsigned int m_unClearedFlags;
			unsigned long long m_pOperands[10];
		} RD_INSTRUCTION, *PRD_INSTRUCTION;
#pragma warning(pop)

		typedef enum _RD_OPERARD_SIZE_SPEC {
			RD_OPS_none = 0,
			RD_OPS_0,
			RD_OPS_asz,
			RD_OPS_ssz,
			RD_OPS_a,
			RD_OPS_c,
			RD_OPS_b,
			RD_OPS_w,
			RD_OPS_d,
			RD_OPS_q,
			RD_OPS_dq,
			RD_OPS_qq,
			RD_OPS_oq,
			RD_OPS_v,
			RD_OPS_y,
			RD_OPS_yf,
			RD_OPS_z,
			RD_OPS_s,
			RD_OPS_p,
			RD_OPS_fa,
			RD_OPS_fw,
			RD_OPS_fd,
			RD_OPS_fq,
			RD_OPS_ft,
			RD_OPS_fe,
			RD_OPS_fs,
			RD_OPS_l,
			RD_OPS_rx,
			RD_OPS_cl,
			RD_OPS_sd,
			RD_OPS_ss,
			RD_OPS_sh,
			RD_OPS_ps,
			RD_OPS_pd,
			RD_OPS_ph,
			RD_OPS_ev,
			RD_OPS_qv,
			RD_OPS_hv,
			RD_OPS_x,
			RD_OPS_uv,
			RD_OPS_fv,
			RD_OPS_t,
			RD_OPS_384,
			RD_OPS_512,
			RD_OPS_4096,
			RD_OPS_v2,
			RD_OPS_v3,
			RD_OPS_v4,
			RD_OPS_v5,
			RD_OPS_v8,
			RD_OPS_12,
			RD_OPS_mib,
			RD_OPS_vm32x,
			RD_OPS_vm32y,
			RD_OPS_vm32z,
			RD_OPS_vm32h,
			RD_OPS_vm32n,
			RD_OPS_vm64x,
			RD_OPS_vm64y,
			RD_OPS_vm64z,
			RD_OPS_vm64h,
			RD_OPS_vm64n,
			RD_OPS_unknown
		} RD_OPERARD_SIZE_SPEC, *PRD_OPERARD_SIZE_SPEC;

		typedef enum _RD_OPERARD_TYPE_SPEC {
			RD_OPT_A,
			RD_OPT_B,
			RD_OPT_C,
			RD_OPT_D,
			RD_OPT_E,
			RD_OPT_F,
			RD_OPT_G,
			RD_OPT_H,
			RD_OPT_I,
			RD_OPT_J,
			RD_OPT_K,
			RD_OPT_L,
			RD_OPT_M,
			RD_OPT_N,
			RD_OPT_O,
			RD_OPT_P,
			RD_OPT_Q,
			RD_OPT_R,
			RD_OPT_S,
			RD_OPT_T,
			RD_OPT_U,
			RD_OPT_V,
			RD_OPT_W,
			RD_OPT_X,
			RD_OPT_Y,
			RD_OPT_Z,
			RD_OPT_rB,
			RD_OPT_mB,
			RD_OPT_rK,
			RD_OPT_vK,
			RD_OPT_mK,
			RD_OPT_aK,
			RD_OPT_rM,
			RD_OPT_mM,
			RD_OPT_rT,
			RD_OPT_mT,
			RD_OPT_vT,
			RD_OPT_CONST_1,
			RD_OPT_RIP,
			RD_OPT_MXCSR,
			RD_OPT_PKRU,
			RD_OPT_SSP,
			RD_OPT_UIF,
			RD_OPT_GPR_AH,
			RD_OPT_GPR_rAX,
			RD_OPT_GPR_rCX,
			RD_OPT_GPR_rDX,
			RD_OPT_GPR_rBX,
			RD_OPT_GPR_rSP,
			RD_OPT_GPR_rBP,
			RD_OPT_GPR_rSI,
			RD_OPT_GPR_rDI,
			RD_OPT_GPR_rR8,
			RD_OPT_GPR_rR9,
			RD_OPT_GPR_rR11,
			RD_OPT_SEG_CS,
			RD_OPT_SEG_SS,
			RD_OPT_SEG_DS,
			RD_OPT_SEG_ES,
			RD_OPT_SEG_FS,
			RD_OPT_SEG_GS,
			RD_OPT_FPU_ST0,
			RD_OPT_FPU_STX,
			RD_OPT_SSE_XMM0,
			RD_OPT_SSE_XMM1,
			RD_OPT_SSE_XMM2,
			RD_OPT_SSE_XMM3,
			RD_OPT_SSE_XMM4,
			RD_OPT_SSE_XMM5,
			RD_OPT_SSE_XMM6,
			RD_OPT_SSE_XMM7,
			RD_OPT_MEM_rAX,
			RD_OPT_MEM_rCX,
			RD_OPT_MEM_rBX_AL,
			RD_OPT_MEM_rDI,
			RD_OPT_MEM_SHS,
			RD_OPT_MEM_SHSP,
			RD_OPT_MEM_SHS0,
			RD_OPT_MEM_SMSRT,
			RD_OPT_MEM_DMSRT,
			RD_OPT_Im2z,
			RD_OPT_CR_0,
			RD_OPT_SYS_IDTR,
			RD_OPT_SYS_GDTR,
			RD_OPT_SYS_LDTR,
			RD_OPT_SYS_TR,
			RD_OPT_X87_CONTROL,
			RD_OPT_X87_TAG,
			RD_OPT_X87_STATUS,
			RD_OPT_MSR,
			RD_OPT_XCR,
			RD_OPT_MSR_TSC,
			RD_OPT_MSR_TSCAUX,
			RD_OPT_MSR_SEIP,
			RD_OPT_MSR_SESP,
			RD_OPT_MSR_SCS,
			RD_OPT_MSR_STAR,
			RD_OPT_MSR_LSTAR,
			RD_OPT_MSR_FMASK,
			RD_OPT_MSR_FSBASE,
			RD_OPT_MSR_GSBASE,
			RD_OPT_MSR_KGSBASE,
			RD_OPT_XCR_0,
			RD_OPT_REG_BANK
		} RD_OPERARD_TYPE_SPEC, *PRD_OPERARD_TYPE_SPEC;

		static const RD_INSTRUCTION g_pInstructions[2780] = {
			{
				RD_INS_AAA, RD_CAT_DECIMAL, RD_SET_I86, 0,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_AF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_GPR_AH, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_AAD, RD_CAT_DECIMAL, RD_SET_I86, 1,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_AF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_AF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_AH, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_AADD, RD_CAT_RAOINT, RD_SET_RAOINT, 2,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_RAOINT,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_AAM, RD_CAT_DECIMAL, RD_SET_I86, 3,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_AF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_AF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_AH, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_AAND, RD_CAT_RAOINT, RD_SET_RAOINT, 4,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_RAOINT,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_AAS, RD_CAT_DECIMAL, RD_SET_I86, 5,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_AF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_GPR_AH, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_ADC, RD_CAT_ARITH, RD_SET_I86, 6,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_ADC, RD_CAT_ARITH, RD_SET_I86, 6,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_ADC, RD_CAT_ARITH, RD_SET_I86, 6,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_ADC, RD_CAT_ARITH, RD_SET_I86, 6,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_ADC, RD_CAT_ARITH, RD_SET_I86, 6,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_ADC, RD_CAT_ARITH, RD_SET_I86, 6,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_ADC, RD_CAT_ARITH, RD_SET_I86, 6,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_ADC, RD_CAT_ARITH, RD_SET_I86, 6,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_ADC, RD_CAT_ARITH, RD_SET_I86, 6,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_I64, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_ADC, RD_CAT_ARITH, RD_SET_I86, 6,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_ADCX, RD_CAT_ARITH, RD_SET_ADX, 7,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_ADX,
				0,
				0 | RDR_RFLAG_CF,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_ADD, RD_CAT_ARITH, RD_SET_I86, 8,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ADD, RD_CAT_ARITH, RD_SET_I86, 8,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ADD, RD_CAT_ARITH, RD_SET_I86, 8,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ADD, RD_CAT_ARITH, RD_SET_I86, 8,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ADD, RD_CAT_ARITH, RD_SET_I86, 8,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ADD, RD_CAT_ARITH, RD_SET_I86, 8,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ADD, RD_CAT_ARITH, RD_SET_I86, 8,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ADD, RD_CAT_ARITH, RD_SET_I86, 8,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ADD, RD_CAT_ARITH, RD_SET_I86, 8,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ADD, RD_CAT_ARITH, RD_SET_I86, 8,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ADDPD, RD_CAT_SSE, RD_SET_SSE2, 9,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_ADDPS, RD_CAT_SSE, RD_SET_SSE, 10,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_ADDSD, RD_CAT_SSE, RD_SET_SSE2, 11,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_ADDSS, RD_CAT_SSE, RD_SET_SSE, 12,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_ADDSUBPD, RD_CAT_SSE, RD_SET_SSE3, 13,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_ADDSUBPS, RD_CAT_SSE, RD_SET_SSE3, 14,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_ADOX, RD_CAT_ARITH, RD_SET_ADX, 15,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_ADX,
				0,
				0 | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_AESDEC, RD_CAT_AES, RD_SET_AES, 16,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AES,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_AESDEC128KL, RD_CAT_AESKL, RD_SET_KL, 17,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_KL,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_384, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_AESDEC256KL, RD_CAT_AESKL, RD_SET_KL, 18,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_KL,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_512, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_AESDECLAST, RD_CAT_AES, RD_SET_AES, 19,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AES,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_AESDECWIDE128KL, RD_CAT_WIDE_KL, RD_SET_KL, 20,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_KL,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_M, RD_OPS_384, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SSE_XMM0, RD_OPS_dq, RD_OPF_DEFAULT, RD_OPA_RW, 0, 8),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_AESDECWIDE256KL, RD_CAT_WIDE_KL, RD_SET_KL, 21,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_KL,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_M, RD_OPS_512, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SSE_XMM0, RD_OPS_dq, RD_OPF_DEFAULT, RD_OPA_RW, 0, 8),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_AESENC, RD_CAT_AES, RD_SET_AES, 22,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AES,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_AESENC128KL, RD_CAT_AESKL, RD_SET_KL, 23,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_KL,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_384, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_AESENC256KL, RD_CAT_AESKL, RD_SET_KL, 24,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_KL,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_512, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_AESENCLAST, RD_CAT_AES, RD_SET_AES, 25,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AES,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_AESENCWIDE128KL, RD_CAT_WIDE_KL, RD_SET_KL, 26,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_KL,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_M, RD_OPS_384, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SSE_XMM0, RD_OPS_dq, RD_OPF_DEFAULT, RD_OPA_RW, 0, 8),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_AESENCWIDE256KL, RD_CAT_WIDE_KL, RD_SET_KL, 27,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_KL,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_M, RD_OPS_512, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SSE_XMM0, RD_OPS_dq, RD_OPF_DEFAULT, RD_OPA_RW, 0, 8),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_AESIMC, RD_CAT_AES, RD_SET_AES, 28,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AES,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_AESKEYGENASSIST, RD_CAT_AES, RD_SET_AES, 29,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AES,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_ALTINST, RD_CAT_SYSTEM, RD_SET_CYRIX, 30,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_AND, RD_CAT_LOGIC, RD_SET_I86, 31,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_AND, RD_CAT_LOGIC, RD_SET_I86, 31,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_AND, RD_CAT_LOGIC, RD_SET_I86, 31,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_AND, RD_CAT_LOGIC, RD_SET_I86, 31,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_AND, RD_CAT_LOGIC, RD_SET_I86, 31,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_AND, RD_CAT_LOGIC, RD_SET_I86, 31,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_AND, RD_CAT_LOGIC, RD_SET_I86, 31,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_AND, RD_CAT_LOGIC, RD_SET_I86, 31,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_AND, RD_CAT_LOGIC, RD_SET_I86, 31,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_AND, RD_CAT_LOGIC, RD_SET_I86, 31,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ANDN, RD_CAT_BMI1, RD_SET_BMI1, 32,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 1), 0, RD_EXT_13, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_BMI1,
				0,
				0 | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_PF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ANDNPD, RD_CAT_LOGICAL_FP, RD_SET_SSE2, 33,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_ANDNPS, RD_CAT_LOGICAL_FP, RD_SET_SSE, 34,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_ANDPD, RD_CAT_LOGICAL_FP, RD_SET_SSE2, 35,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_ANDPS, RD_CAT_LOGICAL_FP, RD_SET_SSE, 36,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_AOR, RD_CAT_RAOINT, RD_SET_RAOINT, 37,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_RAOINT,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_ARPL, RD_CAT_SYSTEM, RD_SET_I286PROT, 38,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_w, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_AXOR, RD_CAT_RAOINT, RD_SET_RAOINT, 39,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_RAOINT,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BEXTR, RD_CAT_BMI1, RD_SET_BMI1, 40,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 1), 0, RD_EXT_13, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_BMI1,
				0,
				0 | RDR_RFLAG_ZF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_BEXTR, RD_CAT_BITBYTE, RD_SET_TBM, 40,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_TBM,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BLCFILL, RD_CAT_BITBYTE, RD_SET_TBM, 41,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_TBM,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BLCI, RD_CAT_BITBYTE, RD_SET_TBM, 42,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_TBM,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BLCIC, RD_CAT_BITBYTE, RD_SET_TBM, 43,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_TBM,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BLCMSK, RD_CAT_BITBYTE, RD_SET_TBM, 44,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_TBM,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BLCS, RD_CAT_BITBYTE, RD_SET_TBM, 45,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_TBM,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BLENDPD, RD_CAT_SSE, RD_SET_SSE4, 46,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BLENDPS, RD_CAT_SSE, RD_SET_SSE4, 47,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BLENDVPD, RD_CAT_SSE, RD_SET_SSE4, 48,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SSE_XMM0, RD_OPS_dq, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BLENDVPS, RD_CAT_SSE, RD_SET_SSE4, 49,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SSE_XMM0, RD_OPS_dq, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BLSFILL, RD_CAT_BITBYTE, RD_SET_TBM, 50,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_TBM,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BLSI, RD_CAT_BMI1, RD_SET_BMI1, 51,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_13, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_BMI1,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF,
				0 | RDR_RFLAG_OF | RDR_RFLAG_PF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_BLSIC, RD_CAT_BITBYTE, RD_SET_TBM, 52,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_TBM,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BLSMSK, RD_CAT_BMI1, RD_SET_BMI1, 53,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_13, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_BMI1,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF,
				0 | RDR_RFLAG_ZF | RDR_RFLAG_OF | RDR_RFLAG_PF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_BLSR, RD_CAT_BMI1, RD_SET_BMI1, 54,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_13, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_BMI1,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF,
				0 | RDR_RFLAG_OF | RDR_RFLAG_PF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_BNDCL, RD_CAT_MPX, RD_SET_MPX, 55,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_AG | RD_FLAG_F64 | RD_FLAG_I67 | RD_FLAG_MODRM, RD_CFF_MPX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rB, RD_OPS_l, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BNDCN, RD_CAT_MPX, RD_SET_MPX, 56,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_AG | RD_FLAG_F64 | RD_FLAG_I67 | RD_FLAG_MODRM, RD_CFF_MPX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rB, RD_OPS_l, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BNDCU, RD_CAT_MPX, RD_SET_MPX, 57,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_AG | RD_FLAG_F64 | RD_FLAG_I67 | RD_FLAG_MODRM, RD_CFF_MPX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rB, RD_OPS_l, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BNDLDX, RD_CAT_MPX, RD_SET_MPX, 58,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_AG | RD_FLAG_NOA16 | RD_FLAG_NO_RIP_REL | RD_FLAG_I67 | RD_FLAG_MODRM | RD_FLAG_MIB, RD_CFF_MPX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rB, RD_OPS_l, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_mib, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BNDMK, RD_CAT_MPX, RD_SET_MPX, 59,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_NOA16 | RD_FLAG_NO_RIP_REL | RD_FLAG_I67 | RD_FLAG_MODRM, RD_CFF_MPX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rB, RD_OPS_l, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BNDMOV, RD_CAT_MPX, RD_SET_MPX, 60,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_NOA16 | RD_FLAG_I67 | RD_FLAG_MODRM, RD_CFF_MPX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rB, RD_OPS_l, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mB, RD_OPS_l, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BNDMOV, RD_CAT_MPX, RD_SET_MPX, 60,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_NOA16 | RD_FLAG_I67 | RD_FLAG_MODRM, RD_CFF_MPX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_mB, RD_OPS_l, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_rB, RD_OPS_l, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BNDSTX, RD_CAT_MPX, RD_SET_MPX, 61,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_AG | RD_FLAG_NOA16 | RD_FLAG_NO_RIP_REL | RD_FLAG_I67 | RD_FLAG_MODRM | RD_FLAG_MIB, RD_CFF_MPX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_mib, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_rB, RD_OPS_l, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BOUND, RD_CAT_INTERRUPT, RD_SET_I186, 62,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_a, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_BSF, RD_CAT_I386, RD_SET_I386, 63,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_ZF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_BSR, RD_CAT_BITBYTE, RD_SET_I386, 64,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_ZF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_BSWAP, RD_CAT_DATAXFER, RD_SET_I486REAL, 65,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_BSWAP, RD_CAT_DATAXFER, RD_SET_I486REAL, 65,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_BSWAP, RD_CAT_DATAXFER, RD_SET_I486REAL, 65,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_BSWAP, RD_CAT_DATAXFER, RD_SET_I486REAL, 65,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_BSWAP, RD_CAT_DATAXFER, RD_SET_I486REAL, 65,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_BSWAP, RD_CAT_DATAXFER, RD_SET_I486REAL, 65,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_BSWAP, RD_CAT_DATAXFER, RD_SET_I486REAL, 65,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_BSWAP, RD_CAT_DATAXFER, RD_SET_I486REAL, 65,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_BT, RD_CAT_BITBYTE, RD_SET_I386, 66,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_BITBASE, 0,
				0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_BT, RD_CAT_BITBYTE, RD_SET_I386, 66,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_BTC, RD_CAT_BITBYTE, RD_SET_I386, 67,
				RD_PREF_LOCK | RD_PREF_HLE,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_BTC, RD_CAT_I386, RD_SET_I386, 67,
				RD_PREF_LOCK | RD_PREF_HLE,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_BITBASE, 0,
				0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_BTR, RD_CAT_BITBYTE, RD_SET_I386, 68,
				RD_PREF_LOCK | RD_PREF_HLE,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_BITBASE, 0,
				0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_BTR, RD_CAT_BITBYTE, RD_SET_I386, 68,
				RD_PREF_LOCK | RD_PREF_HLE,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_BTS, RD_CAT_BITBYTE, RD_SET_I386, 69,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_BITBASE, 0,
				0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_BTS, RD_CAT_BITBYTE, RD_SET_I386, 69,
				RD_PREF_LOCK | RD_PREF_HLE,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_BZHI, RD_CAT_BMI2, RD_SET_BMI2, 70,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 1), 0, RD_EXT_13, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_BMI2,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF,
				0 | RDR_RFLAG_OF | RDR_RFLAG_PF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CALLNR, RD_CAT_CALL, RD_SET_I86, 71,
				RD_PREF_BND,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_F64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_MEM_SHSP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CALLNI, RD_CAT_CALL, RD_SET_I86, 71,
				RD_PREF_BND | RD_PREF_DNT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_CETT | RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_MEM_SHSP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CALLFD, RD_CAT_CALL, RD_SET_I86, 72,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_A, RD_OPS_p, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SEG_CS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v2, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_MEM_SHSP, RD_OPS_v2, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CALLFI, RD_CAT_CALL, RD_SET_I86, 72,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_CETT | RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_p, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SEG_CS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v2, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_MEM_SHSP, RD_OPS_v2, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CBW, RD_CAT_CONVERT, RD_SET_I386, 73,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CDQ, RD_CAT_CONVERT, RD_SET_I386, 74,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CDQE, RD_CAT_CONVERT, RD_SET_I386, 75,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CLAC, RD_CAT_SMAP, RD_SET_SMAP, 76,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SMAP,
				0,
				0,
				0,
				0 | RDR_RFLAG_AC, {
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CLC, RD_CAT_FLAGOP, RD_SET_I86, 77,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0 | RDR_RFLAG_CF, {
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CLD, RD_CAT_FLAGOP, RD_SET_I86, 78,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0 | RDR_RFLAG_DF, {
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CLDEMOTE, RD_CAT_CLDEMOTE, RD_SET_CLDEMOTE, 79,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_CLDEMOTE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_P, 0, 0)
				}
			}, {
				RD_INS_CLEVICT0, RD_CAT_UNKNOWN, RD_SET_UNKNOWN, 80,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_unknown, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_CLEVICT1, RD_CAT_UNKNOWN, RD_SET_UNKNOWN, 81,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_unknown, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_CLFLUSH, RD_CAT_MISC, RD_SET_CLFSH, 82,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_CLFSH,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CLFLUSHOPT, RD_CAT_MISC, RD_SET_CLFSHOPT, 83,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_CLFSHOPT,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CLGI, RD_CAT_SYSTEM, RD_SET_SVM, 84,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXR_SEAM | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF | RD_MOD_SMM_OFF,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SVM,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_CLI, RD_CAT_FLAGOP, RD_SET_I86, 85,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0 | RDR_RFLAG_IF, {
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_CLRSSBSY, RD_CAT_CET, RD_SET_CET_SS, 86,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_SHS | RD_FLAG_MODRM, RD_CFF_CET_SS,
				0,
				0 | RDR_RFLAG_CF,
				0,
				0 | RDR_RFLAG_ZF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_OF | RDR_RFLAG_SF, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_SSP, RD_OPS_yf, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_CLTS, RD_CAT_SYSTEM, RD_SET_I286REAL, 87,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_CR_0, RD_OPS_yf, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CLUI, RD_CAT_UINTR, RD_SET_UINTR, 88,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_UINTR,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_UIF, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CLWB, RD_CAT_MISC, RD_SET_CLWB, 89,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_CLWB,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CLZERO, RD_CAT_MISC, RD_SET_CLZERO, 90,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMC, RD_CAT_FLAGOP, RD_SET_I86, 91,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0 | RDR_RFLAG_CF,
				0,
				0, {
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_CMOVcc, RD_CAT_CMOV, RD_SET_PPRO, 92,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMOV,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMOVcc, RD_CAT_CMOV, RD_SET_PPRO, 93,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMOV,
				0 | RDR_RFLAG_CF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMOVcc, RD_CAT_CMOV, RD_SET_PPRO, 94,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMOV,
				0 | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMOVcc, RD_CAT_CMOV, RD_SET_PPRO, 95,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMOV,
				0 | RDR_RFLAG_SF | RDR_RFLAG_ZF | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMOVcc, RD_CAT_CMOV, RD_SET_PPRO, 96,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMOV,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMOVcc, RD_CAT_CMOV, RD_SET_PPRO, 97,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMOV,
				0 | RDR_RFLAG_CF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMOVcc, RD_CAT_CMOV, RD_SET_PPRO, 98,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMOV,
				0 | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMOVcc, RD_CAT_CMOV, RD_SET_PPRO, 99,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMOV,
				0 | RDR_RFLAG_SF | RDR_RFLAG_ZF | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMOVcc, RD_CAT_CMOV, RD_SET_PPRO, 100,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMOV,
				0 | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMOVcc, RD_CAT_CMOV, RD_SET_PPRO, 101,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMOV,
				0 | RDR_RFLAG_PF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMOVcc, RD_CAT_CMOV, RD_SET_PPRO, 102,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMOV,
				0 | RDR_RFLAG_SF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMOVcc, RD_CAT_CMOV, RD_SET_PPRO, 103,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMOV,
				0 | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMOVcc, RD_CAT_CMOV, RD_SET_PPRO, 104,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMOV,
				0 | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMOVcc, RD_CAT_CMOV, RD_SET_PPRO, 105,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMOV,
				0 | RDR_RFLAG_PF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMOVcc, RD_CAT_CMOV, RD_SET_PPRO, 106,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMOV,
				0 | RDR_RFLAG_SF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMOVcc, RD_CAT_CMOV, RD_SET_PPRO, 107,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMOV,
				0 | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMP, RD_CAT_ARITH, RD_SET_I86, 108,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMP, RD_CAT_ARITH, RD_SET_I86, 108,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMP, RD_CAT_ARITH, RD_SET_I86, 108,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMP, RD_CAT_ARITH, RD_SET_I86, 108,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMP, RD_CAT_ARITH, RD_SET_I86, 108,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMP, RD_CAT_ARITH, RD_SET_I86, 108,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMP, RD_CAT_ARITH, RD_SET_I86, 108,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMP, RD_CAT_ARITH, RD_SET_I86, 108,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMP, RD_CAT_ARITH, RD_SET_I86, 108,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMP, RD_CAT_ARITH, RD_SET_I86, 108,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMPBEXADD, RD_CAT_CMPCCXADD, RD_SET_CMPCCXADD, 109,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 1), 0, RD_EXT_14, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMPCCXADD,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMPCXADD, RD_CAT_CMPCCXADD, RD_SET_CMPCCXADD, 110,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 1), 0, RD_EXT_14, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMPCCXADD,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMPLEXADD, RD_CAT_CMPCCXADD, RD_SET_CMPCCXADD, 111,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 1), 0, RD_EXT_14, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMPCCXADD,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMPLXADD, RD_CAT_CMPCCXADD, RD_SET_CMPCCXADD, 112,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 1), 0, RD_EXT_14, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMPCCXADD,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMPNBEXADD, RD_CAT_CMPCCXADD, RD_SET_CMPCCXADD, 113,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 1), 0, RD_EXT_14, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMPCCXADD,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMPNCXADD, RD_CAT_CMPCCXADD, RD_SET_CMPCCXADD, 114,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 1), 0, RD_EXT_14, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMPCCXADD,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMPNLEXADD, RD_CAT_CMPCCXADD, RD_SET_CMPCCXADD, 115,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 1), 0, RD_EXT_14, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMPCCXADD,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMPNLXADD, RD_CAT_CMPCCXADD, RD_SET_CMPCCXADD, 116,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 1), 0, RD_EXT_14, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMPCCXADD,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMPNOXADD, RD_CAT_CMPCCXADD, RD_SET_CMPCCXADD, 117,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 1), 0, RD_EXT_14, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMPCCXADD,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMPNPXADD, RD_CAT_CMPCCXADD, RD_SET_CMPCCXADD, 118,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 1), 0, RD_EXT_14, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMPCCXADD,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMPNSXADD, RD_CAT_CMPCCXADD, RD_SET_CMPCCXADD, 119,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 1), 0, RD_EXT_14, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMPCCXADD,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMPNZXADD, RD_CAT_CMPCCXADD, RD_SET_CMPCCXADD, 120,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 1), 0, RD_EXT_14, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMPCCXADD,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMPOXADD, RD_CAT_CMPCCXADD, RD_SET_CMPCCXADD, 121,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 1), 0, RD_EXT_14, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMPCCXADD,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMPPD, RD_CAT_SSE, RD_SET_SSE2, 122,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMPPS, RD_CAT_SSE, RD_SET_SSE, 123,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMPPXADD, RD_CAT_CMPCCXADD, RD_SET_CMPCCXADD, 124,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 1), 0, RD_EXT_14, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMPCCXADD,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMPS, RD_CAT_STRINGOP, RD_SET_I86, 125,
				RD_PREF_REPC,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_X, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_Y, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMPS, RD_CAT_STRINGOP, RD_SET_I86, 125,
				RD_PREF_REPC,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 4), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_ZF | RDR_RFLAG_DF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_X, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_Y, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_CMPSD, RD_CAT_SSE, RD_SET_SSE2, 126,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMPS, RD_CAT_STRINGOP, RD_SET_I86, 126,
				RD_PREF_REPC,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_X, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMPS, RD_CAT_STRINGOP, RD_SET_I86, 126,
				RD_PREF_REPC,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 4), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_ZF | RDR_RFLAG_DF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_X, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_CMPS, RD_CAT_STRINGOP, RD_SET_I86, 127,
				RD_PREF_REPC,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_X, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMPS, RD_CAT_STRINGOP, RD_SET_I86, 127,
				RD_PREF_REPC,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 4), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_ZF | RDR_RFLAG_DF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_X, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_CMPSS, RD_CAT_SSE, RD_SET_SSE, 128,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMPS, RD_CAT_STRINGOP, RD_SET_I86, 129,
				RD_PREF_REPC,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_X, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CMPS, RD_CAT_STRINGOP, RD_SET_I86, 129,
				RD_PREF_REPC,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 4), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_ZF | RDR_RFLAG_DF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_X, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_CMPSXADD, RD_CAT_CMPCCXADD, RD_SET_CMPCCXADD, 130,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 1), 0, RD_EXT_14, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMPCCXADD,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMPXCHG, RD_CAT_SEMAPHORE, RD_SET_I486REAL, 131,
				RD_PREF_LOCK | RD_PREF_HLE,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMPXCHG, RD_CAT_SEMAPHORE, RD_SET_I486REAL, 131,
				RD_PREF_LOCK | RD_PREF_HLE,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMPXCHG16B, RD_CAT_SEMAPHORE, RD_SET_CMPXCHG16B, 132,
				RD_PREF_LOCK | RD_PREF_HLE,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 5), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_CX8,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_dq, 0, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rBX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMPXCHG8B, RD_CAT_SEMAPHORE, RD_SET_PENTIUMREAL, 133,
				RD_PREF_LOCK | RD_PREF_HLE,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 5), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_CX8,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rBX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CMPZXADD, RD_CAT_CMPCCXADD, RD_SET_CMPCCXADD, 134,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 1), 0, RD_EXT_14, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, RD_CFF_CMPCCXADD,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_COMISD, RD_CAT_SSE2, RD_SET_SSE2, 135,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_COMISS, RD_CAT_SSE, RD_SET_SSE, 136,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CPUID, RD_CAT_MISC, RD_SET_I486REAL, 137,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rBX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_CRW, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_CPU_READ, RD_CAT_SYSTEM, RD_SET_CYRIX, 138,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_CPU_WRITE, RD_CAT_SYSTEM, RD_SET_CYRIX, 139,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_CQO, RD_CAT_CONVERT, RD_SET_I386, 140,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CRC32, RD_CAT_SSE, RD_SET_SSE42, 141,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSE42,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CRC32, RD_CAT_SSE, RD_SET_SSE42, 141,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_S66 | RD_FLAG_MODRM, RD_CFF_SSE42,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CRC32, RD_CAT_SSE, RD_SET_SSE42, 141,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSE42,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CRC32, RD_CAT_SSE, RD_SET_SSE42, 141,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_S66 | RD_FLAG_MODRM, RD_CFF_SSE42,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTDQ2PD, RD_CAT_CONVERT, RD_SET_SSE2, 142,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTDQ2PS, RD_CAT_CONVERT, RD_SET_SSE2, 143,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTPD2DQ, RD_CAT_CONVERT, RD_SET_SSE2, 144,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTPD2PI, RD_CAT_CONVERT, RD_SET_SSE2, 145,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTPD2PS, RD_CAT_CONVERT, RD_SET_SSE2, 146,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTPI2PD, RD_CAT_CONVERT, RD_SET_SSE2, 147,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTPI2PS, RD_CAT_CONVERT, RD_SET_SSE, 148,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTPS2DQ, RD_CAT_CONVERT, RD_SET_SSE2, 149,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTPS2PD, RD_CAT_CONVERT, RD_SET_SSE2, 150,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTPS2PI, RD_CAT_CONVERT, RD_SET_SSE, 151,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTSD2SI, RD_CAT_CONVERT, RD_SET_SSE2, 152,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTSD2SS, RD_CAT_CONVERT, RD_SET_SSE2, 153,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTSI2SD, RD_CAT_CONVERT, RD_SET_SSE2, 154,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTSI2SS, RD_CAT_CONVERT, RD_SET_SSE, 155,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTSS2SD, RD_CAT_CONVERT, RD_SET_SSE2, 156,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTSS2SI, RD_CAT_CONVERT, RD_SET_SSE, 157,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTTPD2DQ, RD_CAT_CONVERT, RD_SET_SSE2, 158,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTTPD2PI, RD_CAT_CONVERT, RD_SET_SSE2, 159,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTTPS2DQ, RD_CAT_CONVERT, RD_SET_SSE2, 160,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTTPS2PI, RD_CAT_CONVERT, RD_SET_SSE, 161,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTTSD2SI, RD_CAT_CONVERT, RD_SET_SSE2, 162,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CVTTSS2SI, RD_CAT_CONVERT, RD_SET_SSE, 163,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CWD, RD_CAT_CONVERT, RD_SET_I386, 164,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_CWDE, RD_CAT_CONVERT, RD_SET_I386, 165,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_DAA, RD_CAT_DECIMAL, RD_SET_I86, 166,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF,
				0 | RDR_RFLAG_OF,
				0 | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_DAS, RD_CAT_DECIMAL, RD_SET_I86, 167,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_OF,
				0 | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_DEC, RD_CAT_ARITH, RD_SET_I86, 168,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_DEC, RD_CAT_ARITH, RD_SET_I86, 168,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_DEC, RD_CAT_ARITH, RD_SET_I86, 168,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_DEC, RD_CAT_ARITH, RD_SET_I86, 168,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_DEC, RD_CAT_ARITH, RD_SET_I86, 168,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_DEC, RD_CAT_ARITH, RD_SET_I86, 168,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_DEC, RD_CAT_ARITH, RD_SET_I86, 168,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_DEC, RD_CAT_ARITH, RD_SET_I86, 168,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_DEC, RD_CAT_ARITH, RD_SET_I86, 168,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_DEC, RD_CAT_ARITH, RD_SET_I86, 168,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_DELAY, RD_CAT_UNKNOWN, RD_SET_UNKNOWN, 169,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_DIV, RD_CAT_ARITH, RD_SET_I86, 170,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_AH, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_DIV, RD_CAT_ARITH, RD_SET_I86, 170,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_DIVPD, RD_CAT_SSE, RD_SET_SSE2, 171,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_DIVPS, RD_CAT_SSE, RD_SET_SSE, 172,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_DIVSD, RD_CAT_SSE, RD_SET_SSE2, 173,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_DIVSS, RD_CAT_SSE, RD_SET_SSE, 174,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_DMINT, RD_CAT_SYSTEM, RD_SET_CYRIX, 175,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_DPPD, RD_CAT_SSE, RD_SET_SSE4, 176,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_DPPS, RD_CAT_SSE, RD_SET_SSE4, 177,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_EMMS, RD_CAT_MMX, RD_SET_MMX, 178,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, 0, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_ENCLS, RD_CAT_SGX, RD_SET_SGX, 179,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SGX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rBX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_CRW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_CRW, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_CRW, 0, 0)
				}
			}, {
				RD_INS_ENCLU, RD_CAT_SGX, RD_SET_SGX, 180,
				0,
				RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SGX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rBX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_CRW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_CRW, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_CRW, 0, 0)
				}
			}, {
				RD_INS_ENCLV, RD_CAT_SGX, RD_SET_SGX, 181,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SGX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rBX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_CRW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_CRW, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_CRW, 0, 0)
				}
			}, {
				RD_INS_ENCODEKEY128, RD_CAT_AESKL, RD_SET_KL, 182,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_KL,
				0,
				0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_G, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SSE_XMM0, RD_OPS_dq, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SSE_XMM0, RD_OPS_dq, RD_OPF_DEFAULT, RD_OPA_W, 0, 3),
					RD_OP(RD_OPT_SSE_XMM4, RD_OPS_dq, RD_OPF_DEFAULT, RD_OPA_W, 0, 3),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ENCODEKEY256, RD_CAT_AESKL, RD_SET_KL, 183,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_KL,
				0,
				0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_G, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SSE_XMM0, RD_OPS_dq, RD_OPF_DEFAULT, RD_OPA_RW, 0, 2),
					RD_OP(RD_OPT_SSE_XMM2, RD_OPS_dq, RD_OPF_DEFAULT, RD_OPA_W, 0, 5),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ENDBR, RD_CAT_CET, RD_SET_CET_IBT, 184,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_CET_IBT,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_ENDBR, RD_CAT_CET, RD_SET_CET_IBT, 185,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_CET_IBT,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_ENQCMD, RD_CAT_ENQCMD, RD_SET_ENQCMD, 186,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_ENQCMD,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_rM, RD_OPS_unknown, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_oq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ENQCMDS, RD_CAT_ENQCMD, RD_SET_ENQCMD, 187,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_ENQCMD,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_rM, RD_OPS_unknown, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_oq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ENTER, RD_CAT_MISC, RD_SET_I186, 188,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_I, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rBP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rSP, RD_OPS_ssz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ERETS, RD_CAT_RET, RD_SET_FRED, 189,
				0,
				RD_MOD_R0 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 5), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_FRED,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rSP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v5, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SSP, RD_OPS_yf, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0)
				}
			}, {
				RD_INS_ERETU, RD_CAT_RET, RD_SET_FRED, 190,
				0,
				RD_MOD_R0 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 9), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_FRED,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rSP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_SEG_CS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_SEG_SS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v5, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SSP, RD_OPS_yf, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_MSR_GSBASE, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_MSR_KGSBASE, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_EXTRACTPS, RD_CAT_SSE, RD_SET_SSE4, 191,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_EXTRQ, RD_CAT_BITBYTE, RD_SET_SSE4A, 192,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4A,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_U, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_EXTRQ, RD_CAT_BITBYTE, RD_SET_SSE4A, 192,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4A,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_F2XM1, RD_CAT_X87_ALU, RD_SET_X87, 193,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FABS, RD_CAT_X87_ALU, RD_SET_X87, 194,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xf3, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FADD, RD_CAT_X87_ALU, RD_SET_X87, 195,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_fd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FADD, RD_CAT_X87_ALU, RD_SET_X87, 195,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FADD, RD_CAT_X87_ALU, RD_SET_X87, 195,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_fq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FADD, RD_CAT_X87_ALU, RD_SET_X87, 195,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FADDP, RD_CAT_X87_ALU, RD_SET_X87, 196,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FBLD, RD_CAT_X87_ALU, RD_SET_X87, 197,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_fa, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FBSTP, RD_CAT_X87_ALU, RD_SET_X87, 198,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_fa, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCHS, RD_CAT_X87_ALU, RD_SET_X87, 199,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xf3, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCMOVB, RD_CAT_X87_ALU, RD_SET_X87, 200,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCMOVBE, RD_CAT_X87_ALU, RD_SET_X87, 201,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCMOVE, RD_CAT_X87_ALU, RD_SET_X87, 202,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCMOVNB, RD_CAT_X87_ALU, RD_SET_X87, 203,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCMOVNBE, RD_CAT_X87_ALU, RD_SET_X87, 204,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCMOVNE, RD_CAT_X87_ALU, RD_SET_X87, 205,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCMOVNU, RD_CAT_X87_ALU, RD_SET_X87, 206,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_PF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCMOVU, RD_CAT_X87_ALU, RD_SET_X87, 207,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_PF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCOM, RD_CAT_X87_ALU, RD_SET_X87, 208,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xa2, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_fd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCOM, RD_CAT_X87_ALU, RD_SET_X87, 208,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xa2, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCOM, RD_CAT_X87_ALU, RD_SET_X87, 208,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xa2, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_fq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCOM, RD_CAT_X87_ALU, RD_SET_X87, 208,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xa2, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCOMI, RD_CAT_X87_ALU, RD_SET_X87, 209,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0xa2, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCOMIP, RD_CAT_X87_ALU, RD_SET_X87, 210,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0xa2, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCOMP, RD_CAT_X87_ALU, RD_SET_X87, 211,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xa2, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_fd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCOMP, RD_CAT_X87_ALU, RD_SET_X87, 211,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xa2, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCOMP, RD_CAT_X87_ALU, RD_SET_X87, 211,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xa2, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_fq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCOMP, RD_CAT_X87_ALU, RD_SET_X87, 211,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xa2, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCOMP, RD_CAT_X87_ALU, RD_SET_X87, 211,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xa2, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCOMPP, RD_CAT_X87_ALU, RD_SET_X87, 212,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xa2, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FCOS, RD_CAT_X87_ALU, RD_SET_X87, 213,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xeb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FDECSTP, RD_CAT_X87_ALU, RD_SET_X87, 214,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xf3, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FDIV, RD_CAT_X87_ALU, RD_SET_X87, 215,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_fd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FDIV, RD_CAT_X87_ALU, RD_SET_X87, 215,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FDIV, RD_CAT_X87_ALU, RD_SET_X87, 215,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_fq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FDIV, RD_CAT_X87_ALU, RD_SET_X87, 215,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FDIVP, RD_CAT_X87_ALU, RD_SET_X87, 216,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FDIVR, RD_CAT_X87_ALU, RD_SET_X87, 217,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_fd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FDIVR, RD_CAT_X87_ALU, RD_SET_X87, 217,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FDIVR, RD_CAT_X87_ALU, RD_SET_X87, 217,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_fq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FDIVR, RD_CAT_X87_ALU, RD_SET_X87, 217,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FDIVRP, RD_CAT_X87_ALU, RD_SET_X87, 218,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FEMMS, RD_CAT_MMX, RD_SET_3DNOW, 219,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, 0, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_FFREE, RD_CAT_X87_ALU, RD_SET_X87, 220,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0xff, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_TAG, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FFREEP, RD_CAT_X87_ALU, RD_SET_X87, 221,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0xff, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_TAG, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FIADD, RD_CAT_X87_ALU, RD_SET_X87, 222,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FIADD, RD_CAT_X87_ALU, RD_SET_X87, 222,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FICOM, RD_CAT_X87_ALU, RD_SET_X87, 223,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xaa, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FICOM, RD_CAT_X87_ALU, RD_SET_X87, 223,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xaa, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FICOMP, RD_CAT_X87_ALU, RD_SET_X87, 224,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xaa, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FICOMP, RD_CAT_X87_ALU, RD_SET_X87, 224,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xaa, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FIDIV, RD_CAT_X87_ALU, RD_SET_X87, 225,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FIDIV, RD_CAT_X87_ALU, RD_SET_X87, 225,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FIDIVR, RD_CAT_X87_ALU, RD_SET_X87, 226,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FIDIVR, RD_CAT_X87_ALU, RD_SET_X87, 226,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FILD, RD_CAT_X87_ALU, RD_SET_X87, 227,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FILD, RD_CAT_X87_ALU, RD_SET_X87, 227,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FILD, RD_CAT_X87_ALU, RD_SET_X87, 227,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FIMUL, RD_CAT_X87_ALU, RD_SET_X87, 228,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FIMUL, RD_CAT_X87_ALU, RD_SET_X87, 228,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FINCSTP, RD_CAT_X87_ALU, RD_SET_X87, 229,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xf3, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FIST, RD_CAT_X87_ALU, RD_SET_X87, 230,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FIST, RD_CAT_X87_ALU, RD_SET_X87, 230,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FISTP, RD_CAT_X87_ALU, RD_SET_X87, 231,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FISTP, RD_CAT_X87_ALU, RD_SET_X87, 231,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FISTP, RD_CAT_X87_ALU, RD_SET_X87, 231,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FISTTP, RD_CAT_X87_ALU, RD_SET_X87, 232,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xf3, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FISTTP, RD_CAT_X87_ALU, RD_SET_X87, 232,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xf3, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FISTTP, RD_CAT_X87_ALU, RD_SET_X87, 232,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xf3, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FISUB, RD_CAT_X87_ALU, RD_SET_X87, 233,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FISUB, RD_CAT_X87_ALU, RD_SET_X87, 233,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FISUBR, RD_CAT_X87_ALU, RD_SET_X87, 234,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FISUBR, RD_CAT_X87_ALU, RD_SET_X87, 234,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FLD, RD_CAT_X87_ALU, RD_SET_X87, 235,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_fd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FLD, RD_CAT_X87_ALU, RD_SET_X87, 235,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FLD, RD_CAT_X87_ALU, RD_SET_X87, 235,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FLD, RD_CAT_X87_ALU, RD_SET_X87, 235,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_fq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FLD1, RD_CAT_X87_ALU, RD_SET_X87, 236,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FLDCW, RD_CAT_X87_ALU, RD_SET_X87, 237,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0xff, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_CONTROL, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FLDENV, RD_CAT_X87_ALU, RD_SET_X87, 238,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0xaa, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_fe, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FLDL2E, RD_CAT_X87_ALU, RD_SET_X87, 239,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FLDL2T, RD_CAT_X87_ALU, RD_SET_X87, 240,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FLDLG2, RD_CAT_X87_ALU, RD_SET_X87, 241,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FLDLN2, RD_CAT_X87_ALU, RD_SET_X87, 242,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FLDPI, RD_CAT_X87_ALU, RD_SET_X87, 243,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FLDZ, RD_CAT_X87_ALU, RD_SET_X87, 244,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FMUL, RD_CAT_X87_ALU, RD_SET_X87, 245,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_fd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FMUL, RD_CAT_X87_ALU, RD_SET_X87, 245,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FMUL, RD_CAT_X87_ALU, RD_SET_X87, 245,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_fq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FMUL, RD_CAT_X87_ALU, RD_SET_X87, 245,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FMULP, RD_CAT_X87_ALU, RD_SET_X87, 246,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FNCLEX, RD_CAT_X87_ALU, RD_SET_X87, 247,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xff, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FNDISI, RD_CAT_X87_ALU, RD_SET_X87, 248,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0xff, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_FNINIT, RD_CAT_X87_ALU, RD_SET_X87, 249,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 3), 0, 0, 0, 0x00, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_CONTROL, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_X87_TAG, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FNOP, RD_CAT_X87_ALU, RD_SET_X87, 250,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0xff, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_FNOP, RD_CAT_X87_ALU, RD_SET_X87, 250,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0xff, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_FNOP, RD_CAT_X87_ALU, RD_SET_X87, 250,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0xff, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_FNSAVE, RD_CAT_X87_ALU, RD_SET_X87, 251,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 3), 0, 0, 0, 0x00, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_fs, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_X87_CONTROL, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_X87_TAG, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FNSTCW, RD_CAT_X87_ALU, RD_SET_X87, 252,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0xff, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_X87_CONTROL, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FNSTENV, RD_CAT_X87_ALU, RD_SET_X87, 253,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0xff, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_fe, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FNSTSW, RD_CAT_X87_ALU, RD_SET_X87, 254,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0xff, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FNSTSW, RD_CAT_X87_ALU, RD_SET_X87, 254,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0xff, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FPATAN, RD_CAT_X87_ALU, RD_SET_X87, 255,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FPREM, RD_CAT_X87_ALU, RD_SET_X87, 256,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xaa, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FPREM1, RD_CAT_X87_ALU, RD_SET_X87, 257,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xaa, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FPTAN, RD_CAT_X87_ALU, RD_SET_X87, 258,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xeb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FRINEAR, RD_CAT_X87_ALU, RD_SET_X87, 259,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0xff, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_FRNDINT, RD_CAT_X87_ALU, RD_SET_X87, 260,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FRSTOR, RD_CAT_X87_ALU, RD_SET_X87, 261,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0xaa, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_fs, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_CONTROL, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSCALE, RD_CAT_X87_ALU, RD_SET_X87, 262,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSIN, RD_CAT_X87_ALU, RD_SET_X87, 263,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xeb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSINCOS, RD_CAT_X87_ALU, RD_SET_X87, 264,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xeb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSQRT, RD_CAT_X87_ALU, RD_SET_X87, 265,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FST, RD_CAT_X87_ALU, RD_SET_X87, 266,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_fd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FST, RD_CAT_X87_ALU, RD_SET_X87, 266,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_fq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FST, RD_CAT_X87_ALU, RD_SET_X87, 266,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSTDW, RD_CAT_X87_ALU, RD_SET_X87, 267,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0xff, 0, 0, RD_FLAG_MODRM | RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_w, 0, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSTP, RD_CAT_X87_ALU, RD_SET_X87, 268,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_fd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSTP, RD_CAT_X87_ALU, RD_SET_X87, 268,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_ft, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSTP, RD_CAT_X87_ALU, RD_SET_X87, 268,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_fq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSTP, RD_CAT_X87_ALU, RD_SET_X87, 268,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSTP, RD_CAT_X87_ALU, RD_SET_X87, 268,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSTP, RD_CAT_X87_ALU, RD_SET_X87, 268,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSTPNCE, RD_CAT_X87_ALU, RD_SET_X87, 269,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xff, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSTSG, RD_CAT_X87_ALU, RD_SET_X87, 270,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0xff, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_w, 0, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSUB, RD_CAT_X87_ALU, RD_SET_X87, 271,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_fd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSUB, RD_CAT_X87_ALU, RD_SET_X87, 271,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSUB, RD_CAT_X87_ALU, RD_SET_X87, 271,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_fq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSUB, RD_CAT_X87_ALU, RD_SET_X87, 271,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSUBP, RD_CAT_X87_ALU, RD_SET_X87, 272,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSUBR, RD_CAT_X87_ALU, RD_SET_X87, 273,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_fd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSUBR, RD_CAT_X87_ALU, RD_SET_X87, 273,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSUBR, RD_CAT_X87_ALU, RD_SET_X87, 273,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_fq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSUBR, RD_CAT_X87_ALU, RD_SET_X87, 273,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FSUBRP, RD_CAT_X87_ALU, RD_SET_X87, 274,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FTST, RD_CAT_X87_ALU, RD_SET_X87, 275,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xa2, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FUCOM, RD_CAT_X87_ALU, RD_SET_X87, 276,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xaa, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FUCOMI, RD_CAT_X87_ALU, RD_SET_X87, 277,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0xa2, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FUCOMIP, RD_CAT_X87_ALU, RD_SET_X87, 278,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0xa2, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FUCOMP, RD_CAT_X87_ALU, RD_SET_X87, 279,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xaa, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FUCOMPP, RD_CAT_X87_ALU, RD_SET_X87, 280,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xaa, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FXAM, RD_CAT_X87_ALU, RD_SET_X87, 281,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xaa, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FXCH, RD_CAT_X87_ALU, RD_SET_X87, 282,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xf3, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FXCH, RD_CAT_X87_ALU, RD_SET_X87, 282,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xf3, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FXCH, RD_CAT_X87_ALU, RD_SET_X87, 282,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0xf3, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_FPU_ST0, RD_OPS_ft, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_FPU_STX, RD_OPS_ft, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_X87_TAG, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FXRSTOR, RD_CAT_SSE, RD_SET_FXSAVE, 283,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_FXSAVE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_rx, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FXRSTOR64, RD_CAT_SSE, RD_SET_FXSAVE, 284,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_FXSAVE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_rx, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FXSAVE, RD_CAT_SSE, RD_SET_FXSAVE, 285,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_FXSAVE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_rx, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_FXSAVE64, RD_CAT_SSE, RD_SET_FXSAVE, 286,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_FXSAVE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_rx, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_FXTRACT, RD_CAT_X87_ALU, RD_SET_X87, 287,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FYL2X, RD_CAT_X87_ALU, RD_SET_X87, 288,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_FYL2XP1, RD_CAT_X87_ALU, RD_SET_X87, 289,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0xfb, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_X87_STATUS, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_GETSEC, RD_CAT_SYSTEM, RD_SET_SMX, 290,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, 0, RD_CFF_SMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rBX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_GF2P8AFFINEINVQB, RD_CAT_GFNI, RD_SET_GFNI, 291,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_GFNI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_GF2P8AFFINEQB, RD_CAT_GFNI, RD_SET_GFNI, 292,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_GFNI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_GF2P8MULB, RD_CAT_GFNI, RD_SET_GFNI, 293,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_GFNI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_HADDPD, RD_CAT_SSE, RD_SET_SSE3, 294,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_HADDPS, RD_CAT_SSE, RD_SET_SSE3, 295,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_HLT, RD_CAT_SYSTEM, RD_SET_I86, 296,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_HRESET, RD_CAT_HRESET, RD_SET_HRESET, 297,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_HRESET,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_HSUBPD, RD_CAT_SSE, RD_SET_SSE3, 298,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_HSUBPS, RD_CAT_SSE, RD_SET_SSE3, 299,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_IDIV, RD_CAT_ARITH, RD_SET_I86, 300,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_AH, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_IDIV, RD_CAT_ARITH, RD_SET_I86, 300,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_IMUL, RD_CAT_ARITH, RD_SET_I86, 301,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_IMUL, RD_CAT_ARITH, RD_SET_I86, 301,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_IMUL, RD_CAT_ARITH, RD_SET_I86, 301,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_IMUL, RD_CAT_ARITH, RD_SET_I86, 301,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_IMUL, RD_CAT_ARITH, RD_SET_I86, 301,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_IN, RD_CAT_IO, RD_SET_I86, 302,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_IOPL | RDR_RFLAG_VM,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_IN, RD_CAT_IO, RD_SET_I86, 302,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_IOPL | RDR_RFLAG_VM,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_z, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_IN, RD_CAT_IO, RD_SET_I86, 302,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_IOPL | RDR_RFLAG_VM,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_IN, RD_CAT_IO, RD_SET_I86, 302,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_IOPL | RDR_RFLAG_VM,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_z, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_INC, RD_CAT_ARITH, RD_SET_I86, 303,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_INC, RD_CAT_ARITH, RD_SET_I86, 303,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_INC, RD_CAT_ARITH, RD_SET_I86, 303,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_INC, RD_CAT_ARITH, RD_SET_I86, 303,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_INC, RD_CAT_ARITH, RD_SET_I86, 303,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_INC, RD_CAT_ARITH, RD_SET_I86, 303,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_INC, RD_CAT_ARITH, RD_SET_I86, 303,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_INC, RD_CAT_ARITH, RD_SET_I86, 303,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_INC, RD_CAT_ARITH, RD_SET_I86, 303,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_INC, RD_CAT_ARITH, RD_SET_I86, 303,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_INCSSP, RD_CAT_CET, RD_SET_CET_SS, 304,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_CET_SS,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MEM_SHS, RD_OPS_v2, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SSP, RD_OPS_yf, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_INCSSP, RD_CAT_CET, RD_SET_CET_SS, 305,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_CET_SS,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MEM_SHS, RD_OPS_v2, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SSP, RD_OPS_yf, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_INS, RD_CAT_IOSTRINGOP, RD_SET_I86, 306,
				RD_PREF_REP,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF | RDR_RFLAG_IOPL | RDR_RFLAG_VM,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_INS, RD_CAT_IOSTRINGOP, RD_SET_I86, 306,
				RD_PREF_REP,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF | RDR_RFLAG_IOPL | RDR_RFLAG_VM,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_INS, RD_CAT_IOSTRINGOP, RD_SET_I86, 307,
				RD_PREF_REP,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF | RDR_RFLAG_IOPL | RDR_RFLAG_VM,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_z, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_INS, RD_CAT_IOSTRINGOP, RD_SET_I86, 307,
				RD_PREF_REP,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF | RDR_RFLAG_IOPL | RDR_RFLAG_VM,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_z, RD_OPF_DEFAULT, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_INSERTPS, RD_CAT_SSE, RD_SET_SSE4, 308,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_INSERTPS, RD_CAT_SSE, RD_SET_SSE4, 308,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_INSERTQ, RD_CAT_BITBYTE, RD_SET_SSE4A, 309,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4A,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_INSERTQ, RD_CAT_BITBYTE, RD_SET_SSE4A, 309,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4A,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_INS, RD_CAT_IOSTRINGOP, RD_SET_I86, 310,
				RD_PREF_REP,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF | RDR_RFLAG_IOPL | RDR_RFLAG_VM,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_z, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_INS, RD_CAT_IOSTRINGOP, RD_SET_I86, 310,
				RD_PREF_REP,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF | RDR_RFLAG_IOPL | RDR_RFLAG_VM,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_z, RD_OPF_DEFAULT, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_INT, RD_CAT_INTERRUPT, RD_SET_I86, 311,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 5), 0, 0, 0, 0, 0, 0, RD_FLAG_CETT, 0,
				0 | RDR_RFLAG_VM,
				0 | RDR_RFLAG_VM | RDR_RFLAG_IF | RDR_RFLAG_NT | RDR_RFLAG_AC | RDR_RFLAG_RF | RDR_RFLAG_TF,
				0,
				0, {
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SEG_CS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v3, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_MEM_SHSP, RD_OPS_v3, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_INT1, RD_CAT_INTERRUPT, RD_SET_I86, 312,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 4), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_VM,
				0 | RDR_RFLAG_VM | RDR_RFLAG_IF | RDR_RFLAG_NT | RDR_RFLAG_AC | RDR_RFLAG_RF | RDR_RFLAG_TF,
				0,
				0, {
					RD_OP(RD_OPT_SEG_CS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v3, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_INT3, RD_CAT_INTERRUPT, RD_SET_I86, 313,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 5), 0, 0, 0, 0, 0, 0, RD_FLAG_CETT, 0,
				0 | RDR_RFLAG_VM,
				0 | RDR_RFLAG_VM | RDR_RFLAG_IF | RDR_RFLAG_NT | RDR_RFLAG_AC | RDR_RFLAG_RF | RDR_RFLAG_TF,
				0,
				0, {
					RD_OP(RD_OPT_SEG_CS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v3, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_MEM_SHSP, RD_OPS_v3, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_INTO, RD_CAT_INTERRUPT, RD_SET_I86, 314,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 5), 0, 0, 0, 0, 0, 0, RD_FLAG_CETT | RD_FLAG_I64, 0,
				0 | RDR_RFLAG_VM,
				0 | RDR_RFLAG_VM | RDR_RFLAG_IF | RDR_RFLAG_NT | RDR_RFLAG_AC | RDR_RFLAG_RF | RDR_RFLAG_TF,
				0,
				0, {
					RD_OP(RD_OPT_SEG_CS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v3, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_MEM_SHSP, RD_OPS_v3, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_INVD, RD_CAT_SYSTEM, RD_SET_I486REAL, 315,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_INVEPT, RD_CAT_VTX, RD_SET_VTX, 316,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXR_SEAM | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF | RD_MOD_SMM_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_SERIAL | RD_FLAG_MODRM, RD_CFF_VTX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_INVLPG, RD_CAT_SYSTEM, RD_SET_I486REAL, 317,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_AG | RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_INVLPGA, RD_CAT_SYSTEM, RD_SET_SVM, 318,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXR_SEAM | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF | RD_MOD_SMM_OFF,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SVM,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_INVLPGB, RD_CAT_SYSTEM, RD_SET_INVLPGB, 319,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_INVLPGB,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_INVPCID, RD_CAT_MISC, RD_SET_INVPCID, 320,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_MODRM, RD_CFF_INVPCID,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_INVVPID, RD_CAT_VTX, RD_SET_VTX, 321,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXR_SEAM | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF | RD_MOD_SMM_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_SERIAL | RD_FLAG_MODRM, RD_CFF_VTX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_IRET, RD_CAT_RET, RD_SET_I86, 322,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 5), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_SEG_CS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v3, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_MEM_SHSP, RD_OPS_v3, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_IRET, RD_CAT_RET, RD_SET_I86, 323,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 5), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_SEG_CS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v3, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_MEM_SHSP, RD_OPS_v3, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_IRET, RD_CAT_RET, RD_SET_I86, 324,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 5), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_SEG_CS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v3, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_MEM_SHSP, RD_OPS_v3, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 325,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 325,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 326,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_CF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 326,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_CF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_JrCXZ, RD_CAT_COND_BR, RD_SET_I86, 327,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0)
				}
			}, {
				RD_INS_JrCXZ, RD_CAT_COND_BR, RD_SET_I86, 328,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 329,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 329,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 330,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_SF | RDR_RFLAG_ZF | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 330,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_SF | RDR_RFLAG_ZF | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_JMPNR, RD_CAT_UNCOND_BR, RD_SET_I86, 331,
				RD_PREF_BND,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_F64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_JMPNR, RD_CAT_UNCOND_BR, RD_SET_I86, 331,
				RD_PREF_BND,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_F64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_JMPNI, RD_CAT_UNCOND_BR, RD_SET_I86, 331,
				RD_PREF_BND | RD_PREF_DNT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_CETT | RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_JMPE, RD_CAT_SYSTEM, RD_SET_I64, 332,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_JMPE, RD_CAT_UNCOND_BR, RD_SET_I64, 332,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_JMPFD, RD_CAT_UNCOND_BR, RD_SET_I86, 333,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_A, RD_OPS_p, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SEG_CS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_JMPFI, RD_CAT_UNCOND_BR, RD_SET_I86, 333,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_CETT | RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_p, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SEG_CS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 334,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 334,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 335,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_CF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 335,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_CF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 336,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 336,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 337,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_SF | RDR_RFLAG_ZF | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 337,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_SF | RDR_RFLAG_ZF | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 338,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 338,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 339,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_PF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 339,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_PF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 340,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_SF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 340,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_SF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 341,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 341,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 342,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 342,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 343,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_PF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 343,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_PF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_JrCXZ, RD_CAT_COND_BR, RD_SET_I86, 344,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 345,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_SF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 345,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_SF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 346,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_Jcc, RD_CAT_COND_BR, RD_SET_I86, 346,
				RD_PREF_BND | RD_PREF_BHINT,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_COND, 0,
				0 | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KADD, RD_CAT_KMASK, RD_SET_AVX512DQ, 347,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KADD, RD_CAT_KMASK, RD_SET_AVX512BW, 348,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KADD, RD_CAT_KMASK, RD_SET_AVX512BW, 349,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KADD, RD_CAT_KMASK, RD_SET_AVX512DQ, 350,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KAND, RD_CAT_KMASK, RD_SET_AVX512DQ, 351,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KAND, RD_CAT_KMASK, RD_SET_AVX512BW, 352,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KANDN, RD_CAT_KMASK, RD_SET_AVX512DQ, 353,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KANDN, RD_CAT_KMASK, RD_SET_AVX512BW, 354,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KANDN, RD_CAT_KMASK, RD_SET_AVX512BW, 355,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KANDN, RD_CAT_KMASK, RD_SET_AVX512F, 356,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KAND, RD_CAT_KMASK, RD_SET_AVX512BW, 357,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KAND, RD_CAT_KMASK, RD_SET_AVX512F, 358,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMERGE2L1H, RD_CAT_UNKNOWN, RD_SET_UNKNOWN, 359,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMERGE2L1L, RD_CAT_UNKNOWN, RD_SET_UNKNOWN, 360,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMOV, RD_CAT_KMASK, RD_SET_AVX512DQ, 361,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K21, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMOV, RD_CAT_KMASK, RD_SET_AVX512DQ, 361,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMOV, RD_CAT_KMASK, RD_SET_AVX512DQ, 361,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K21, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_rK, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMOV, RD_CAT_KMASK, RD_SET_AVX512DQ, 361,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMOV, RD_CAT_KMASK, RD_SET_AVX512DQ, 361,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMOV, RD_CAT_KMASK, RD_SET_AVX512BW, 362,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K21, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMOV, RD_CAT_KMASK, RD_SET_AVX512BW, 362,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMOV, RD_CAT_KMASK, RD_SET_AVX512BW, 362,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K21, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_rK, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMOV, RD_CAT_KMASK, RD_SET_AVX512BW, 362,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMOV, RD_CAT_KMASK, RD_SET_AVX512BW, 362,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMOV, RD_CAT_KMASK, RD_SET_AVX512BW, 363,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K21, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMOV, RD_CAT_KMASK, RD_SET_AVX512BW, 363,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMOV, RD_CAT_KMASK, RD_SET_AVX512BW, 363,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K21, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMOV, RD_CAT_KMASK, RD_SET_AVX512BW, 363,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMOV, RD_CAT_KMASK, RD_SET_AVX512BW, 363,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMOV, RD_CAT_KMASK, RD_SET_AVX512F, 364,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K21, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMOV, RD_CAT_KMASK, RD_SET_AVX512F, 364,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMOV, RD_CAT_KMASK, RD_SET_AVX512F, 364,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K21, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_rK, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMOV, RD_CAT_KMASK, RD_SET_AVX512F, 364,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KMOV, RD_CAT_KMASK, RD_SET_AVX512F, 364,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KNOT, RD_CAT_KMASK, RD_SET_AVX512DQ, 365,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KNOT, RD_CAT_KMASK, RD_SET_AVX512BW, 366,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KNOT, RD_CAT_KMASK, RD_SET_AVX512BW, 367,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KNOT, RD_CAT_KMASK, RD_SET_AVX512F, 368,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KOR, RD_CAT_KMASK, RD_SET_AVX512DQ, 369,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KOR, RD_CAT_KMASK, RD_SET_AVX512BW, 370,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KOR, RD_CAT_KMASK, RD_SET_AVX512BW, 371,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KORTEST, RD_CAT_KMASK, RD_SET_AVX512DQ, 372,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512DQ,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_rK, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_KORTEST, RD_CAT_KMASK, RD_SET_AVX512BW, 373,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_rK, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_KORTEST, RD_CAT_KMASK, RD_SET_AVX512BW, 374,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_KORTEST, RD_CAT_KMASK, RD_SET_AVX512F, 375,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512F,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_rK, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_KOR, RD_CAT_KMASK, RD_SET_AVX512F, 376,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KSHIFTL, RD_CAT_KMASK, RD_SET_AVX512DQ, 377,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KSHIFTL, RD_CAT_KMASK, RD_SET_AVX512BW, 378,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KSHIFTL, RD_CAT_KMASK, RD_SET_AVX512BW, 379,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KSHIFTL, RD_CAT_KMASK, RD_SET_AVX512F, 380,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KSHIFTR, RD_CAT_KMASK, RD_SET_AVX512DQ, 381,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KSHIFTR, RD_CAT_KMASK, RD_SET_AVX512BW, 382,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KSHIFTR, RD_CAT_KMASK, RD_SET_AVX512BW, 383,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KSHIFTR, RD_CAT_KMASK, RD_SET_AVX512F, 384,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KTEST, RD_CAT_KMASK, RD_SET_AVX512DQ, 385,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KTEST, RD_CAT_KMASK, RD_SET_AVX512BW, 386,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KTEST, RD_CAT_KMASK, RD_SET_AVX512BW, 387,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KTEST, RD_CAT_KMASK, RD_SET_AVX512DQ, 388,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KUNPCKBW, RD_CAT_KMASK, RD_SET_AVX512F, 389,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KUNPCKDQ, RD_CAT_KMASK, RD_SET_AVX512BW, 390,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KUNPCKWD, RD_CAT_KMASK, RD_SET_AVX512BW, 391,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KXNOR, RD_CAT_KMASK, RD_SET_AVX512DQ, 392,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KXNOR, RD_CAT_KMASK, RD_SET_AVX512BW, 393,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KXNOR, RD_CAT_KMASK, RD_SET_AVX512BW, 394,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KXNOR, RD_CAT_KMASK, RD_SET_AVX512F, 395,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KXOR, RD_CAT_KMASK, RD_SET_AVX512DQ, 396,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KXOR, RD_CAT_KMASK, RD_SET_AVX512BW, 397,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KXOR, RD_CAT_KMASK, RD_SET_AVX512BW, 398,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_KXOR, RD_CAT_KMASK, RD_SET_AVX512F, 399,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_K20, RD_EXC_OPMASK, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_vK, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_LAHF, RD_CAT_FLAGOP, RD_SET_I86, 400,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_AH, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_LAR, RD_CAT_SYSTEM, RD_SET_I286PROT, 401,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_LAR, RD_CAT_SYSTEM, RD_SET_I286PROT, 401,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_LDDQU, RD_CAT_SSE, RD_SET_SSE3, 402,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_LDMXCSR, RD_CAT_SSE, RD_SET_SSE, 403,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MXCSR, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_LDS, RD_CAT_SEGOP, RD_SET_I86, 404,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_z, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_p, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SEG_DS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_LDTILECFG, RD_CAT_AMX, RD_SET_AMXTILE, 405,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 0), 0, RD_EXT_AMX_E1, RD_EXC_AMX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_AMXTILE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_oq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_LEA, RD_CAT_MISC, RD_SET_I86, 406,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_AG | RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_0, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_LEAVE, RD_CAT_MISC, RD_SET_I186, 407,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rBP, RD_OPS_ssz, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rBP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rSP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_LES, RD_CAT_SEGOP, RD_SET_I86, 408,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_z, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_p, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SEG_ES, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_LFENCE, RD_CAT_MISC, RD_SET_SSE2, 409,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_LFS, RD_CAT_SEGOP, RD_SET_I386, 410,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_p, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SEG_FS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_LGDT, RD_CAT_SYSTEM, RD_SET_I286REAL, 411,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL | RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_s, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SYS_GDTR, RD_OPS_s, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_LGS, RD_CAT_SEGOP, RD_SET_I386, 412,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_p, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SEG_GS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_LIDT, RD_CAT_SYSTEM, RD_SET_I286REAL, 413,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL | RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_s, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SYS_IDTR, RD_OPS_s, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_LKGS, RD_CAT_LKGS, RD_SET_LKGS, 414,
				0,
				RD_MOD_R0 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_LKGS,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MSR_KGSBASE, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_LKGS, RD_CAT_LKGS, RD_SET_LKGS, 414,
				0,
				RD_MOD_R0 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_LKGS,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MSR_KGSBASE, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_LLDT, RD_CAT_SYSTEM, RD_SET_I286PROT, 415,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL | RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SYS_LDTR, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_LLWPCB, RD_CAT_LWP, RD_SET_LWP, 416,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_LWP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_LMSW, RD_CAT_SYSTEM, RD_SET_I286REAL, 417,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL | RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_CR_0, RD_OPS_yf, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_LOADIWKEY, RD_CAT_KL, RD_SET_KL, 418,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_KL,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SSE_XMM0, RD_OPS_dq, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_LODS, RD_CAT_STRINGOP, RD_SET_I86, 419,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_LODS, RD_CAT_STRINGOP, RD_SET_I86, 419,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_LODS, RD_CAT_STRINGOP, RD_SET_I86, 420,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_LODS, RD_CAT_STRINGOP, RD_SET_I86, 420,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_LODS, RD_CAT_STRINGOP, RD_SET_I86, 421,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_LODS, RD_CAT_STRINGOP, RD_SET_I86, 421,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_LODS, RD_CAT_STRINGOP, RD_SET_I86, 422,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_LODS, RD_CAT_STRINGOP, RD_SET_I86, 422,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_LOOP, RD_CAT_COND_BR, RD_SET_I86, 423,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_F64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_LOOPNZ, RD_CAT_COND_BR, RD_SET_I86, 424,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_F64, 0,
				0 | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_LOOPZ, RD_CAT_COND_BR, RD_SET_I86, 425,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_F64, 0,
				0 | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CRCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_LSL, RD_CAT_SYSTEM, RD_SET_I286PROT, 426,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_LSL, RD_CAT_SYSTEM, RD_SET_I286PROT, 426,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_LSS, RD_CAT_SEGOP, RD_SET_I386, 427,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_p, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SEG_SS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_LTR, RD_CAT_SYSTEM, RD_SET_I286PROT, 428,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL | RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SYS_TR, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_LWPINS, RD_CAT_LWP, RD_SET_LWP, 429,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_LWP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_LWPVAL, RD_CAT_LWP, RD_SET_LWP, 430,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_LWP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_LZCNT, RD_CAT_LZCNT, RD_SET_LZCNT, 431,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_LZCNT,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_MASKMOVDQU, RD_CAT_DATAXFER, RD_SET_SSE2, 432,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MEM_rDI, RD_OPS_dq, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_MASKMOVQ, RD_CAT_DATAXFER, RD_SET_MMX, 433,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_N, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MEM_rDI, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_MAXPD, RD_CAT_SSE, RD_SET_SSE2, 434,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MAXPS, RD_CAT_SSE, RD_SET_SSE, 435,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MAXSD, RD_CAT_SSE, RD_SET_SSE2, 436,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MAXSS, RD_CAT_SSE, RD_SET_SSE, 437,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MCOMMIT, RD_CAT_MISC, RD_SET_MCOMMIT, 438,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MCOMMIT,
				0,
				0 | RDR_RFLAG_CF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_MFENCE, RD_CAT_MISC, RD_SET_SSE2, 439,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_MINPD, RD_CAT_SSE, RD_SET_SSE2, 440,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MINPS, RD_CAT_SSE, RD_SET_SSE, 441,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MINSD, RD_CAT_SSE, RD_SET_SSE2, 442,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MINSS, RD_CAT_SSE, RD_SET_SSE, 443,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MONITOR, RD_CAT_MISC, RD_SET_SSE3, 444,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MONITOR,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_MEM_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MONITORX, RD_CAT_SYSTEM, RD_SET_MWAITT, 445,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_MEM_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MONTMUL, RD_CAT_PADLOCK, RD_SET_CYRIX, 446,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_MOV_CR, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_LOCK_SPECIAL | RD_FLAG_MFR | RD_FLAG_F64 | RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_C, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV_DR, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MFR | RD_FLAG_F64 | RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_D, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV_CR, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_LOCK_SPECIAL | RD_FLAG_MFR | RD_FLAG_F64 | RD_FLAG_SERIAL | RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_C, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV_DR, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MFR | RD_FLAG_F64 | RD_FLAG_SERIAL | RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_D, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV_TR, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MFR | RD_FLAG_F64 | RD_FLAG_MODRM | RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_T, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV_TR, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MFR | RD_FLAG_F64 | RD_FLAG_MODRM | RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_T, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				RD_PREF_XRELEASE | RD_PREF_HLE_WO_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				RD_PREF_XRELEASE | RD_PREF_HLE_WO_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_S, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_S, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_S, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_S, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_O, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_O, RD_OPS_v, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_O, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_O, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_v, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_v, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_v, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_v, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_v, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_v, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_v, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_v, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				RD_PREF_XRELEASE | RD_PREF_HLE_WO_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOV, RD_CAT_DATAXFER, RD_SET_I86, 447,
				RD_PREF_XRELEASE | RD_PREF_HLE_WO_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVAPD, RD_CAT_DATAXFER, RD_SET_SSE2, 448,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_1, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVAPD, RD_CAT_DATAXFER, RD_SET_SSE2, 448,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_1, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVAPS, RD_CAT_DATAXFER, RD_SET_SSE, 449,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_1, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVAPS, RD_CAT_DATAXFER, RD_SET_SSE, 449,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_1, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVBE, RD_CAT_DATAXFER, RD_SET_MOVBE, 450,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MOVBE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_v, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVBE, RD_CAT_DATAXFER, RD_SET_MOVBE, 450,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_S66 | RD_FLAG_MODRM, RD_CFF_MOVBE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_v, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVBE, RD_CAT_DATAXFER, RD_SET_MOVBE, 450,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MOVBE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVBE, RD_CAT_DATAXFER, RD_SET_MOVBE, 450,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_S66 | RD_FLAG_MODRM, RD_CFF_MOVBE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVD, RD_CAT_DATAXFER, RD_SET_MMX, 451,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVD, RD_CAT_DATAXFER, RD_SET_SSE2, 451,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVD, RD_CAT_DATAXFER, RD_SET_MMX, 451,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_P, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVD, RD_CAT_DATAXFER, RD_SET_SSE2, 451,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVDDUP, RD_CAT_DATAXFER, RD_SET_SSE3, 452,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVDIR64B, RD_CAT_MOVDIR64B, RD_SET_MOVDIR64B, 453,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MOVDIR64B,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rM, RD_OPS_oq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_oq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVDIRI, RD_CAT_MOVDIRI, RD_SET_MOVDIRI, 454,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MOVDIRI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVDQ2Q, RD_CAT_DATAXFER, RD_SET_SSE2, 455,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVDQA, RD_CAT_DATAXFER, RD_SET_SSE2, 456,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_1, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVDQA, RD_CAT_DATAXFER, RD_SET_SSE2, 456,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_1, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVDQU, RD_CAT_DATAXFER, RD_SET_SSE2, 457,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVDQU, RD_CAT_DATAXFER, RD_SET_SSE2, 457,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVHLPS, RD_CAT_DATAXFER, RD_SET_SSE, 458,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVHPD, RD_CAT_DATAXFER, RD_SET_SSE2, 459,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVHPD, RD_CAT_DATAXFER, RD_SET_SSE2, 459,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVHPS, RD_CAT_DATAXFER, RD_SET_SSE, 460,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVHPS, RD_CAT_DATAXFER, RD_SET_SSE, 460,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVLHPS, RD_CAT_DATAXFER, RD_SET_SSE, 461,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVLPD, RD_CAT_DATAXFER, RD_SET_SSE2, 462,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVLPD, RD_CAT_DATAXFER, RD_SET_SSE2, 462,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVLPS, RD_CAT_DATAXFER, RD_SET_SSE, 463,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVMSKPD, RD_CAT_DATAXFER, RD_SET_SSE2, 464,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_D64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVMSKPS, RD_CAT_DATAXFER, RD_SET_SSE, 465,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_D64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVNTDQ, RD_CAT_DATAXFER, RD_SET_SSE2, 466,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_1, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVNTDQA, RD_CAT_SSE, RD_SET_SSE4, 467,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_1, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVNTI, RD_CAT_DATAXFER, RD_SET_SSE2, 468,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVNTPD, RD_CAT_DATAXFER, RD_SET_SSE2, 469,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_1, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVNTPS, RD_CAT_DATAXFER, RD_SET_SSE, 470,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_1, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVNTQ, RD_CAT_DATAXFER, RD_SET_MMX, 471,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVNTSD, RD_CAT_DATAXFER, RD_SET_SSE4A, 472,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4A,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_sd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVNTSS, RD_CAT_DATAXFER, RD_SET_SSE4A, 473,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4A,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVQ, RD_CAT_DATAXFER, RD_SET_SSE2, 474,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVQ, RD_CAT_DATAXFER, RD_SET_SSE2, 474,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVQ, RD_CAT_DATAXFER, RD_SET_MMX, 474,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVQ, RD_CAT_DATAXFER, RD_SET_MMX, 474,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVQ, RD_CAT_DATAXFER, RD_SET_SSE2, 474,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVQ, RD_CAT_DATAXFER, RD_SET_SSE2, 474,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVQ, RD_CAT_DATAXFER, RD_SET_MMX, 474,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVQ, RD_CAT_DATAXFER, RD_SET_SSE2, 474,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVQ2DQ, RD_CAT_DATAXFER, RD_SET_SSE2, 475,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_N, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVS, RD_CAT_STRINGOP, RD_SET_I86, 476,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVS, RD_CAT_STRINGOP, RD_SET_I86, 476,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 4), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_MOVSD, RD_CAT_DATAXFER, RD_SET_SSE2, 477,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVSD, RD_CAT_DATAXFER, RD_SET_SSE2, 477,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVS, RD_CAT_STRINGOP, RD_SET_I86, 477,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVS, RD_CAT_STRINGOP, RD_SET_I86, 477,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 4), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_MOVSHDUP, RD_CAT_DATAXFER, RD_SET_SSE3, 478,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVSLDUP, RD_CAT_DATAXFER, RD_SET_SSE3, 479,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVS, RD_CAT_STRINGOP, RD_SET_I86, 480,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVS, RD_CAT_STRINGOP, RD_SET_I86, 480,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 4), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_MOVSS, RD_CAT_DATAXFER, RD_SET_SSE, 481,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVSS, RD_CAT_DATAXFER, RD_SET_SSE, 481,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVS, RD_CAT_STRINGOP, RD_SET_I86, 482,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVS, RD_CAT_STRINGOP, RD_SET_I86, 482,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 4), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_MOVSX, RD_CAT_DATAXFER, RD_SET_I386, 483,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVSX, RD_CAT_DATAXFER, RD_SET_I386, 483,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVSXD, RD_CAT_DATAXFER, RD_SET_LONGMODE, 484,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_z, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVUPD, RD_CAT_DATAXFER, RD_SET_SSE2, 485,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVUPD, RD_CAT_DATAXFER, RD_SET_SSE2, 485,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVUPS, RD_CAT_DATAXFER, RD_SET_SSE, 486,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVUPS, RD_CAT_DATAXFER, RD_SET_SSE, 486,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVZX, RD_CAT_DATAXFER, RD_SET_I386, 487,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MOVZX, RD_CAT_DATAXFER, RD_SET_I386, 487,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MPSADBW, RD_CAT_SSE, RD_SET_SSE4, 488,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MUL, RD_CAT_ARITH, RD_SET_I86, 489,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_MUL, RD_CAT_ARITH, RD_SET_I86, 489,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_MULPD, RD_CAT_SSE, RD_SET_SSE2, 490,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MULPS, RD_CAT_SSE, RD_SET_SSE, 491,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MULSD, RD_CAT_SSE, RD_SET_SSE2, 492,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MULSS, RD_CAT_SSE, RD_SET_SSE, 493,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MULX, RD_CAT_BMI2, RD_SET_BMI2, 494,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 1), 0, RD_EXT_13, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_BMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_y, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MWAIT, RD_CAT_MISC, RD_SET_SSE3, 495,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MONITOR,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_MWAITX, RD_CAT_SYSTEM, RD_SET_MWAITT, 496,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rBX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_NEG, RD_CAT_LOGIC, RD_SET_I86, 497,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_NEG, RD_CAT_LOGIC, RD_SET_I86, 497,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_NOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_NOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_NOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_NOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_NOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_NOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_NOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_NOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_WIDENOP, RD_SET_PPRO, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_N, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_NOP, RD_CAT_NOP, RD_SET_I86, 498,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_NOT, RD_CAT_LOGIC, RD_SET_I86, 499,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_NOT, RD_CAT_LOGIC, RD_SET_I86, 499,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_OR, RD_CAT_LOGIC, RD_SET_I86, 500,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_OR, RD_CAT_LOGIC, RD_SET_I86, 500,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_OR, RD_CAT_LOGIC, RD_SET_I86, 500,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_OR, RD_CAT_LOGIC, RD_SET_I86, 500,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_OR, RD_CAT_LOGIC, RD_SET_I86, 500,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_OR, RD_CAT_LOGIC, RD_SET_I86, 500,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_OR, RD_CAT_LOGIC, RD_SET_I86, 500,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_OR, RD_CAT_LOGIC, RD_SET_I86, 500,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_OR, RD_CAT_LOGIC, RD_SET_I86, 500,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_OR, RD_CAT_LOGIC, RD_SET_I86, 500,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ORPD, RD_CAT_LOGICAL_FP, RD_SET_SSE2, 501,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_ORPS, RD_CAT_LOGICAL_FP, RD_SET_SSE, 502,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_OUT, RD_CAT_IO, RD_SET_I86, 503,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL, 0,
				0 | RDR_RFLAG_IOPL | RDR_RFLAG_VM,
				0,
				0,
				0, {
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_OUT, RD_CAT_IO, RD_SET_I86, 503,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL, 0,
				0 | RDR_RFLAG_IOPL | RDR_RFLAG_VM,
				0,
				0,
				0, {
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_OUT, RD_CAT_IO, RD_SET_I86, 503,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL, 0,
				0 | RDR_RFLAG_IOPL | RDR_RFLAG_VM,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_OUT, RD_CAT_IO, RD_SET_I86, 503,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL, 0,
				0 | RDR_RFLAG_IOPL | RDR_RFLAG_VM,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_OUTS, RD_CAT_IOSTRINGOP, RD_SET_I86, 504,
				RD_PREF_REP,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL, 0,
				0 | RDR_RFLAG_DF | RDR_RFLAG_IOPL | RDR_RFLAG_VM,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_OUTS, RD_CAT_IOSTRINGOP, RD_SET_I86, 504,
				RD_PREF_REP,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL, 0,
				0 | RDR_RFLAG_DF | RDR_RFLAG_IOPL | RDR_RFLAG_VM,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_OUTS, RD_CAT_IOSTRINGOP, RD_SET_I86, 505,
				RD_PREF_REP,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL, 0,
				0 | RDR_RFLAG_DF | RDR_RFLAG_IOPL | RDR_RFLAG_VM,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_z, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_OUTS, RD_CAT_IOSTRINGOP, RD_SET_I86, 505,
				RD_PREF_REP,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL, 0,
				0 | RDR_RFLAG_DF | RDR_RFLAG_IOPL | RDR_RFLAG_VM,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_z, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_OUTS, RD_CAT_IOSTRINGOP, RD_SET_I86, 506,
				RD_PREF_REP,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL, 0,
				0 | RDR_RFLAG_DF | RDR_RFLAG_IOPL | RDR_RFLAG_VM,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_z, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_OUTS, RD_CAT_IOSTRINGOP, RD_SET_I86, 506,
				RD_PREF_REP,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL, 0,
				0 | RDR_RFLAG_DF | RDR_RFLAG_IOPL | RDR_RFLAG_VM,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_X, RD_OPS_z, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rSI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PABSB, RD_CAT_MMX, RD_SET_SSSE3, 507,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PABSB, RD_CAT_SSE, RD_SET_SSSE3, 507,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PABSD, RD_CAT_MMX, RD_SET_SSSE3, 508,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PABSD, RD_CAT_SSE, RD_SET_SSSE3, 508,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PABSW, RD_CAT_MMX, RD_SET_SSSE3, 509,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PABSW, RD_CAT_SSE, RD_SET_SSSE3, 509,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PACKSSDW, RD_CAT_MMX, RD_SET_MMX, 510,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PACKSSDW, RD_CAT_SSE, RD_SET_SSE2, 510,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PACKSSWB, RD_CAT_MMX, RD_SET_MMX, 511,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PACKSSWB, RD_CAT_SSE, RD_SET_SSE2, 511,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PACKUSDW, RD_CAT_SSE, RD_SET_SSE4, 512,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PACKUSWB, RD_CAT_MMX, RD_SET_MMX, 513,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PACKUSWB, RD_CAT_SSE, RD_SET_SSE2, 513,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PADDB, RD_CAT_MMX, RD_SET_MMX, 514,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PADDB, RD_CAT_SSE, RD_SET_SSE2, 514,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PADDD, RD_CAT_MMX, RD_SET_MMX, 515,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PADDD, RD_CAT_SSE, RD_SET_SSE2, 515,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PADDQ, RD_CAT_MMX, RD_SET_SSE2, 516,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PADDQ, RD_CAT_SSE, RD_SET_SSE2, 516,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PADDSB, RD_CAT_MMX, RD_SET_MMX, 517,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PADDSB, RD_CAT_SSE, RD_SET_SSE2, 517,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PADDSW, RD_CAT_MMX, RD_SET_MMX, 518,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PADDSW, RD_CAT_SSE, RD_SET_SSE2, 518,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PADDUSB, RD_CAT_MMX, RD_SET_MMX, 519,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PADDUSB, RD_CAT_SSE, RD_SET_SSE2, 519,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PADDUSW, RD_CAT_MMX, RD_SET_MMX, 520,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PADDUSW, RD_CAT_SSE, RD_SET_SSE2, 520,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PADDW, RD_CAT_MMX, RD_SET_MMX, 521,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PADDW, RD_CAT_SSE, RD_SET_SSE2, 521,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PALIGNR, RD_CAT_MMX, RD_SET_SSSE3, 522,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PALIGNR, RD_CAT_SSE, RD_SET_SSSE3, 522,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PAND, RD_CAT_LOGICAL, RD_SET_MMX, 523,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PAND, RD_CAT_LOGICAL, RD_SET_SSE2, 523,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PANDN, RD_CAT_LOGICAL, RD_SET_MMX, 524,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PANDN, RD_CAT_LOGICAL, RD_SET_SSE2, 524,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PAUSE, RD_CAT_MISC, RD_SET_PAUSE, 525,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_PAVGB, RD_CAT_MMX, RD_SET_MMX, 526,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PAVGB, RD_CAT_SSE, RD_SET_SSE2, 526,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PAVGUSB, RD_CAT_3DNOW, RD_SET_3DNOW, 527,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PAVGW, RD_CAT_MMX, RD_SET_MMX, 528,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PAVGW, RD_CAT_SSE, RD_SET_SSE2, 528,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PBLENDVB, RD_CAT_SSE, RD_SET_SSE4, 529,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SSE_XMM0, RD_OPS_dq, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PBLENDW, RD_CAT_SSE, RD_SET_SSE4, 530,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PBNDKB, RD_CAT_SYSTEM, RD_SET_TSE, 531,
				0,
				RD_MOD_R0 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_TSE,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_OF | RDR_RFLAG_SF, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rBX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PCLMULQDQ, RD_CAT_PCLMULQDQ, RD_SET_PCLMULQDQ, 532,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_PCLMULQDQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PCMPEQB, RD_CAT_MMX, RD_SET_MMX, 533,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PCMPEQB, RD_CAT_SSE, RD_SET_SSE2, 533,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PCMPEQD, RD_CAT_MMX, RD_SET_MMX, 534,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PCMPEQD, RD_CAT_SSE, RD_SET_SSE2, 534,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PCMPEQQ, RD_CAT_SSE, RD_SET_SSE4, 535,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PCMPEQW, RD_CAT_MMX, RD_SET_MMX, 536,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PCMPEQW, RD_CAT_SSE, RD_SET_SSE2, 536,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PCMPESTRI, RD_CAT_SSE, RD_SET_SSE42, 537,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 4), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE42,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_y, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_y, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_y, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PCMPESTRM, RD_CAT_SSE, RD_SET_SSE42, 538,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 4), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE42,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_y, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_y, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SSE_XMM0, RD_OPS_dq, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PCMPGTB, RD_CAT_MMX, RD_SET_MMX, 539,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PCMPGTB, RD_CAT_SSE, RD_SET_SSE2, 539,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PCMPGTD, RD_CAT_MMX, RD_SET_MMX, 540,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PCMPGTD, RD_CAT_SSE, RD_SET_SSE2, 540,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PCMPGTQ, RD_CAT_SSE, RD_SET_SSE42, 541,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE42,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PCMPGTW, RD_CAT_MMX, RD_SET_MMX, 542,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PCMPGTW, RD_CAT_SSE, RD_SET_SSE2, 542,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PCMPISTRI, RD_CAT_SSE, RD_SET_SSE42, 543,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 2), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE42,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_y, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PCMPISTRM, RD_CAT_SSE, RD_SET_SSE42, 544,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 2), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE42,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SSE_XMM0, RD_OPS_dq, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PCONFIG, RD_CAT_PCONFIG, RD_SET_PCONFIG, 545,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 5), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_PCONFIG,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_OF | RDR_RFLAG_SF, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rBX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PDEP, RD_CAT_BMI2, RD_SET_BMI2, 546,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_13, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_BMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PEXT, RD_CAT_BMI2, RD_SET_BMI2, 547,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_13, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_BMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PEXTRB, RD_CAT_SSE, RD_SET_SSE4, 548,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PEXTRB, RD_CAT_SSE, RD_SET_SSE4, 548,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_D64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PEXTRD, RD_CAT_SSE, RD_SET_SSE4, 549,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PEXTRD, RD_CAT_SSE, RD_SET_SSE4, 549,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_D64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PEXTRQ, RD_CAT_SSE, RD_SET_SSE4, 550,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PEXTRQ, RD_CAT_SSE, RD_SET_SSE4, 550,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PEXTRW, RD_CAT_MMX, RD_SET_MMX, 551,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_D64 | RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_N, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PEXTRW, RD_CAT_SSE, RD_SET_SSE2, 551,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_D64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PEXTRW, RD_CAT_SSE, RD_SET_SSE4, 551,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PEXTRW, RD_CAT_SSE, RD_SET_SSE4, 551,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_D64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PF2ID, RD_CAT_3DNOW, RD_SET_3DNOW, 552,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PF2IW, RD_CAT_3DNOW, RD_SET_3DNOW, 553,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PFACC, RD_CAT_3DNOW, RD_SET_3DNOW, 554,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PFADD, RD_CAT_3DNOW, RD_SET_3DNOW, 555,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PFCMPEQ, RD_CAT_3DNOW, RD_SET_3DNOW, 556,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PFCMPGE, RD_CAT_3DNOW, RD_SET_3DNOW, 557,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PFCMPGT, RD_CAT_3DNOW, RD_SET_3DNOW, 558,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PFMAX, RD_CAT_3DNOW, RD_SET_3DNOW, 559,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PFMIN, RD_CAT_3DNOW, RD_SET_3DNOW, 560,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PFMUL, RD_CAT_3DNOW, RD_SET_3DNOW, 561,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PFNACC, RD_CAT_3DNOW, RD_SET_3DNOW, 562,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PFPNACC, RD_CAT_3DNOW, RD_SET_3DNOW, 563,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PFRCP, RD_CAT_3DNOW, RD_SET_3DNOW, 564,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PFRCPIT1, RD_CAT_3DNOW, RD_SET_3DNOW, 565,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PFRCPIT2, RD_CAT_3DNOW, RD_SET_3DNOW, 566,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PFRCPV, RD_CAT_3DNOW, RD_SET_3DNOW, 567,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM | RD_FLAG_I64, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PFRSQIT1, RD_CAT_3DNOW, RD_SET_3DNOW, 568,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PFRSQRT, RD_CAT_3DNOW, RD_SET_3DNOW, 569,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PFRSQRTV, RD_CAT_3DNOW, RD_SET_3DNOW, 570,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM | RD_FLAG_I64, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PFSUB, RD_CAT_3DNOW, RD_SET_3DNOW, 571,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PFSUBR, RD_CAT_3DNOW, RD_SET_3DNOW, 572,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PHADDD, RD_CAT_MMX, RD_SET_SSSE3, 573,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PHADDD, RD_CAT_SSE, RD_SET_SSSE3, 573,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PHADDSW, RD_CAT_MMX, RD_SET_SSSE3, 574,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PHADDSW, RD_CAT_SSE, RD_SET_SSSE3, 574,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PHADDW, RD_CAT_MMX, RD_SET_SSSE3, 575,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PHADDW, RD_CAT_SSE, RD_SET_SSSE3, 575,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PHMINPOSUW, RD_CAT_SSE, RD_SET_SSE4, 576,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PHSUBD, RD_CAT_MMX, RD_SET_SSSE3, 577,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PHSUBD, RD_CAT_SSE, RD_SET_SSSE3, 577,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PHSUBSW, RD_CAT_MMX, RD_SET_SSSE3, 578,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PHSUBSW, RD_CAT_SSE, RD_SET_SSSE3, 578,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PHSUBW, RD_CAT_MMX, RD_SET_SSSE3, 579,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PHSUBW, RD_CAT_SSE, RD_SET_SSSE3, 579,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PI2FD, RD_CAT_3DNOW, RD_SET_3DNOW, 580,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PI2FW, RD_CAT_3DNOW, RD_SET_3DNOW, 581,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PINSRB, RD_CAT_SSE, RD_SET_SSE4, 582,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PINSRB, RD_CAT_SSE, RD_SET_SSE4, 582,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PINSRD, RD_CAT_SSE, RD_SET_SSE4, 583,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PINSRQ, RD_CAT_SSE, RD_SET_SSE4, 584,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PINSRW, RD_CAT_MMX, RD_SET_MMX, 585,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PINSRW, RD_CAT_MMX, RD_SET_MMX, 585,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PINSRW, RD_CAT_SSE, RD_SET_SSE2, 585,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PINSRW, RD_CAT_SSE, RD_SET_SSE2, 585,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMADDUBSW, RD_CAT_MMX, RD_SET_SSSE3, 586,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMADDUBSW, RD_CAT_SSE, RD_SET_SSSE3, 586,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMADDWD, RD_CAT_MMX, RD_SET_MMX, 587,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMADDWD, RD_CAT_SSE, RD_SET_SSE2, 587,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMAXSB, RD_CAT_SSE, RD_SET_SSE4, 588,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMAXSD, RD_CAT_SSE, RD_SET_SSE4, 589,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMAXSW, RD_CAT_MMX, RD_SET_MMX, 590,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMAXSW, RD_CAT_SSE, RD_SET_SSE2, 590,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMAXUB, RD_CAT_MMX, RD_SET_MMX, 591,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMAXUB, RD_CAT_SSE, RD_SET_SSE2, 591,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMAXUD, RD_CAT_SSE, RD_SET_SSE4, 592,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMAXUW, RD_CAT_SSE, RD_SET_SSE4, 593,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMINSB, RD_CAT_SSE, RD_SET_SSE4, 594,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMINSD, RD_CAT_SSE, RD_SET_SSE4, 595,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMINSW, RD_CAT_MMX, RD_SET_MMX, 596,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMINSW, RD_CAT_SSE, RD_SET_SSE2, 596,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMINUB, RD_CAT_MMX, RD_SET_MMX, 597,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMINUB, RD_CAT_SSE, RD_SET_SSE2, 597,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMINUD, RD_CAT_SSE, RD_SET_SSE4, 598,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMINUW, RD_CAT_SSE, RD_SET_SSE4, 599,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMOVMSKB, RD_CAT_MMX, RD_SET_SSE, 600,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_D64 | RD_FLAG_MODRM, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_N, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMOVMSKB, RD_CAT_SSE, RD_SET_SSE2, 600,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_D64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMOVSXBD, RD_CAT_SSE, RD_SET_SSE4, 601,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMOVSXBQ, RD_CAT_SSE, RD_SET_SSE4, 602,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMOVSXBW, RD_CAT_SSE, RD_SET_SSE4, 603,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMOVSXDQ, RD_CAT_SSE, RD_SET_SSE4, 604,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMOVSXWD, RD_CAT_SSE, RD_SET_SSE4, 605,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMOVSXWQ, RD_CAT_SSE, RD_SET_SSE4, 606,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMOVZXBD, RD_CAT_SSE, RD_SET_SSE4, 607,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMOVZXBQ, RD_CAT_SSE, RD_SET_SSE4, 608,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMOVZXBW, RD_CAT_SSE, RD_SET_SSE4, 609,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMOVZXDQ, RD_CAT_SSE, RD_SET_SSE4, 610,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMOVZXWD, RD_CAT_SSE, RD_SET_SSE4, 611,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMOVZXWQ, RD_CAT_SSE, RD_SET_SSE4, 612,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMULDQ, RD_CAT_SSE, RD_SET_SSE4, 613,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMULHRSW, RD_CAT_MMX, RD_SET_SSSE3, 614,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMULHRSW, RD_CAT_SSE, RD_SET_SSSE3, 614,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMULHRW, RD_CAT_3DNOW, RD_SET_3DNOW, 615,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMULHUW, RD_CAT_MMX, RD_SET_MMX, 616,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMULHUW, RD_CAT_SSE, RD_SET_SSE2, 616,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMULHW, RD_CAT_MMX, RD_SET_MMX, 617,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMULHW, RD_CAT_SSE, RD_SET_SSE2, 617,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMULLD, RD_CAT_SSE, RD_SET_SSE4, 618,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMULLW, RD_CAT_MMX, RD_SET_MMX, 619,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMULLW, RD_CAT_SSE, RD_SET_SSE2, 619,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMULUDQ, RD_CAT_MMX, RD_SET_SSE2, 620,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PMULUDQ, RD_CAT_SSE, RD_SET_SSE2, 620,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_POP, RD_CAT_POP, RD_SET_I86, 621,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_SEG_FS, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_POP, RD_CAT_POP, RD_SET_I86, 621,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_SEG_GS, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_POP, RD_CAT_POP, RD_SET_I86, 621,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_SEG_ES, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_POP, RD_CAT_POP, RD_SET_I86, 621,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_SEG_SS, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_POP, RD_CAT_POP, RD_SET_I86, 621,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_SEG_DS, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_POP, RD_CAT_POP, RD_SET_I86, 621,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_POP, RD_CAT_POP, RD_SET_I86, 621,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_POP, RD_CAT_POP, RD_SET_I86, 621,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_POP, RD_CAT_POP, RD_SET_I86, 621,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_POP, RD_CAT_POP, RD_SET_I86, 621,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_POP, RD_CAT_POP, RD_SET_I86, 621,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_POP, RD_CAT_POP, RD_SET_I86, 621,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_POP, RD_CAT_POP, RD_SET_I86, 621,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_POP, RD_CAT_POP, RD_SET_I86, 621,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64 | RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_POPA, RD_CAT_POP, RD_SET_I386, 622,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v8, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_POPAD, RD_CAT_POP, RD_SET_I386, 623,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v8, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_POPCNT, RD_CAT_SSE, RD_SET_POPCNT, 624,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_POPCNT,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_POPF, RD_CAT_POP, RD_SET_I86, 625,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_F, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_POPF, RD_CAT_POP, RD_SET_I86, 626,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_F, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_POPF, RD_CAT_POP, RD_SET_I86, 627,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_F, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_POR, RD_CAT_LOGICAL, RD_SET_MMX, 628,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_POR, RD_CAT_LOGICAL, RD_SET_SSE2, 628,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PREFETCH, RD_CAT_PREFETCH, RD_SET_PREFETCH_NOP, 629,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_P, 0, 0)
				}
			}, {
				RD_INS_PREFETCH, RD_CAT_PREFETCH, RD_SET_PREFETCH_NOP, 629,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_P, 0, 0)
				}
			}, {
				RD_INS_PREFETCH, RD_CAT_PREFETCH, RD_SET_PREFETCH_NOP, 629,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_P, 0, 0)
				}
			}, {
				RD_INS_PREFETCH, RD_CAT_PREFETCH, RD_SET_PREFETCH_NOP, 629,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_P, 0, 0)
				}
			}, {
				RD_INS_PREFETCHE, RD_CAT_PREFETCH, RD_SET_PREFETCH_NOP, 630,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_P, 0, 0)
				}
			}, {
				RD_INS_PREFETCHIT0, RD_CAT_PREFETCH, RD_SET_PREFETCHITI, 631,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_PREFETCHITI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_PREFETCHIT1, RD_CAT_PREFETCH, RD_SET_PREFETCHITI, 632,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_PREFETCHITI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_N, 0, 0)
				}
			}, {
				RD_INS_PREFETCHM, RD_CAT_PREFETCH, RD_SET_PREFETCH_NOP, 633,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_P, 0, 0)
				}
			}, {
				RD_INS_PREFETCHNTA, RD_CAT_PREFETCH, RD_SET_SSE, 634,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_P, 0, 0)
				}
			}, {
				RD_INS_PREFETCHNTA, RD_CAT_PREFETCH, RD_SET_SSE, 634,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_P, 0, 0)
				}
			}, {
				RD_INS_PREFETCHT0, RD_CAT_PREFETCH, RD_SET_SSE, 635,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_P, 0, 0)
				}
			}, {
				RD_INS_PREFETCHT0, RD_CAT_PREFETCH, RD_SET_SSE, 635,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_P, 0, 0)
				}
			}, {
				RD_INS_PREFETCHT1, RD_CAT_PREFETCH, RD_SET_SSE, 636,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_P, 0, 0)
				}
			}, {
				RD_INS_PREFETCHT1, RD_CAT_PREFETCH, RD_SET_SSE, 636,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_P, 0, 0)
				}
			}, {
				RD_INS_PREFETCHT2, RD_CAT_PREFETCH, RD_SET_SSE, 637,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_P, 0, 0)
				}
			}, {
				RD_INS_PREFETCHT2, RD_CAT_PREFETCH, RD_SET_SSE, 637,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_P, 0, 0)
				}
			}, {
				RD_INS_PREFETCHW, RD_CAT_PREFETCH, RD_SET_PREFETCH_NOP, 638,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_P, 0, 0)
				}
			}, {
				RD_INS_PREFETCHWT1, RD_CAT_PREFETCH, RD_SET_PREFETCH_NOP, 639,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_P, 0, 0)
				}
			}, {
				RD_INS_PSADBW, RD_CAT_MMX, RD_SET_MMX, 640,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSADBW, RD_CAT_SSE, RD_SET_SSE2, 640,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSHUFB, RD_CAT_MMX, RD_SET_SSSE3, 641,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSHUFB, RD_CAT_SSE, RD_SET_SSSE3, 641,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSHUFD, RD_CAT_SSE, RD_SET_SSE2, 642,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSHUFHW, RD_CAT_SSE, RD_SET_SSE2, 643,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSHUFLW, RD_CAT_SSE, RD_SET_SSE2, 644,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSHUFW, RD_CAT_MMX, RD_SET_MMX, 645,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSIGNB, RD_CAT_MMX, RD_SET_SSSE3, 646,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSIGNB, RD_CAT_SSE, RD_SET_SSSE3, 646,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSIGND, RD_CAT_MMX, RD_SET_SSSE3, 647,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSIGND, RD_CAT_SSE, RD_SET_SSSE3, 647,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSIGNW, RD_CAT_MMX, RD_SET_SSSE3, 648,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSIGNW, RD_CAT_SSE, RD_SET_SSSE3, 648,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSSE3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSLLD, RD_CAT_MMX, RD_SET_MMX, 649,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_N, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSLLD, RD_CAT_SSE, RD_SET_SSE2, 649,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSLLD, RD_CAT_MMX, RD_SET_MMX, 649,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSLLD, RD_CAT_SSE, RD_SET_SSE2, 649,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSLLDQ, RD_CAT_SSE, RD_SET_SSE2, 650,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSLLQ, RD_CAT_MMX, RD_SET_MMX, 651,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_N, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSLLQ, RD_CAT_SSE, RD_SET_SSE2, 651,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSLLQ, RD_CAT_MMX, RD_SET_MMX, 651,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSLLQ, RD_CAT_SSE, RD_SET_SSE2, 651,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSLLW, RD_CAT_MMX, RD_SET_MMX, 652,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_N, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSLLW, RD_CAT_SSE, RD_SET_SSE2, 652,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSLLW, RD_CAT_MMX, RD_SET_MMX, 652,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSLLW, RD_CAT_SSE, RD_SET_SSE2, 652,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSMASH, RD_CAT_SYSTEM, RD_SET_SNP, 653,
				0,
				RD_MOD_R0 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_SNP,
				0,
				0 | RDR_RFLAG_OF | RDR_RFLAG_ZF | RDR_RFLAG_AF | RDR_RFLAG_PF | RDR_RFLAG_SF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PSRAD, RD_CAT_MMX, RD_SET_MMX, 654,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_N, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSRAD, RD_CAT_SSE, RD_SET_SSE2, 654,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSRAD, RD_CAT_MMX, RD_SET_MMX, 654,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSRAD, RD_CAT_SSE, RD_SET_SSE2, 654,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSRAW, RD_CAT_MMX, RD_SET_MMX, 655,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_N, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSRAW, RD_CAT_SSE, RD_SET_SSE2, 655,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSRAW, RD_CAT_MMX, RD_SET_MMX, 655,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSRAW, RD_CAT_SSE, RD_SET_SSE2, 655,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSRLD, RD_CAT_MMX, RD_SET_MMX, 656,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_N, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSRLD, RD_CAT_SSE, RD_SET_SSE2, 656,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSRLD, RD_CAT_MMX, RD_SET_MMX, 656,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSRLD, RD_CAT_SSE, RD_SET_SSE2, 656,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSRLDQ, RD_CAT_SSE, RD_SET_SSE2, 657,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSRLQ, RD_CAT_MMX, RD_SET_MMX, 658,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_N, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSRLQ, RD_CAT_SSE, RD_SET_SSE2, 658,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSRLQ, RD_CAT_MMX, RD_SET_MMX, 658,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSRLQ, RD_CAT_SSE, RD_SET_SSE2, 658,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSRLW, RD_CAT_MMX, RD_SET_MMX, 659,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_N, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSRLW, RD_CAT_SSE, RD_SET_SSE2, 659,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSRLW, RD_CAT_MMX, RD_SET_MMX, 659,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSRLW, RD_CAT_SSE, RD_SET_SSE2, 659,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSUBB, RD_CAT_MMX, RD_SET_MMX, 660,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSUBB, RD_CAT_SSE, RD_SET_SSE2, 660,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSUBD, RD_CAT_MMX, RD_SET_MMX, 661,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSUBD, RD_CAT_SSE, RD_SET_SSE2, 661,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSUBQ, RD_CAT_MMX, RD_SET_MMX, 662,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSUBQ, RD_CAT_SSE, RD_SET_SSE2, 662,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSUBSB, RD_CAT_MMX, RD_SET_MMX, 663,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSUBSB, RD_CAT_SSE, RD_SET_SSE2, 663,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSUBSW, RD_CAT_MMX, RD_SET_MMX, 664,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSUBSW, RD_CAT_SSE, RD_SET_SSE2, 664,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSUBUSB, RD_CAT_MMX, RD_SET_MMX, 665,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSUBUSB, RD_CAT_SSE, RD_SET_SSE2, 665,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSUBUSW, RD_CAT_MMX, RD_SET_MMX, 666,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSUBUSW, RD_CAT_SSE, RD_SET_SSE2, 666,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSUBW, RD_CAT_MMX, RD_SET_MMX, 667,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSUBW, RD_CAT_SSE, RD_SET_SSE2, 667,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PSWAPD, RD_CAT_3DNOW, RD_SET_3DNOW, 668,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_3DNOW | RD_FLAG_MODRM, RD_CFF_3DNOW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PTEST, RD_CAT_SSE, RD_SET_SSE4, 669,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PTWRITE, RD_CAT_PTWRITE, RD_SET_PTWRITE, 670,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_NO66 | RD_FLAG_MODRM, RD_CFF_PTWRITE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PUNPCKHBW, RD_CAT_MMX, RD_SET_MMX, 671,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PUNPCKHBW, RD_CAT_SSE, RD_SET_SSE2, 671,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PUNPCKHDQ, RD_CAT_MMX, RD_SET_MMX, 672,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PUNPCKHDQ, RD_CAT_SSE, RD_SET_SSE2, 672,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PUNPCKHQDQ, RD_CAT_SSE, RD_SET_SSE2, 673,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PUNPCKHWD, RD_CAT_MMX, RD_SET_MMX, 674,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PUNPCKHWD, RD_CAT_SSE, RD_SET_SSE2, 674,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PUNPCKLBW, RD_CAT_MMX, RD_SET_MMX, 675,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PUNPCKLBW, RD_CAT_SSE, RD_SET_SSE2, 675,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PUNPCKLDQ, RD_CAT_MMX, RD_SET_MMX, 676,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PUNPCKLDQ, RD_CAT_SSE, RD_SET_SSE2, 676,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PUNPCKLQDQ, RD_CAT_SSE, RD_SET_SSE2, 677,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PUNPCKLWD, RD_CAT_MMX, RD_SET_MMX, 678,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PUNPCKLWD, RD_CAT_SSE, RD_SET_SSE2, 678,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PUSH, RD_CAT_PUSH, RD_SET_I86, 679,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_SEG_FS, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PUSH, RD_CAT_PUSH, RD_SET_I86, 679,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_SEG_GS, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PUSH, RD_CAT_PUSH, RD_SET_I86, 679,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_SEG_ES, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PUSH, RD_CAT_PUSH, RD_SET_I86, 679,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_SEG_CS, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PUSH, RD_CAT_PUSH, RD_SET_I86, 679,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_SEG_SS, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PUSH, RD_CAT_PUSH, RD_SET_I86, 679,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_SEG_DS, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PUSH, RD_CAT_PUSH, RD_SET_I86, 679,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PUSH, RD_CAT_PUSH, RD_SET_I86, 679,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PUSH, RD_CAT_PUSH, RD_SET_I86, 679,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PUSH, RD_CAT_PUSH, RD_SET_I86, 679,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PUSH, RD_CAT_PUSH, RD_SET_I86, 679,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PUSH, RD_CAT_PUSH, RD_SET_I86, 679,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PUSH, RD_CAT_PUSH, RD_SET_I86, 679,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PUSH, RD_CAT_PUSH, RD_SET_I86, 679,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PUSH, RD_CAT_PUSH, RD_SET_I86, 679,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_DWS, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PUSH, RD_CAT_PUSH, RD_SET_I86, 679,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_I, RD_OPS_b, RD_OPF_SEX_DWS, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PUSH, RD_CAT_PUSH, RD_SET_I86, 679,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64 | RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PUSHA, RD_CAT_PUSH, RD_SET_I386, 680,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v8, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PUSHAD, RD_CAT_PUSH, RD_SET_I386, 681,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_I64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v8, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PUSHF, RD_CAT_PUSH, RD_SET_I86, 682,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_F, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PUSHF, RD_CAT_PUSH, RD_SET_I86, 683,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_F, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PUSHF, RD_CAT_PUSH, RD_SET_I86, 684,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_D64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_F, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PVALIDATE, RD_CAT_SYSTEM, RD_SET_SNP, 685,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SNP,
				0,
				0 | RDR_RFLAG_OF | RDR_RFLAG_ZF | RDR_RFLAG_AF | RDR_RFLAG_PF | RDR_RFLAG_SF | RDR_RFLAG_CF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_PXOR, RD_CAT_LOGICAL, RD_SET_MMX, 686,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_MMX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_P, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_Q, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_PXOR, RD_CAT_LOGICAL, RD_SET_SSE2, 686,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RCL, RD_CAT_ROTATE, RD_SET_I86, 687,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_RCL, RD_CAT_ROTATE, RD_SET_I86, 687,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_RCL, RD_CAT_ROTATE, RD_SET_I86, 687,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_CONST_1, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_RCL, RD_CAT_ROTATE, RD_SET_I86, 687,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_CONST_1, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_RCL, RD_CAT_ROTATE, RD_SET_I86, 687,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_RCL, RD_CAT_ROTATE, RD_SET_I86, 687,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_RCPPS, RD_CAT_SSE, RD_SET_SSE, 688,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RCPSS, RD_CAT_SSE, RD_SET_SSE, 689,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RCR, RD_CAT_ROTATE, RD_SET_I86, 690,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_RCR, RD_CAT_ROTATE, RD_SET_I86, 690,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_RCR, RD_CAT_ROTATE, RD_SET_I86, 690,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_CONST_1, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_RCR, RD_CAT_ROTATE, RD_SET_I86, 690,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_CONST_1, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_RCR, RD_CAT_ROTATE, RD_SET_I86, 690,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_RCR, RD_CAT_ROTATE, RD_SET_I86, 690,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_RDFSBASE, RD_CAT_RDWRFSGS, RD_SET_RDWRFSGS, 691,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_RDWRFSGS,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_MSR_FSBASE, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RDGSBASE, RD_CAT_RDWRFSGS, RD_SET_RDWRFSGS, 692,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_RDWRFSGS,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_MSR_GSBASE, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RDMSR, RD_CAT_SYSTEM, RD_SET_PENTIUMREAL, 693,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 4), 0, 0, 0, 0, 0, 0, 0, RD_CFF_MSR,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MSR, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RDMSRLIST, RD_CAT_SYSTEM, RD_SET_MSRLIST, 694,
				0,
				RD_MOD_R0 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_MSRLIST,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_MEM_SMSRT, RD_OPS_4096, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MEM_DMSRT, RD_OPS_4096, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_RDPID, RD_CAT_RDPID, RD_SET_RDPID, 695,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_RDPID,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_yf, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_MSR_TSCAUX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RDPKRU, RD_CAT_MISC, RD_SET_PKU, 696,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_PKU,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_PKRU, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RDPMC, RD_CAT_SYSTEM, RD_SET_RDPMC, 697,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 4), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MSR, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RDPRU, RD_CAT_MISC, RD_SET_RDPRU, 698,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_RDPRU,
				0,
				0 | RDR_RFLAG_CF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_RDRAND, RD_CAT_RDRAND, RD_SET_RDRAND, 699,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_RDRAND,
				0,
				0 | RDR_RFLAG_CF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_RDRAND, RD_CAT_RDRAND, RD_SET_RDRAND, 699,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_S66 | RD_FLAG_MODRM, RD_CFF_RDRAND,
				0,
				0 | RDR_RFLAG_CF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_RDSEED, RD_CAT_RDSEED, RD_SET_RDSEED, 700,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_RDSEED,
				0,
				0 | RDR_RFLAG_CF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_RDSEED, RD_CAT_RDSEED, RD_SET_RDSEED, 700,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_S66 | RD_FLAG_MODRM, RD_CFF_RDSEED,
				0,
				0 | RDR_RFLAG_CF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_RDSHR, RD_CAT_SYSTEM, RD_SET_CYRIX, 701,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RSSSP, RD_CAT_CET, RD_SET_CET_SS, 702,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_CET_SS,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_SSP, RD_OPS_yf, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RSSSP, RD_CAT_CET, RD_SET_CET_SS, 703,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_CET_SS,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_SSP, RD_OPS_yf, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RDTSC, RD_CAT_SYSTEM, RD_SET_PENTIUMREAL, 704,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_MSR_TSC, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RDTSCP, RD_CAT_SYSTEM, RD_SET_RDTSCP, 705,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 5), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_RDTSCP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_MSR_TSC, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MSR_TSCAUX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RETF, RD_CAT_RET, RD_SET_I86, 706,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 4), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_I, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SEG_CS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v2, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MEM_SHSP, RD_OPS_v2, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RETF, RD_CAT_RET, RD_SET_I86, 706,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 4), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_SEG_CS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v2, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MEM_SHSP, RD_OPS_v2, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RETN, RD_CAT_RET, RD_SET_I86, 707,
				RD_PREF_BND,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_F64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_I, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rSP, RD_OPS_ssz, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MEM_SHSP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RETN, RD_CAT_RET, RD_SET_I86, 707,
				RD_PREF_BND,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_F64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MEM_SHSP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RMPADJUST, RD_CAT_SYSTEM, RD_SET_SNP, 708,
				0,
				RD_MOD_R0 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 5), 0, 0, 0, 0, 0, 0, RD_FLAG_I67 | RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_SNP,
				0,
				0 | RDR_RFLAG_OF | RDR_RFLAG_ZF | RDR_RFLAG_AF | RDR_RFLAG_PF | RDR_RFLAG_SF,
				0,
				0, {
					RD_OP(RD_OPT_MEM_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_RMPQUERY, RD_CAT_SYSTEM, RD_SET_SNP, 709,
				0,
				RD_MOD_R0 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 5), 0, 0, 0, 0, 0, 0, RD_FLAG_I67 | RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_RMPQUERY,
				0,
				0 | RDR_RFLAG_OF | RDR_RFLAG_ZF | RDR_RFLAG_AF | RDR_RFLAG_PF | RDR_RFLAG_SF,
				0,
				0, {
					RD_OP(RD_OPT_MEM_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_RMPUPDATE, RD_CAT_SYSTEM, RD_SET_SNP, 710,
				0,
				RD_MOD_R0 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_I67 | RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_SNP,
				0,
				0 | RDR_RFLAG_OF | RDR_RFLAG_ZF | RDR_RFLAG_AF | RDR_RFLAG_PF | RDR_RFLAG_SF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_MEM_rCX, RD_OPS_dq, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ROL, RD_CAT_ROTATE, RD_SET_I86, 711,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ROL, RD_CAT_ROTATE, RD_SET_I86, 711,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ROL, RD_CAT_ROTATE, RD_SET_I86, 711,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_CONST_1, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ROL, RD_CAT_ROTATE, RD_SET_I86, 711,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_CONST_1, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ROL, RD_CAT_ROTATE, RD_SET_I86, 711,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ROL, RD_CAT_ROTATE, RD_SET_I86, 711,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ROR, RD_CAT_ROTATE, RD_SET_I86, 712,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ROR, RD_CAT_ROTATE, RD_SET_I86, 712,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ROR, RD_CAT_ROTATE, RD_SET_I86, 712,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_CONST_1, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ROR, RD_CAT_ROTATE, RD_SET_I86, 712,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_CONST_1, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ROR, RD_CAT_ROTATE, RD_SET_I86, 712,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_ROR, RD_CAT_ROTATE, RD_SET_I86, 712,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_RORX, RD_CAT_BMI2, RD_SET_BMI2, 713,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_13, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_BMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_ROUNDPD, RD_CAT_SSE, RD_SET_SSE4, 714,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_ROUNDPS, RD_CAT_SSE, RD_SET_SSE4, 715,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_ROUNDSD, RD_CAT_SSE, RD_SET_SSE4, 716,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_ROUNDSS, RD_CAT_SSE, RD_SET_SSE4, 717,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RSDC, RD_CAT_SEGOP, RD_SET_CYRIX_SMM, 718,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_S, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_s, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RSLDT, RD_CAT_SEGOP, RD_SET_CYRIX_SMM, 719,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_s, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RSM, RD_CAT_SYSRET, RD_SET_I486, 720,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_SEG_CS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_RSQRTPS, RD_CAT_SSE, RD_SET_SSE, 721,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RSQRTSS, RD_CAT_SSE, RD_SET_SSE, 722,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_RSTORSSP, RD_CAT_CET, RD_SET_CET_SS, 723,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_SHS | RD_FLAG_MODRM, RD_CFF_CET_SS,
				0,
				0 | RDR_RFLAG_CF,
				0,
				0 | RDR_RFLAG_ZF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_OF | RDR_RFLAG_SF, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_SSP, RD_OPS_yf, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_RSTS, RD_CAT_SEGOP, RD_SET_CYRIX_SMM, 724,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_s, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SAHF, RD_CAT_FLAGOP, RD_SET_I86, 725,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_AH, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SAL, RD_CAT_SHIFT, RD_SET_I86, 726,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SAL, RD_CAT_SHIFT, RD_SET_I86, 726,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SAL, RD_CAT_SHIFT, RD_SET_I86, 726,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_CONST_1, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SAL, RD_CAT_SHIFT, RD_SET_I86, 726,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_CONST_1, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SAL, RD_CAT_SHIFT, RD_SET_I86, 726,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SAL, RD_CAT_SHIFT, RD_SET_I86, 726,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SALC, RD_CAT_FLAGOP, RD_SET_I86, 727,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_CF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SAR, RD_CAT_SHIFT, RD_SET_I86, 728,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SAR, RD_CAT_SHIFT, RD_SET_I86, 728,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SAR, RD_CAT_SHIFT, RD_SET_I86, 728,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_CONST_1, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SAR, RD_CAT_SHIFT, RD_SET_I86, 728,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_CONST_1, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SAR, RD_CAT_SHIFT, RD_SET_I86, 728,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SAR, RD_CAT_SHIFT, RD_SET_I86, 728,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SARX, RD_CAT_BMI2, RD_SET_BMI2, 729,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_13, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_BMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SAVEPREVSSP, RD_CAT_CET, RD_SET_CET_SS, 730,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_CET_SS,
				0 | RDR_RFLAG_CF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_MEM_SHS, RD_OPS_12, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_SSP, RD_OPS_yf, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SBB, RD_CAT_ARITH, RD_SET_I86, 731,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SBB, RD_CAT_ARITH, RD_SET_I86, 731,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SBB, RD_CAT_ARITH, RD_SET_I86, 731,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SBB, RD_CAT_ARITH, RD_SET_I86, 731,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SBB, RD_CAT_ARITH, RD_SET_I86, 731,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SBB, RD_CAT_ARITH, RD_SET_I86, 731,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SBB, RD_CAT_ARITH, RD_SET_I86, 731,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SBB, RD_CAT_ARITH, RD_SET_I86, 731,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SBB, RD_CAT_ARITH, RD_SET_I86, 731,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_I64, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SBB, RD_CAT_ARITH, RD_SET_I86, 731,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SCAS, RD_CAT_STRINGOP, RD_SET_I86, 732,
				RD_PREF_REPC,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_Y, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SCAS, RD_CAT_STRINGOP, RD_SET_I86, 732,
				RD_PREF_REPC,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_ZF | RDR_RFLAG_DF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_Y, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SCAS, RD_CAT_STRINGOP, RD_SET_I86, 733,
				RD_PREF_REPC,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SCAS, RD_CAT_STRINGOP, RD_SET_I86, 733,
				RD_PREF_REPC,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_ZF | RDR_RFLAG_DF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SCAS, RD_CAT_STRINGOP, RD_SET_I86, 734,
				RD_PREF_REPC,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SCAS, RD_CAT_STRINGOP, RD_SET_I86, 734,
				RD_PREF_REPC,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_ZF | RDR_RFLAG_DF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SCAS, RD_CAT_STRINGOP, RD_SET_I86, 735,
				RD_PREF_REPC,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SCAS, RD_CAT_STRINGOP, RD_SET_I86, 735,
				RD_PREF_REPC,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_ZF | RDR_RFLAG_DF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CR, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SEAMCALL, RD_CAT_TDX, RD_SET_TDX, 736,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXN_SEAM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SEAMOPS, RD_CAT_TDX, RD_SET_TDX, 737,
				0,
				RD_MOD_R0 | RD_MOD_LONG | RD_MOD_VMXR_SEAM | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 5), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rR8, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rR9, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SEAMRET, RD_CAT_TDX, RD_SET_TDX, 738,
				0,
				RD_MOD_R0 | RD_MOD_LONG | RD_MOD_VMXR_SEAM | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					0
				},
			}, {
				RD_INS_SENDUIPI, RD_CAT_UINTR, RD_SET_UINTR, 739,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_UINTR,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_q, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SERIALIZE, RD_CAT_MISC, RD_SET_SERIALIZE, 740,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL | RD_FLAG_MODRM, RD_CFF_SERIALIZE,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_SETcc, RD_CAT_BITBYTE, RD_SET_I386, 741,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SETcc, RD_CAT_BITBYTE, RD_SET_I386, 742,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SETcc, RD_CAT_BITBYTE, RD_SET_I386, 743,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SETcc, RD_CAT_BITBYTE, RD_SET_I386, 744,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_SF | RDR_RFLAG_ZF | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SETcc, RD_CAT_BITBYTE, RD_SET_I386, 745,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SETcc, RD_CAT_BITBYTE, RD_SET_I386, 746,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_CF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SETcc, RD_CAT_BITBYTE, RD_SET_I386, 747,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SETcc, RD_CAT_BITBYTE, RD_SET_I386, 748,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_SF | RDR_RFLAG_ZF | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SETcc, RD_CAT_BITBYTE, RD_SET_I386, 749,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SETcc, RD_CAT_BITBYTE, RD_SET_I386, 750,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_PF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SETcc, RD_CAT_BITBYTE, RD_SET_I386, 751,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_SF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SETcc, RD_CAT_BITBYTE, RD_SET_I386, 752,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SETcc, RD_CAT_BITBYTE, RD_SET_I386, 753,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_OF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SETcc, RD_CAT_BITBYTE, RD_SET_I386, 754,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_PF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SETcc, RD_CAT_BITBYTE, RD_SET_I386, 755,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_SF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SETSSBSY, RD_CAT_CET, RD_SET_CET_SS, 756,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_SHS | RD_FLAG_MODRM, RD_CFF_CET_SS,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_MEM_SHS0, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_SSP, RD_OPS_yf, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SETcc, RD_CAT_BITBYTE, RD_SET_I386, 757,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_COND | RD_FLAG_MODRM, 0,
				0 | RDR_RFLAG_ZF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SFENCE, RD_CAT_MISC, RD_SET_SSE2, 758,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_SGDT, RD_CAT_SYSTEM, RD_SET_I286REAL, 759,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_s, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_SYS_GDTR, RD_OPS_s, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SHA1MSG1, RD_CAT_SHA, RD_SET_SHA, 760,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SHA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SHA1MSG2, RD_CAT_SHA, RD_SET_SHA, 761,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SHA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SHA1NEXTE, RD_CAT_SHA, RD_SET_SHA, 762,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SHA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SHA1RNDS4, RD_CAT_SHA, RD_SET_SHA, 763,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SHA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SHA256MSG1, RD_CAT_SHA, RD_SET_SHA, 764,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SHA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SHA256MSG2, RD_CAT_SHA, RD_SET_SHA, 765,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SHA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SHA256RNDS2, RD_CAT_SHA, RD_SET_SHA, 766,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SHA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SSE_XMM0, RD_OPS_dq, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SHL, RD_CAT_SHIFT, RD_SET_I86, 767,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SHL, RD_CAT_SHIFT, RD_SET_I86, 767,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SHL, RD_CAT_SHIFT, RD_SET_I86, 767,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_CONST_1, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SHL, RD_CAT_SHIFT, RD_SET_I86, 767,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_CONST_1, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SHL, RD_CAT_SHIFT, RD_SET_I86, 767,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SHL, RD_CAT_SHIFT, RD_SET_I86, 767,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SHLD, RD_CAT_SHIFT, RD_SET_I386, 768,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_AF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_AF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SHLD, RD_CAT_SHIFT, RD_SET_I386, 768,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_AF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_AF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SHLX, RD_CAT_BMI2, RD_SET_BMI2, 769,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_13, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_BMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SHR, RD_CAT_SHIFT, RD_SET_I86, 770,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SHR, RD_CAT_SHIFT, RD_SET_I86, 770,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SHR, RD_CAT_SHIFT, RD_SET_I86, 770,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_CONST_1, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SHR, RD_CAT_SHIFT, RD_SET_I86, 770,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_CONST_1, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SHR, RD_CAT_SHIFT, RD_SET_I86, 770,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SHR, RD_CAT_SHIFT, RD_SET_I86, 770,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SHRD, RD_CAT_SHIFT, RD_SET_I386, 771,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_AF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_AF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SHRD, RD_CAT_SHIFT, RD_SET_I386, 771,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_AF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_AF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SHRX, RD_CAT_BMI2, RD_SET_BMI2, 772,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_13, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_BMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SHUFPD, RD_CAT_SSE, RD_SET_SSE2, 773,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SHUFPS, RD_CAT_SSE, RD_SET_SSE, 774,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SIDT, RD_CAT_SYSTEM, RD_SET_I286REAL, 775,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_s, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_SYS_IDTR, RD_OPS_s, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SKINIT, RD_CAT_SYSTEM, RD_SET_SVM, 776,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXR_SEAM | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF | RD_MOD_SMM_OFF,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SVM,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SLDT, RD_CAT_SYSTEM, RD_SET_I286PROT, 777,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_SYS_LDTR, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SLDT, RD_CAT_SYSTEM, RD_SET_I286PROT, 777,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_SYS_LDTR, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SLWPCB, RD_CAT_LWP, RD_SET_LWP, 778,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_LWP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SMINT, RD_CAT_SEGOP, RD_SET_CYRIX_SMM, 779,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_SMSW, RD_CAT_SYSTEM, RD_SET_I286REAL, 780,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_CR_0, RD_OPS_yf, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SMSW, RD_CAT_SYSTEM, RD_SET_I286REAL, 780,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_CR_0, RD_OPS_yf, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SPFLT, RD_CAT_UNKNOWN, RD_SET_UNKNOWN, 781,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SQRTPD, RD_CAT_SSE, RD_SET_SSE2, 782,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SQRTPS, RD_CAT_SSE, RD_SET_SSE, 783,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SQRTSD, RD_CAT_SSE, RD_SET_SSE2, 784,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SQRTSS, RD_CAT_SSE, RD_SET_SSE, 785,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_STAC, RD_CAT_SMAP, RD_SET_SMAP, 786,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SMAP,
				0,
				0,
				0 | RDR_RFLAG_AC,
				0, {
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_STC, RD_CAT_FLAGOP, RD_SET_I86, 787,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0 | RDR_RFLAG_CF,
				0, {
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_STD, RD_CAT_FLAGOP, RD_SET_I86, 788,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0 | RDR_RFLAG_DF,
				0, {
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_STGI, RD_CAT_SYSTEM, RD_SET_SVM, 789,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXR_SEAM | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF | RD_MOD_SMM_OFF,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SVM,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_STI, RD_CAT_FLAGOP, RD_SET_I86, 790,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0 | RDR_RFLAG_IF,
				0, {
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_STMXCSR, RD_CAT_SSE, RD_SET_SSE, 791,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_MXCSR, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_STOS, RD_CAT_STRINGOP, RD_SET_I86, 792,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_STOS, RD_CAT_STRINGOP, RD_SET_I86, 792,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_STOS, RD_CAT_STRINGOP, RD_SET_I86, 793,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_STOS, RD_CAT_STRINGOP, RD_SET_I86, 793,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_STOS, RD_CAT_STRINGOP, RD_SET_I86, 794,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_STOS, RD_CAT_STRINGOP, RD_SET_I86, 794,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_STOS, RD_CAT_STRINGOP, RD_SET_I86, 795,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_STOS, RD_CAT_STRINGOP, RD_SET_I86, 795,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 3), 0, 0, 0, 0, 0, 0, 0, 0,
				0 | RDR_RFLAG_DF,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Y, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_CW, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rDI, RD_OPS_asz, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_STR, RD_CAT_SYSTEM, RD_SET_I286PROT, 796,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_SYS_TR, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_STR, RD_CAT_SYSTEM, RD_SET_I286PROT, 796,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_SYS_TR, RD_OPS_w, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_STTILECFG, RD_CAT_AMX, RD_SET_AMXTILE, 797,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 0), 0, RD_EXT_AMX_E2, RD_EXC_AMX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_AMXTILE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_oq, 0, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_STUI, RD_CAT_UINTR, RD_SET_UINTR, 798,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_UINTR,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_UIF, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SUB, RD_CAT_ARITH, RD_SET_I86, 799,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SUB, RD_CAT_ARITH, RD_SET_I86, 799,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SUB, RD_CAT_ARITH, RD_SET_I86, 799,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SUB, RD_CAT_ARITH, RD_SET_I86, 799,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SUB, RD_CAT_ARITH, RD_SET_I86, 799,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SUB, RD_CAT_ARITH, RD_SET_I86, 799,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SUB, RD_CAT_ARITH, RD_SET_I86, 799,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SUB, RD_CAT_ARITH, RD_SET_I86, 799,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SUB, RD_CAT_ARITH, RD_SET_I86, 799,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SUB, RD_CAT_ARITH, RD_SET_I86, 799,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SUBPD, RD_CAT_SSE, RD_SET_SSE2, 800,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SUBPS, RD_CAT_SSE, RD_SET_SSE, 801,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SUBSD, RD_CAT_SSE, RD_SET_SSE2, 802,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SUBSS, RD_CAT_SSE, RD_SET_SSE, 803,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SVDC, RD_CAT_SEGOP, RD_SET_CYRIX_SMM, 804,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_s, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_S, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_SVLDT, RD_CAT_SEGOP, RD_SET_CYRIX_SMM, 805,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_s, 0, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SVTS, RD_CAT_SEGOP, RD_SET_CYRIX_SMM, 806,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_s, 0, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SWAPGS, RD_CAT_SYSTEM, RD_SET_LONGMODE, 807,
				0,
				RD_MOD_R0 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_MSR_GSBASE, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_MSR_KGSBASE, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SYSCALL, RD_CAT_SYSCALL, RD_SET_AMD, 808,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 10), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_CETT, RD_CFF_FSC,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_MSR_STAR, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MSR_LSTAR, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MSR_FMASK, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SEG_SS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rR11, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_SEG_CS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_SSP, RD_OPS_yf, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SYSENTER, RD_CAT_SYSCALL, RD_SET_PPRO, 809,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 9), 0, 0, 0, 0, 0, 0, RD_FLAG_CETT, RD_CFF_SEP,
				0,
				0,
				0,
				0 | RDR_RFLAG_IF, {
					RD_OP(RD_OPT_MSR_SCS, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MSR_SESP, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MSR_SEIP, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SEG_SS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rSP, RD_OPS_ssz, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_SEG_CS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_SSP, RD_OPS_yf, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_SYSEXIT, RD_CAT_SYSRET, RD_SET_PPRO, 810,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 5), 0, 0, 0, 0, 0, 0, RD_FLAG_F64, RD_CFF_SEP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_SEG_SS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rSP, RD_OPS_ssz, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_SEG_CS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_SSP, RD_OPS_yf, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_SYSRET, RD_CAT_SYSRET, RD_SET_AMD, 811,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 8), 0, 0, 0, 0, 0, 0, 0, RD_CFF_FSC,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_MSR_STAR, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SEG_SS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rR11, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SEG_CS, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_SSP, RD_OPS_yf, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_T1MSKC, RD_CAT_BITBYTE, RD_SET_TBM, 812,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_TBM,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_TCMMIMFP16PS, RD_CAT_AMX, RD_SET_AMXCOMPLEX, 813,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_AMX_E4, RD_EXC_AMX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_AMXCOMPLEX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rT, RD_OPS_t, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_mT, RD_OPS_t, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_vT, RD_OPS_t, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_TCMMRLFP16PS, RD_CAT_AMX, RD_SET_AMXCOMPLEX, 814,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_AMX_E4, RD_EXC_AMX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_AMXCOMPLEX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rT, RD_OPS_t, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_mT, RD_OPS_t, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_vT, RD_OPS_t, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_TDCALL, RD_CAT_TDX, RD_SET_TDX, 815,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXN | RD_MOD_VMXN_SEAM | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_TDPBF16PS, RD_CAT_AMX, RD_SET_AMXBF16, 816,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_AMX_E4, RD_EXC_AMX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_AMXBF16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rT, RD_OPS_t, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_mT, RD_OPS_t, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_vT, RD_OPS_t, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_TDPBSSD, RD_CAT_AMX, RD_SET_AMXINT8, 817,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_AMX_E4, RD_EXC_AMX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_AMXINT8,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rT, RD_OPS_t, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_mT, RD_OPS_t, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_vT, RD_OPS_t, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_TDPBSUD, RD_CAT_AMX, RD_SET_AMXINT8, 818,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_AMX_E4, RD_EXC_AMX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_AMXINT8,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rT, RD_OPS_t, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_mT, RD_OPS_t, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_vT, RD_OPS_t, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_TDPBUSD, RD_CAT_AMX, RD_SET_AMXINT8, 819,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_AMX_E4, RD_EXC_AMX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_AMXINT8,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rT, RD_OPS_t, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_mT, RD_OPS_t, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_vT, RD_OPS_t, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_TDPBUUD, RD_CAT_AMX, RD_SET_AMXINT8, 820,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_AMX_E4, RD_EXC_AMX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_AMXINT8,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rT, RD_OPS_t, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_mT, RD_OPS_t, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_vT, RD_OPS_t, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_TDPFP16PS, RD_CAT_AMX, RD_SET_AMXFP16, 821,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_AMX_E4, RD_EXC_AMX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_AMXFP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rT, RD_OPS_t, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_mT, RD_OPS_t, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_vT, RD_OPS_t, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_TEST, RD_CAT_LOGIC, RD_SET_I86, 822,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_TEST, RD_CAT_LOGIC, RD_SET_I86, 822,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_TEST, RD_CAT_LOGIC, RD_SET_I86, 822,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_TEST, RD_CAT_LOGIC, RD_SET_I86, 822,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_TEST, RD_CAT_LOGIC, RD_SET_I86, 822,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_TEST, RD_CAT_LOGIC, RD_SET_I86, 822,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_TEST, RD_CAT_LOGIC, RD_SET_I86, 822,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_TEST, RD_CAT_LOGIC, RD_SET_I86, 822,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_TESTUI, RD_CAT_UINTR, RD_SET_UINTR, 823,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_UINTR,
				0,
				0 | RDR_RFLAG_CF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_UIF, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_TILELOADD, RD_CAT_AMX, RD_SET_AMXTILE, 824,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_AMX_E3, RD_EXC_AMX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_SIBMEM | RD_FLAG_O64, RD_CFF_AMXTILE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rT, RD_OPS_t, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_t, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_TILELOADDT1, RD_CAT_AMX, RD_SET_AMXTILE, 825,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_AMX_E3, RD_EXC_AMX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_SIBMEM | RD_FLAG_O64, RD_CFF_AMXTILE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rT, RD_OPS_t, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_t, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_TILERELEASE, RD_CAT_AMX, RD_SET_AMXTILE, 826,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 0), 0, RD_EXT_AMX_E6, RD_EXC_AMX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_AMXTILE,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_TILESTORED, RD_CAT_AMX, RD_SET_AMXTILE, 827,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_AMX_E3, RD_EXC_AMX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_SIBMEM | RD_FLAG_O64, RD_CFF_AMXTILE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_t, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_rT, RD_OPS_t, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_TILEZERO, RD_CAT_AMX, RD_SET_AMXTILE, 828,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 0), 0, RD_EXT_AMX_E5, RD_EXC_AMX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_AMXTILE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rT, RD_OPS_t, 0, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_TLBSYNC, RD_CAT_SYSTEM, RD_SET_INVLPGB, 829,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_INVLPGB,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_TPAUSE, RD_CAT_WAITPKG, RD_SET_WAITPKG, 830,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_WAITPKG,
				0,
				0 | RDR_RFLAG_CF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_TZCNT, RD_CAT_BMI1, RD_SET_BMI1, 831,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_BMI1,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_TZMSK, RD_CAT_BITBYTE, RD_SET_TBM, 832,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_TBM,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_B, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_UCOMISD, RD_CAT_SSE2, RD_SET_SSE2, 833,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_UCOMISS, RD_CAT_SSE, RD_SET_SSE, 834,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_UD0, RD_CAT_UD, RD_SET_UD, 835,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_UD1, RD_CAT_UD, RD_SET_UD, 836,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_UD2, RD_CAT_MISC, RD_SET_PPRO, 837,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_UIRET, RD_CAT_RET, RD_SET_UINTR, 838,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 6), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_UINTR,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_RIP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rSP, RD_OPS_ssz, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_UIF, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_K, RD_OPS_v3, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MEM_SHSP, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_UMONITOR, RD_CAT_WAITPKG, RD_SET_WAITPKG, 839,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_WAITPKG,
				0,
				0 | RDR_RFLAG_CF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_mM, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_UMWAIT, RD_CAT_WAITPKG, RD_SET_WAITPKG, 840,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_WAITPKG,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_UNPCKHPD, RD_CAT_SSE, RD_SET_SSE2, 841,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_UNPCKHPS, RD_CAT_SSE, RD_SET_SSE, 842,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_UNPCKLPD, RD_CAT_SSE, RD_SET_SSE2, 843,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_UNPCKLPS, RD_CAT_SSE, RD_SET_SSE, 844,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_V4FMADDPS, RD_CAT_VFMAPS, RD_SET_AVX5124FMAPS, 845,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T1_4X, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX5124FMAPS,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_oq, 0, RD_OPA_R, 0, 4),
					RD_OP(RD_OPT_M, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_V4FMADDSS, RD_CAT_VFMAPS, RD_SET_AVX5124FMAPS, 846,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T1_4X, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX5124FMAPS,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 4),
					RD_OP(RD_OPT_M, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_V4FNMADDPS, RD_CAT_VFMAPS, RD_SET_AVX5124FMAPS, 847,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T1_4X, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX5124FMAPS,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_oq, 0, RD_OPA_R, 0, 4),
					RD_OP(RD_OPT_M, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_V4FNMADDSS, RD_CAT_VFMAPS, RD_SET_AVX5124FMAPS, 848,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T1_4X, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX5124FMAPS,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 4),
					RD_OP(RD_OPT_M, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VADDPD, RD_CAT_AVX512, RD_SET_AVX512F, 849,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VADDPD, RD_CAT_AVX, RD_SET_AVX, 849,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_pd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VADDPH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 850,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VADDPS, RD_CAT_AVX512, RD_SET_AVX512F, 851,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VADDPS, RD_CAT_AVX, RD_SET_AVX, 851,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ps, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VADDSD, RD_CAT_AVX512, RD_SET_AVX512F, 852,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VADDSD, RD_CAT_AVX, RD_SET_AVX, 852,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VADDSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 853,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VADDSS, RD_CAT_AVX512, RD_SET_AVX512F, 854,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VADDSS, RD_CAT_AVX, RD_SET_AVX, 854,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VADDSUBPD, RD_CAT_AVX, RD_SET_AVX, 855,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_pd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VADDSUBPS, RD_CAT_AVX, RD_SET_AVX, 856,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ps, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VAESDEC, RD_CAT_VAES, RD_SET_VAES, 857,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_VAES,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VAESDEC, RD_CAT_AES, RD_SET_AES, 857,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AES,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VAESDECLAST, RD_CAT_VAES, RD_SET_VAES, 858,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_VAES,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VAESDECLAST, RD_CAT_AES, RD_SET_AES, 858,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AES,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VAESENC, RD_CAT_VAES, RD_SET_VAES, 859,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_VAES,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VAESENC, RD_CAT_AES, RD_SET_AES, 859,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AES,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VAESENCLAST, RD_CAT_VAES, RD_SET_VAES, 860,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_VAES,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VAESENCLAST, RD_CAT_AES, RD_SET_AES, 860,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AES,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VAESIMC, RD_CAT_AES, RD_SET_AES, 861,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AES,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VAESKEYGENASSIST, RD_CAT_AES, RD_SET_AES, 862,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AES,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VALIGND, RD_CAT_AVX512, RD_SET_AVX512F, 863,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VALIGNQ, RD_CAT_AVX512, RD_SET_AVX512F, 864,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VANDNPD, RD_CAT_LOGICAL_FP, RD_SET_AVX512DQ, 865,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VANDNPD, RD_CAT_LOGICAL_FP, RD_SET_AVX, 865,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_pd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VANDNPS, RD_CAT_LOGICAL_FP, RD_SET_AVX512DQ, 866,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VANDNPS, RD_CAT_LOGICAL_FP, RD_SET_AVX, 866,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ps, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VANDPD, RD_CAT_LOGICAL_FP, RD_SET_AVX512DQ, 867,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VANDPD, RD_CAT_LOGICAL_FP, RD_SET_AVX, 867,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_pd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VANDPS, RD_CAT_LOGICAL_FP, RD_SET_AVX512DQ, 868,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VANDPS, RD_CAT_LOGICAL_FP, RD_SET_AVX, 868,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ps, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBCSTNEBF162PS, RD_CAT_AVXNECONVERT, RD_SET_AVXNECONVERT, 869,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXNECONVERT,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBCSTNESH2PS, RD_CAT_AVXNECONVERT, RD_SET_AVXNECONVERT, 870,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXNECONVERT,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBLENDMPD, RD_CAT_BLEND, RD_SET_AVX512F, 871,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VBLENDMPS, RD_CAT_BLEND, RD_SET_AVX512F, 872,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VBLENDPD, RD_CAT_AVX, RD_SET_AVX, 873,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBLENDPS, RD_CAT_AVX, RD_SET_AVX, 874,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBLENDVPD, RD_CAT_AVX, RD_SET_AVX, 875,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBLENDVPS, RD_CAT_AVX, RD_SET_AVX, 876,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBROADCASTF128, RD_CAT_BROADCAST, RD_SET_AVX, 877,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBROADCASTF32X2, RD_CAT_BROADCAST, RD_SET_AVX512DQ, 878,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T2, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBROADCASTF32X4, RD_CAT_BROADCAST, RD_SET_AVX512F, 879,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T4, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBROADCASTF32X8, RD_CAT_BROADCAST, RD_SET_AVX512DQ, 880,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T8, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_qq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBROADCASTF64X2, RD_CAT_BROADCAST, RD_SET_AVX512DQ, 881,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T2, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBROADCASTF64X4, RD_CAT_BROADCAST, RD_SET_AVX512F, 882,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T4, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_qq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBROADCASTI128, RD_CAT_BROADCAST, RD_SET_AVX2, 883,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBROADCASTI32X2, RD_CAT_BROADCAST, RD_SET_AVX512DQ, 884,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T2, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBROADCASTI32X4, RD_CAT_BROADCAST, RD_SET_AVX512F, 885,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T4, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBROADCASTI32X8, RD_CAT_BROADCAST, RD_SET_AVX512DQ, 886,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T8, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_qq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBROADCASTI64X2, RD_CAT_BROADCAST, RD_SET_AVX512DQ, 887,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T2, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBROADCASTI64X4, RD_CAT_BROADCAST, RD_SET_AVX512F, 888,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T4, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_qq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBROADCASTSD, RD_CAT_BROADCAST, RD_SET_AVX512F, 889,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBROADCASTSD, RD_CAT_BROADCAST, RD_SET_AVX, 889,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBROADCASTSS, RD_CAT_BROADCAST, RD_SET_AVX512F, 890,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VBROADCASTSS, RD_CAT_BROADCAST, RD_SET_AVX, 890,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCMPPD, RD_CAT_AVX512, RD_SET_AVX512F, 891,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCMPPD, RD_CAT_AVX, RD_SET_AVX, 891,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_pd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCMPPH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 892,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B16, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCMPPS, RD_CAT_AVX512, RD_SET_AVX512F, 893,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCMPPS, RD_CAT_AVX, RD_SET_AVX, 893,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCMPSD, RD_CAT_AVX512, RD_SET_AVX512F, 894,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_SAE, RD_OPS_CNT(5, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCMPSD, RD_CAT_AVX, RD_SET_AVX, 894,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCMPSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 895,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_SAE, RD_OPS_CNT(5, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCMPSS, RD_CAT_AVX512, RD_SET_AVX512F, 896,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_SAE, RD_OPS_CNT(5, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCMPSS, RD_CAT_AVX, RD_SET_AVX, 896,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCOMISD, RD_CAT_AVX512, RD_SET_AVX512F, 897,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_SAE, RD_OPS_CNT(2, 1), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VCOMISD, RD_CAT_AVX, RD_SET_AVX, 897,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VCOMISH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 898,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_SAE, RD_OPS_CNT(2, 1), RD_TUPLE_T1S16, RD_EXT_E3NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0 | RDR_RFLAG_ZF | RDR_RFLAG_PF | RDR_RFLAG_CF,
				0,
				0 | RDR_RFLAG_OF | RDR_RFLAG_SF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VCOMISS, RD_CAT_AVX512, RD_SET_AVX512F, 899,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_SAE, RD_OPS_CNT(2, 1), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VCOMISS, RD_CAT_AVX, RD_SET_AVX, 899,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VCOMPRESSPD, RD_CAT_COMPRESS, RD_SET_AVX512F, 900,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOMZ | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCOMPRESSPS, RD_CAT_COMPRESS, RD_SET_AVX512F, 901,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOMZ | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTDQ2PD, RD_CAT_CONVERT, RD_SET_AVX512F, 902,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_HV, RD_EXT_E5, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IER | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VCVTDQ2PD, RD_CAT_CONVERT, RD_SET_AVX, 902,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTDQ2PD, RD_CAT_CONVERT, RD_SET_AVX, 902,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTDQ2PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 903,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VCVTDQ2PS, RD_CAT_CONVERT, RD_SET_AVX512F, 904,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VCVTDQ2PS, RD_CAT_CONVERT, RD_SET_AVX, 904,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTNE2PS2BF16, RD_CAT_AVX512BF16, RD_SET_AVX512BF16, 905,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BF16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VCVTNEEBF162PS, RD_CAT_AVXNECONVERT, RD_SET_AVXNECONVERT, 906,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXNECONVERT,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTNEEPH2PS, RD_CAT_AVXNECONVERT, RD_SET_AVXNECONVERT, 907,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXNECONVERT,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTNEOBF162PS, RD_CAT_AVXNECONVERT, RD_SET_AVXNECONVERT, 908,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXNECONVERT,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTNEOPH2PS, RD_CAT_AVXNECONVERT, RD_SET_AVXNECONVERT, 909,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXNECONVERT,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTNEPS2BF16, RD_CAT_AVX512BF16, RD_SET_AVX512BF16, 910,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BF16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VCVTNEPS2BF16, RD_CAT_AVXNECONVERT, RD_SET_AVXNECONVERT, 910,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXNECONVERT,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTPD2DQ, RD_CAT_CONVERT, RD_SET_AVX512F, 911,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VCVTPD2DQ, RD_CAT_CONVERT, RD_SET_AVX, 911,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTPD2PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 912,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VCVTPD2PS, RD_CAT_CONVERT, RD_SET_AVX512F, 913,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VCVTPD2PS, RD_CAT_CONVERT, RD_SET_AVX, 913,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTPD2PS, RD_CAT_CONVERT, RD_SET_AVX, 913,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTPD2QQ, RD_CAT_CONVERT, RD_SET_AVX512DQ, 914,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VCVTPD2UDQ, RD_CAT_CONVERT, RD_SET_AVX512F, 915,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VCVTPD2UQQ, RD_CAT_CONVERT, RD_SET_AVX512DQ, 916,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VCVTPH2DQ, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 917,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_HV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VCVTPH2PD, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 918,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_QV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VCVTPH2PS, RD_CAT_CONVERT, RD_SET_AVX512F, 919,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(3, 0), RD_TUPLE_HVM, RD_EXT_E11, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VCVTPH2PS, RD_CAT_CONVERT, RD_SET_F16C, 919,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_11, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_F16C,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTPH2PS, RD_CAT_CONVERT, RD_SET_F16C, 919,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_11, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_F16C,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTPH2PSX, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 920,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_HV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VCVTPH2QQ, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 921,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_QV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VCVTPH2UDQ, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 922,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_HV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VCVTPH2UQQ, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 923,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_QV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VCVTPH2UW, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 924,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VCVTPH2W, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 925,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VCVTPS2DQ, RD_CAT_CONVERT, RD_SET_AVX512F, 926,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VCVTPS2DQ, RD_CAT_CONVERT, RD_SET_AVX, 926,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTPS2PD, RD_CAT_CONVERT, RD_SET_AVX512F, 927,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_HV, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VCVTPS2PD, RD_CAT_CONVERT, RD_SET_AVX, 927,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTPS2PD, RD_CAT_CONVERT, RD_SET_AVX, 927,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTPS2PH, RD_CAT_CONVERT, RD_SET_AVX512F, 928,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(4, 0), RD_TUPLE_HVM, RD_EXT_E11, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTPS2PH, RD_CAT_CONVERT, RD_SET_F16C, 928,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_11, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_F16C,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTPS2PH, RD_CAT_CONVERT, RD_SET_F16C, 928,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_11, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_F16C,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTPS2PHX, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 929,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VCVTPS2QQ, RD_CAT_CONVERT, RD_SET_AVX512DQ, 930,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_HV, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VCVTPS2UDQ, RD_CAT_CONVERT, RD_SET_AVX512F, 931,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VCVTPS2UQQ, RD_CAT_CONVERT, RD_SET_AVX512DQ, 932,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_HV, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VCVTQQ2PD, RD_CAT_CONVERT, RD_SET_AVX512DQ, 933,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VCVTQQ2PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 934,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VCVTQQ2PS, RD_CAT_CONVERT, RD_SET_AVX512DQ, 935,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VCVTSD2SH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 936,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VCVTSD2SI, RD_CAT_CONVERT, RD_SET_AVX512F, 937,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_ER, RD_OPS_CNT(2, 0), RD_TUPLE_T1F, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VCVTSD2SI, RD_CAT_CONVERT, RD_SET_AVX, 937,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTSD2SS, RD_CAT_CONVERT, RD_SET_AVX512F, 938,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VCVTSD2SS, RD_CAT_CONVERT, RD_SET_AVX, 938,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTSD2USI, RD_CAT_CONVERT, RD_SET_AVX512F, 939,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_ER, RD_OPS_CNT(2, 0), RD_TUPLE_T1F, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VCVTSH2SD, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 940,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VCVTSH2SI, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 941,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_ER, RD_OPS_CNT(2, 0), RD_TUPLE_T1S16, RD_EXT_E3NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VCVTSH2SS, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 942,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VCVTSH2USI, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 943,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_ER, RD_OPS_CNT(2, 0), RD_TUPLE_T1S16, RD_EXT_E3NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VCVTSI2SD, RD_CAT_CONVERT, RD_SET_AVX512F, 944,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E10NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IER | RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTSI2SD, RD_CAT_CONVERT, RD_SET_AVX512F, 944,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_ER, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, RD_OPD_ER, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTSI2SD, RD_CAT_CONVERT, RD_SET_AVX, 944,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTSI2SH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 945,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E3NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTSI2SS, RD_CAT_CONVERT, RD_SET_AVX512F, 946,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_ER, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, RD_OPD_ER, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTSI2SS, RD_CAT_CONVERT, RD_SET_AVX, 946,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTSS2SD, RD_CAT_CONVERT, RD_SET_AVX512F, 947,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VCVTSS2SD, RD_CAT_CONVERT, RD_SET_AVX, 947,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTSS2SH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 948,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VCVTSS2SI, RD_CAT_CONVERT, RD_SET_AVX512F, 949,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_ER, RD_OPS_CNT(2, 0), RD_TUPLE_T1F, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VCVTSS2SI, RD_CAT_CONVERT, RD_SET_AVX, 949,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTSS2USI, RD_CAT_CONVERT, RD_SET_AVX512F, 950,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_ER, RD_OPS_CNT(2, 0), RD_TUPLE_T1F, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VCVTTPD2DQ, RD_CAT_CONVERT, RD_SET_AVX512F, 951,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VCVTTPD2DQ, RD_CAT_CONVERT, RD_SET_AVX, 951,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTTPD2QQ, RD_CAT_CONVERT, RD_SET_AVX512DQ, 952,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VCVTTPD2UDQ, RD_CAT_CONVERT, RD_SET_AVX512F, 953,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VCVTTPD2UQQ, RD_CAT_CONVERT, RD_SET_AVX512DQ, 954,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VCVTTPH2DQ, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 955,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_HV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VCVTTPH2QQ, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 956,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_QV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VCVTTPH2UDQ, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 957,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_HV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VCVTTPH2UQQ, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 958,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_QV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VCVTTPH2UW, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 959,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VCVTTPH2W, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 960,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VCVTTPS2DQ, RD_CAT_CONVERT, RD_SET_AVX512F, 961,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VCVTTPS2DQ, RD_CAT_CONVERT, RD_SET_AVX, 961,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTTPS2QQ, RD_CAT_CONVERT, RD_SET_AVX512DQ, 962,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_HV, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VCVTTPS2UDQ, RD_CAT_CONVERT, RD_SET_AVX512F, 963,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VCVTTPS2UQQ, RD_CAT_CONVERT, RD_SET_AVX512DQ, 964,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_HV, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VCVTTSD2SI, RD_CAT_CONVERT, RD_SET_AVX512F, 965,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_SAE, RD_OPS_CNT(2, 0), RD_TUPLE_T1F, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VCVTTSD2SI, RD_CAT_CONVERT, RD_SET_AVX, 965,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTTSD2USI, RD_CAT_CONVERT, RD_SET_AVX512F, 966,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_SAE, RD_OPS_CNT(2, 0), RD_TUPLE_T1F, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VCVTTSH2SI, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 967,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_SAE, RD_OPS_CNT(2, 0), RD_TUPLE_T1S16, RD_EXT_E3NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VCVTTSH2USI, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 968,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_SAE, RD_OPS_CNT(2, 0), RD_TUPLE_T1S16, RD_EXT_E3NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VCVTTSS2SI, RD_CAT_CONVERT, RD_SET_AVX512F, 969,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_SAE, RD_OPS_CNT(2, 0), RD_TUPLE_T1F, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VCVTTSS2SI, RD_CAT_CONVERT, RD_SET_AVX, 969,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTTSS2USI, RD_CAT_CONVERT, RD_SET_AVX512F, 970,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_SAE, RD_OPS_CNT(2, 0), RD_TUPLE_T1F, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VCVTUDQ2PD, RD_CAT_CONVERT, RD_SET_AVX512F, 971,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_HV, RD_EXT_E5, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IER | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VCVTUDQ2PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 972,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VCVTUDQ2PS, RD_CAT_CONVERT, RD_SET_AVX512F, 973,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VCVTUQQ2PD, RD_CAT_CONVERT, RD_SET_AVX512DQ, 974,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VCVTUQQ2PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 975,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VCVTUQQ2PS, RD_CAT_CONVERT, RD_SET_AVX512DQ, 976,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VCVTUSI2SD, RD_CAT_CONVERT, RD_SET_AVX512F, 977,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E10NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IER | RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTUSI2SD, RD_CAT_CONVERT, RD_SET_AVX512F, 977,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_ER, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, RD_OPD_ER, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTUSI2SH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 978,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_ER, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E3NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VCVTUSI2SS, RD_CAT_CONVERT, RD_SET_AVX512F, 979,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_ER, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VCVTUW2PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 980,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VCVTW2PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 981,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VDBPSADBW, RD_CAT_AVX512, RD_SET_AVX512BW, 982,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(5, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VDIVPD, RD_CAT_AVX512, RD_SET_AVX512F, 983,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VDIVPD, RD_CAT_AVX, RD_SET_AVX, 983,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_pd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VDIVPH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 984,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VDIVPS, RD_CAT_AVX512, RD_SET_AVX512F, 985,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VDIVPS, RD_CAT_AVX, RD_SET_AVX, 985,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ps, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VDIVSD, RD_CAT_AVX512, RD_SET_AVX512F, 986,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VDIVSD, RD_CAT_AVX, RD_SET_AVX, 986,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VDIVSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 987,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VDIVSS, RD_CAT_AVX512, RD_SET_AVX512F, 988,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VDIVSS, RD_CAT_AVX, RD_SET_AVX, 988,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VDPBF16PS, RD_CAT_AVX512BF16, RD_SET_AVX512BF16, 989,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BF16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VDPPD, RD_CAT_AVX, RD_SET_AVX, 990,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VDPPS, RD_CAT_AVX, RD_SET_AVX, 991,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VERR, RD_CAT_SYSTEM, RD_SET_I286PROT, 992,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VERW, RD_CAT_SYSTEM, RD_SET_I286PROT, 993,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VEXP2PD, RD_CAT_KNL, RD_SET_AVX512ER, 994,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512ER,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_oq, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VEXP2PS, RD_CAT_KNL, RD_SET_AVX512ER, 995,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512ER,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_oq, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VEXPANDPD, RD_CAT_EXPAND, RD_SET_AVX512F, 996,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VEXPANDPS, RD_CAT_EXPAND, RD_SET_AVX512F, 997,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VEXTRACTF128, RD_CAT_AVX, RD_SET_AVX, 998,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VEXTRACTF32X4, RD_CAT_AVX512, RD_SET_AVX512F, 999,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T4, RD_EXT_E6NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VEXTRACTF32X8, RD_CAT_AVX512, RD_SET_AVX512DQ, 1000,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T8, RD_EXT_E6NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_qq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VEXTRACTF64X2, RD_CAT_AVX512, RD_SET_AVX512DQ, 1001,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T2, RD_EXT_E6NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VEXTRACTF64X4, RD_CAT_AVX512, RD_SET_AVX512F, 1002,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T4, RD_EXT_E6NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_qq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VEXTRACTI128, RD_CAT_AVX2, RD_SET_AVX2, 1003,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VEXTRACTI32X4, RD_CAT_AVX512, RD_SET_AVX512F, 1004,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T4, RD_EXT_E6NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VEXTRACTI32X8, RD_CAT_AVX512, RD_SET_AVX512DQ, 1005,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T8, RD_EXT_E6NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_qq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VEXTRACTI64X2, RD_CAT_AVX512, RD_SET_AVX512DQ, 1006,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T2, RD_EXT_E6NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VEXTRACTI64X4, RD_CAT_AVX512, RD_SET_AVX512F, 1007,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T4, RD_EXT_E6NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_qq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VEXTRACTPS, RD_CAT_AVX512, RD_SET_AVX512F, 1008,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VEXTRACTPS, RD_CAT_AVX512, RD_SET_AVX512F, 1008,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VEXTRACTPS, RD_CAT_AVX, RD_SET_AVX, 1008,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VEXTRACTPS, RD_CAT_AVX, RD_SET_AVX, 1008,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFCMADDCPH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1009,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4S, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFCMADDCSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1010,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E10S, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_d, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFCMULCPH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1011,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4S, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFCMULCSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1012,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E10S, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_d, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFIXUPIMMPD, RD_CAT_AVX512, RD_SET_AVX512F, 1013,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFIXUPIMMPS, RD_CAT_AVX512, RD_SET_AVX512F, 1014,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFIXUPIMMSD, RD_CAT_AVX512, RD_SET_AVX512F, 1015,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(5, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFIXUPIMMSS, RD_CAT_AVX512, RD_SET_AVX512F, 1016,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(5, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADD132PD, RD_CAT_VFMA, RD_SET_AVX512F, 1017,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VFMADD132PD, RD_CAT_VFMA, RD_SET_FMA, 1017,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADD132PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1018,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VFMADD132PS, RD_CAT_VFMA, RD_SET_AVX512F, 1019,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFMADD132PS, RD_CAT_VFMA, RD_SET_FMA, 1019,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADD132SD, RD_CAT_VFMA, RD_SET_AVX512F, 1020,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFMADD132SD, RD_CAT_VFMA, RD_SET_FMA, 1020,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADD132SH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1021,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFMADD132SS, RD_CAT_VFMA, RD_SET_AVX512F, 1022,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFMADD132SS, RD_CAT_VFMA, RD_SET_FMA, 1022,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADD213PD, RD_CAT_VFMA, RD_SET_AVX512F, 1023,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VFMADD213PD, RD_CAT_VFMA, RD_SET_FMA, 1023,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADD213PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1024,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VFMADD213PS, RD_CAT_VFMA, RD_SET_AVX512F, 1025,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFMADD213PS, RD_CAT_VFMA, RD_SET_FMA, 1025,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADD213SD, RD_CAT_VFMA, RD_SET_AVX512F, 1026,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFMADD213SD, RD_CAT_VFMA, RD_SET_FMA, 1026,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADD213SH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1027,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFMADD213SS, RD_CAT_VFMA, RD_SET_AVX512F, 1028,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFMADD213SS, RD_CAT_VFMA, RD_SET_FMA, 1028,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADD231PD, RD_CAT_VFMA, RD_SET_AVX512F, 1029,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VFMADD231PD, RD_CAT_VFMA, RD_SET_FMA, 1029,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADD231PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1030,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VFMADD231PS, RD_CAT_VFMA, RD_SET_AVX512F, 1031,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFMADD231PS, RD_CAT_VFMA, RD_SET_FMA, 1031,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADD231SD, RD_CAT_VFMA, RD_SET_AVX512F, 1032,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFMADD231SD, RD_CAT_VFMA, RD_SET_FMA, 1032,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADD231SH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1033,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFMADD231SS, RD_CAT_VFMA, RD_SET_AVX512F, 1034,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFMADD231SS, RD_CAT_VFMA, RD_SET_FMA, 1034,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADDCPH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1035,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4S, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFMADDCSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1036,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E10S, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_d, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFMADDPD, RD_CAT_FMA4, RD_SET_FMA4, 1037,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADDPD, RD_CAT_FMA4, RD_SET_FMA4, 1037,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADDPS, RD_CAT_FMA4, RD_SET_FMA4, 1038,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADDPS, RD_CAT_FMA4, RD_SET_FMA4, 1038,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADDSD, RD_CAT_FMA4, RD_SET_FMA4, 1039,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADDSD, RD_CAT_FMA4, RD_SET_FMA4, 1039,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADDSS, RD_CAT_FMA4, RD_SET_FMA4, 1040,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADDSS, RD_CAT_FMA4, RD_SET_FMA4, 1040,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADDSUB132PD, RD_CAT_VFMA, RD_SET_AVX512F, 1041,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VFMADDSUB132PD, RD_CAT_VFMA, RD_SET_FMA, 1041,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADDSUB132PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1042,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VFMADDSUB132PS, RD_CAT_VFMA, RD_SET_AVX512F, 1043,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFMADDSUB132PS, RD_CAT_VFMA, RD_SET_FMA, 1043,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADDSUB213PD, RD_CAT_VFMA, RD_SET_AVX512F, 1044,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VFMADDSUB213PD, RD_CAT_VFMA, RD_SET_FMA, 1044,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADDSUB213PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1045,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VFMADDSUB213PS, RD_CAT_VFMA, RD_SET_AVX512F, 1046,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFMADDSUB213PS, RD_CAT_VFMA, RD_SET_FMA, 1046,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADDSUB231PD, RD_CAT_VFMA, RD_SET_AVX512F, 1047,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VFMADDSUB231PD, RD_CAT_VFMA, RD_SET_FMA, 1047,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADDSUB231PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1048,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VFMADDSUB231PS, RD_CAT_VFMA, RD_SET_AVX512F, 1049,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFMADDSUB231PS, RD_CAT_VFMA, RD_SET_FMA, 1049,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADDSUBPD, RD_CAT_FMA4, RD_SET_FMA4, 1050,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADDSUBPD, RD_CAT_FMA4, RD_SET_FMA4, 1050,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADDSUBPS, RD_CAT_FMA4, RD_SET_FMA4, 1051,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMADDSUBPS, RD_CAT_FMA4, RD_SET_FMA4, 1051,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUB132PD, RD_CAT_VFMA, RD_SET_AVX512F, 1052,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VFMSUB132PD, RD_CAT_VFMA, RD_SET_FMA, 1052,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUB132PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1053,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VFMSUB132PS, RD_CAT_VFMA, RD_SET_AVX512F, 1054,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFMSUB132PS, RD_CAT_VFMA, RD_SET_FMA, 1054,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUB132SD, RD_CAT_VFMA, RD_SET_AVX512F, 1055,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFMSUB132SD, RD_CAT_VFMA, RD_SET_FMA, 1055,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUB132SH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1056,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFMSUB132SS, RD_CAT_VFMA, RD_SET_AVX512F, 1057,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFMSUB132SS, RD_CAT_VFMA, RD_SET_FMA, 1057,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUB213PD, RD_CAT_VFMA, RD_SET_AVX512F, 1058,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VFMSUB213PD, RD_CAT_VFMA, RD_SET_FMA, 1058,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUB213PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1059,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VFMSUB213PS, RD_CAT_VFMA, RD_SET_AVX512F, 1060,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFMSUB213PS, RD_CAT_VFMA, RD_SET_FMA, 1060,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUB213SD, RD_CAT_VFMA, RD_SET_AVX512F, 1061,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFMSUB213SD, RD_CAT_VFMA, RD_SET_FMA, 1061,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUB213SH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1062,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFMSUB213SS, RD_CAT_VFMA, RD_SET_AVX512F, 1063,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFMSUB213SS, RD_CAT_VFMA, RD_SET_FMA, 1063,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUB231PD, RD_CAT_VFMA, RD_SET_AVX512F, 1064,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VFMSUB231PD, RD_CAT_VFMA, RD_SET_FMA, 1064,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUB231PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1065,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VFMSUB231PS, RD_CAT_VFMA, RD_SET_AVX512F, 1066,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFMSUB231PS, RD_CAT_VFMA, RD_SET_FMA, 1066,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUB231SD, RD_CAT_VFMA, RD_SET_AVX512F, 1067,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFMSUB231SD, RD_CAT_VFMA, RD_SET_FMA, 1067,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUB231SH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1068,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFMSUB231SS, RD_CAT_VFMA, RD_SET_AVX512F, 1069,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFMSUB231SS, RD_CAT_VFMA, RD_SET_FMA, 1069,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUBADD132PD, RD_CAT_VFMA, RD_SET_AVX512F, 1070,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VFMSUBADD132PD, RD_CAT_VFMA, RD_SET_FMA, 1070,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUBADD132PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1071,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VFMSUBADD132PS, RD_CAT_VFMA, RD_SET_AVX512F, 1072,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFMSUBADD132PS, RD_CAT_VFMA, RD_SET_FMA, 1072,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUBADD213PD, RD_CAT_VFMA, RD_SET_AVX512F, 1073,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VFMSUBADD213PD, RD_CAT_VFMA, RD_SET_FMA, 1073,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUBADD213PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1074,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VFMSUBADD213PS, RD_CAT_VFMA, RD_SET_AVX512F, 1075,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFMSUBADD213PS, RD_CAT_VFMA, RD_SET_FMA, 1075,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUBADD231PD, RD_CAT_VFMA, RD_SET_AVX512F, 1076,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VFMSUBADD231PD, RD_CAT_VFMA, RD_SET_FMA, 1076,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUBADD231PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1077,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VFMSUBADD231PS, RD_CAT_VFMA, RD_SET_AVX512F, 1078,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFMSUBADD231PS, RD_CAT_VFMA, RD_SET_FMA, 1078,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUBADDPD, RD_CAT_FMA4, RD_SET_FMA4, 1079,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUBADDPD, RD_CAT_FMA4, RD_SET_FMA4, 1079,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUBADDPS, RD_CAT_FMA4, RD_SET_FMA4, 1080,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUBADDPS, RD_CAT_FMA4, RD_SET_FMA4, 1080,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUBPD, RD_CAT_FMA4, RD_SET_FMA4, 1081,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUBPD, RD_CAT_FMA4, RD_SET_FMA4, 1081,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUBPS, RD_CAT_FMA4, RD_SET_FMA4, 1082,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUBPS, RD_CAT_FMA4, RD_SET_FMA4, 1082,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUBSD, RD_CAT_FMA4, RD_SET_FMA4, 1083,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUBSD, RD_CAT_FMA4, RD_SET_FMA4, 1083,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUBSS, RD_CAT_FMA4, RD_SET_FMA4, 1084,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMSUBSS, RD_CAT_FMA4, RD_SET_FMA4, 1084,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFMULCPH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1085,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4S, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFMULCSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1086,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E10S, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_d, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFNMADD132PD, RD_CAT_VFMA, RD_SET_AVX512F, 1087,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VFNMADD132PD, RD_CAT_VFMA, RD_SET_FMA, 1087,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMADD132PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1088,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VFNMADD132PS, RD_CAT_VFMA, RD_SET_AVX512F, 1089,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFNMADD132PS, RD_CAT_VFMA, RD_SET_FMA, 1089,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMADD132SD, RD_CAT_VFMA, RD_SET_AVX512F, 1090,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFNMADD132SD, RD_CAT_VFMA, RD_SET_FMA, 1090,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMADD132SH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1091,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFNMADD132SS, RD_CAT_VFMA, RD_SET_AVX512F, 1092,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFNMADD132SS, RD_CAT_VFMA, RD_SET_FMA, 1092,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMADD213PD, RD_CAT_VFMA, RD_SET_AVX512F, 1093,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VFNMADD213PD, RD_CAT_VFMA, RD_SET_FMA, 1093,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMADD213PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1094,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VFNMADD213PS, RD_CAT_VFMA, RD_SET_AVX512F, 1095,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFNMADD213PS, RD_CAT_VFMA, RD_SET_FMA, 1095,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMADD213SD, RD_CAT_VFMA, RD_SET_AVX512F, 1096,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFNMADD213SD, RD_CAT_VFMA, RD_SET_FMA, 1096,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMADD213SH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1097,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFNMADD213SS, RD_CAT_VFMA, RD_SET_AVX512F, 1098,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFNMADD213SS, RD_CAT_VFMA, RD_SET_FMA, 1098,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMADD231PD, RD_CAT_VFMA, RD_SET_AVX512F, 1099,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VFNMADD231PD, RD_CAT_VFMA, RD_SET_FMA, 1099,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMADD231PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1100,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VFNMADD231PS, RD_CAT_VFMA, RD_SET_AVX512F, 1101,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFNMADD231PS, RD_CAT_VFMA, RD_SET_FMA, 1101,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMADD231SD, RD_CAT_VFMA, RD_SET_AVX512F, 1102,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFNMADD231SD, RD_CAT_VFMA, RD_SET_FMA, 1102,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMADD231SH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1103,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFNMADD231SS, RD_CAT_VFMA, RD_SET_AVX512F, 1104,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFNMADD231SS, RD_CAT_VFMA, RD_SET_FMA, 1104,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMADDPD, RD_CAT_FMA4, RD_SET_FMA4, 1105,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMADDPD, RD_CAT_FMA4, RD_SET_FMA4, 1105,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMADDPS, RD_CAT_FMA4, RD_SET_FMA4, 1106,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMADDPS, RD_CAT_FMA4, RD_SET_FMA4, 1106,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMADDSD, RD_CAT_FMA4, RD_SET_FMA4, 1107,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMADDSD, RD_CAT_FMA4, RD_SET_FMA4, 1107,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMADDSS, RD_CAT_FMA4, RD_SET_FMA4, 1108,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMADDSS, RD_CAT_FMA4, RD_SET_FMA4, 1108,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMSUB132PD, RD_CAT_VFMA, RD_SET_AVX512F, 1109,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VFNMSUB132PD, RD_CAT_VFMA, RD_SET_FMA, 1109,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMSUB132PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1110,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VFNMSUB132PS, RD_CAT_VFMA, RD_SET_AVX512F, 1111,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFNMSUB132PS, RD_CAT_VFMA, RD_SET_FMA, 1111,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMSUB132SD, RD_CAT_VFMA, RD_SET_AVX512F, 1112,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFNMSUB132SD, RD_CAT_VFMA, RD_SET_FMA, 1112,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMSUB132SH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1113,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFNMSUB132SS, RD_CAT_VFMA, RD_SET_AVX512F, 1114,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFNMSUB132SS, RD_CAT_VFMA, RD_SET_FMA, 1114,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMSUB213PD, RD_CAT_VFMA, RD_SET_AVX512F, 1115,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VFNMSUB213PD, RD_CAT_VFMA, RD_SET_FMA, 1115,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMSUB213PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1116,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VFNMSUB213PS, RD_CAT_VFMA, RD_SET_AVX512F, 1117,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFNMSUB213PS, RD_CAT_VFMA, RD_SET_FMA, 1117,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMSUB213SD, RD_CAT_VFMA, RD_SET_AVX512F, 1118,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFNMSUB213SD, RD_CAT_VFMA, RD_SET_FMA, 1118,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMSUB213SH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1119,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFNMSUB213SS, RD_CAT_VFMA, RD_SET_AVX512F, 1120,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFNMSUB213SS, RD_CAT_VFMA, RD_SET_FMA, 1120,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMSUB231PD, RD_CAT_VFMA, RD_SET_AVX512F, 1121,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VFNMSUB231PD, RD_CAT_VFMA, RD_SET_FMA, 1121,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMSUB231PH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1122,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VFNMSUB231PS, RD_CAT_VFMA, RD_SET_AVX512F, 1123,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VFNMSUB231PS, RD_CAT_VFMA, RD_SET_FMA, 1123,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMSUB231SD, RD_CAT_VFMA, RD_SET_AVX512F, 1124,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFNMSUB231SD, RD_CAT_VFMA, RD_SET_FMA, 1124,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMSUB231SH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1125,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFNMSUB231SS, RD_CAT_VFMA, RD_SET_AVX512F, 1126,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VFNMSUB231SS, RD_CAT_VFMA, RD_SET_FMA, 1126,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMSUBPD, RD_CAT_FMA4, RD_SET_FMA4, 1127,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMSUBPD, RD_CAT_FMA4, RD_SET_FMA4, 1127,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMSUBPS, RD_CAT_FMA4, RD_SET_FMA4, 1128,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMSUBPS, RD_CAT_FMA4, RD_SET_FMA4, 1128,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMSUBSD, RD_CAT_FMA4, RD_SET_FMA4, 1129,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMSUBSD, RD_CAT_FMA4, RD_SET_FMA4, 1129,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMSUBSS, RD_CAT_FMA4, RD_SET_FMA4, 1130,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFNMSUBSS, RD_CAT_FMA4, RD_SET_FMA4, 1130,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_FMA4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFPCLASSPD, RD_CAT_AVX512, RD_SET_AVX512DQ, 1131,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFPCLASSPH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1132,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B16, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFPCLASSPS, RD_CAT_AVX512, RD_SET_AVX512DQ, 1133,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFPCLASSSD, RD_CAT_AVX512, RD_SET_AVX512DQ, 1134,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFPCLASSSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1135,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E10, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFPCLASSSS, RD_CAT_AVX512, RD_SET_AVX512DQ, 1136,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFRCZPD, RD_CAT_XOP, RD_SET_XOP, 1137,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFRCZPS, RD_CAT_XOP, RD_SET_XOP, 1138,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFRCZSD, RD_CAT_XOP, RD_SET_XOP, 1139,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VFRCZSS, RD_CAT_XOP, RD_SET_XOP, 1140,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VGATHERDPD, RD_CAT_GATHER, RD_SET_AVX512F, 1141,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E12, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_vm32h, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VGATHERDPD, RD_CAT_AVX2GATHER, RD_SET_AVX2GATHER, 1141,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_12, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_CRW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_vm32h, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VGATHERDPS, RD_CAT_GATHER, RD_SET_AVX512F, 1142,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E12, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_vm32n, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VGATHERDPS, RD_CAT_AVX2GATHER, RD_SET_AVX2GATHER, 1142,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_12, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_CRW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_vm32n, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VGATHERPF0DPD, RD_CAT_GATHER, RD_SET_AVX512PF, 1143,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E12NP, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB, RD_CFF_AVX512PF,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm32h, 0, RD_OPA_P, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VGATHERPF0DPS, RD_CAT_GATHER, RD_SET_AVX512PF, 1144,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E12NP, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB, RD_CFF_AVX512PF,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm32n, 0, RD_OPA_P, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VGATHERPF0QPD, RD_CAT_GATHER, RD_SET_AVX512PF, 1145,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E12NP, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB, RD_CFF_AVX512PF,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm64n, 0, RD_OPA_P, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VGATHERPF0QPS, RD_CAT_GATHER, RD_SET_AVX512PF, 1146,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E12NP, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB, RD_CFF_AVX512PF,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm64n, 0, RD_OPA_P, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VGATHERPF1DPD, RD_CAT_GATHER, RD_SET_AVX512PF, 1147,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E12NP, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB, RD_CFF_AVX512PF,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm32h, 0, RD_OPA_P, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VGATHERPF1DPS, RD_CAT_GATHER, RD_SET_AVX512PF, 1148,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E12NP, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB, RD_CFF_AVX512PF,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm32n, 0, RD_OPA_P, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VGATHERPF1QPD, RD_CAT_GATHER, RD_SET_AVX512PF, 1149,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E12NP, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB, RD_CFF_AVX512PF,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm64n, 0, RD_OPA_P, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VGATHERPF1QPS, RD_CAT_GATHER, RD_SET_AVX512PF, 1150,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E12NP, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB, RD_CFF_AVX512PF,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm64n, 0, RD_OPA_P, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VGATHERQPD, RD_CAT_GATHER, RD_SET_AVX512F, 1151,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E12, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_vm64n, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VGATHERQPD, RD_CAT_AVX2GATHER, RD_SET_AVX2GATHER, 1151,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_12, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_CRW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_vm64n, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VGATHERQPS, RD_CAT_GATHER, RD_SET_AVX512F, 1152,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E12, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_vm64n, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VGATHERQPS, RD_CAT_AVX2GATHER, RD_SET_AVX2GATHER, 1152,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_12, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_CRW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_vm64n, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VGETEXPPD, RD_CAT_AVX512, RD_SET_AVX512F, 1153,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VGETEXPPH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1154,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VGETEXPPS, RD_CAT_AVX512, RD_SET_AVX512F, 1155,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VGETEXPSD, RD_CAT_AVX512, RD_SET_AVX512F, 1156,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VGETEXPSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1157,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VGETEXPSS, RD_CAT_AVX512, RD_SET_AVX512F, 1158,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VGETMANTPD, RD_CAT_AVX512, RD_SET_AVX512F, 1159,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VGETMANTPH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1160,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B16, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VGETMANTPS, RD_CAT_AVX512, RD_SET_AVX512F, 1161,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VGETMANTSD, RD_CAT_AVX512, RD_SET_AVX512F, 1162,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(5, 0), RD_TUPLE_T1S, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VGETMANTSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1163,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(5, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VGETMANTSS, RD_CAT_AVX512, RD_SET_AVX512F, 1164,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(5, 0), RD_TUPLE_T1S, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VGF2P8AFFINEINVQB, RD_CAT_GFNI, RD_SET_GFNI, 1165,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_GFNI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VGF2P8AFFINEINVQB, RD_CAT_GFNI, RD_SET_GFNI, 1165,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_GFNI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VGF2P8AFFINEQB, RD_CAT_GFNI, RD_SET_GFNI, 1166,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_GFNI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VGF2P8AFFINEQB, RD_CAT_GFNI, RD_SET_GFNI, 1166,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_GFNI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VGF2P8MULB, RD_CAT_GFNI, RD_SET_GFNI, 1167,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_GFNI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VGF2P8MULB, RD_CAT_GFNI, RD_SET_GFNI, 1167,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_GFNI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VHADDPD, RD_CAT_AVX, RD_SET_AVX, 1168,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_pd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VHADDPS, RD_CAT_AVX, RD_SET_AVX, 1169,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ps, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VHSUBPD, RD_CAT_AVX, RD_SET_AVX, 1170,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_pd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VHSUBPS, RD_CAT_AVX, RD_SET_AVX, 1171,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ps, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VINSERTF128, RD_CAT_AVX, RD_SET_AVX, 1172,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_qq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VINSERTF32X4, RD_CAT_AVX512, RD_SET_AVX512F, 1173,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(5, 0), RD_TUPLE_T4, RD_EXT_E6NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_uv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VINSERTF32X8, RD_CAT_AVX512, RD_SET_AVX512DQ, 1174,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(5, 0), RD_TUPLE_T8, RD_EXT_E6NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_oq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VINSERTF64X2, RD_CAT_AVX512, RD_SET_AVX512DQ, 1175,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(5, 0), RD_TUPLE_T2, RD_EXT_E6NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_uv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VINSERTF64X4, RD_CAT_AVX512, RD_SET_AVX512F, 1176,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(5, 0), RD_TUPLE_T4, RD_EXT_E6NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_oq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VINSERTI128, RD_CAT_AVX2, RD_SET_AVX2, 1177,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_qq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VINSERTI32X4, RD_CAT_AVX512, RD_SET_AVX512F, 1178,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(5, 0), RD_TUPLE_T4, RD_EXT_E6NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_uv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VINSERTI32X8, RD_CAT_AVX512, RD_SET_AVX512DQ, 1179,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(5, 0), RD_TUPLE_T8, RD_EXT_E6NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_oq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VINSERTI64X2, RD_CAT_AVX512, RD_SET_AVX512DQ, 1180,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(5, 0), RD_TUPLE_T2, RD_EXT_E6NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_uv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VINSERTI64X4, RD_CAT_AVX512, RD_SET_AVX512F, 1181,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(5, 0), RD_TUPLE_T4, RD_EXT_E6NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_oq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VINSERTPS, RD_CAT_AVX512, RD_SET_AVX512F, 1182,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VINSERTPS, RD_CAT_AVX512, RD_SET_AVX512F, 1182,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VINSERTPS, RD_CAT_AVX, RD_SET_AVX, 1182,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VINSERTPS, RD_CAT_AVX, RD_SET_AVX, 1182,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VLDDQU, RD_CAT_AVX, RD_SET_AVX, 1183,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VLDMXCSR, RD_CAT_AVX, RD_SET_AVX, 1184,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(1, 1), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MXCSR, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VMASKMOVDQU, RD_CAT_AVX, RD_SET_AVX, 1185,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MEM_rDI, RD_OPS_dq, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VMASKMOVPD, RD_CAT_AVX, RD_SET_AVX, 1186,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMASKMOVPD, RD_CAT_AVX, RD_SET_AVX, 1186,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMASKMOVPS, RD_CAT_AVX, RD_SET_AVX, 1187,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMASKMOVPS, RD_CAT_AVX, RD_SET_AVX, 1187,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMAXPD, RD_CAT_AVX512, RD_SET_AVX512F, 1188,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VMAXPD, RD_CAT_AVX, RD_SET_AVX, 1188,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_pd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMAXPH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1189,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VMAXPS, RD_CAT_AVX512, RD_SET_AVX512F, 1190,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VMAXPS, RD_CAT_AVX, RD_SET_AVX, 1190,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ps, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMAXSD, RD_CAT_AVX512, RD_SET_AVX512F, 1191,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VMAXSD, RD_CAT_AVX, RD_SET_AVX, 1191,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMAXSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1192,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VMAXSS, RD_CAT_AVX512, RD_SET_AVX512F, 1193,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VMAXSS, RD_CAT_AVX, RD_SET_AVX, 1193,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMCALL, RD_CAT_VTX, RD_SET_VTX, 1194,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_VTX,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_VMCLEAR, RD_CAT_VTX, RD_SET_VTX, 1195,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXR_SEAM | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF | RD_MOD_SMM_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_VTX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VMFUNC, RD_CAT_VTX, RD_SET_VTX, 1196,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_VTX,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_VMGEXIT, RD_CAT_SYSTEM, RD_SET_SVM, 1197,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SVM,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_VMGEXIT, RD_CAT_SYSTEM, RD_SET_SVM, 1197,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SVM,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_VMINPD, RD_CAT_AVX512, RD_SET_AVX512F, 1198,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VMINPD, RD_CAT_AVX, RD_SET_AVX, 1198,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_pd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMINPH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1199,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VMINPS, RD_CAT_AVX512, RD_SET_AVX512F, 1200,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VMINPS, RD_CAT_AVX, RD_SET_AVX, 1200,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ps, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMINSD, RD_CAT_AVX512, RD_SET_AVX512F, 1201,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VMINSD, RD_CAT_AVX, RD_SET_AVX, 1201,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMINSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1202,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VMINSS, RD_CAT_AVX512, RD_SET_AVX512F, 1203,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VMINSS, RD_CAT_AVX, RD_SET_AVX, 1203,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMLAUNCH, RD_CAT_VTX, RD_SET_VTX, 1204,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXR_SEAM | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF | RD_MOD_SMM_OFF,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_VTX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VMLOAD, RD_CAT_SYSTEM, RD_SET_SVM, 1205,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXR_SEAM | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF | RD_MOD_SMM_OFF,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SVM,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMMCALL, RD_CAT_SYSTEM, RD_SET_SVM, 1206,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SVM,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_VMMCALL, RD_CAT_SYSTEM, RD_SET_SVM, 1206,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SVM,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_VMOVAPD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1207,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E1, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVAPD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1207,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E1, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVAPD, RD_CAT_DATAXFER, RD_SET_AVX, 1207,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_1, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVAPD, RD_CAT_DATAXFER, RD_SET_AVX, 1207,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_1, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVAPS, RD_CAT_DATAXFER, RD_SET_AVX512F, 1208,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E1, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVAPS, RD_CAT_DATAXFER, RD_SET_AVX512F, 1208,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E1, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVAPS, RD_CAT_DATAXFER, RD_SET_AVX, 1208,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_1, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVAPS, RD_CAT_DATAXFER, RD_SET_AVX, 1208,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_1, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1209,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1209,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVD, RD_CAT_DATAXFER, RD_SET_AVX, 1209,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVD, RD_CAT_DATAXFER, RD_SET_AVX, 1209,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVDDUP, RD_CAT_DATAXFER, RD_SET_AVX512F, 1210,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_DUP, RD_EXT_E5NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVDDUP, RD_CAT_DATAXFER, RD_SET_AVX512F, 1210,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_DUP, RD_EXT_E5NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVDDUP, RD_CAT_DATAXFER, RD_SET_AVX512F, 1210,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_DUP, RD_EXT_E5NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_oq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVDDUP, RD_CAT_DATAXFER, RD_SET_AVX, 1210,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVDDUP, RD_CAT_DATAXFER, RD_SET_AVX, 1210,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVDQA, RD_CAT_DATAXFER, RD_SET_AVX, 1211,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_1, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVDQA, RD_CAT_DATAXFER, RD_SET_AVX, 1211,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_1, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVDQA32, RD_CAT_DATAXFER, RD_SET_AVX512F, 1212,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E1, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVDQA32, RD_CAT_DATAXFER, RD_SET_AVX512F, 1212,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E1, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVDQA64, RD_CAT_DATAXFER, RD_SET_AVX512F, 1213,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E1, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVDQA64, RD_CAT_DATAXFER, RD_SET_AVX512F, 1213,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E1, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVDQU, RD_CAT_DATAXFER, RD_SET_AVX, 1214,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVDQU, RD_CAT_DATAXFER, RD_SET_AVX, 1214,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVDQU16, RD_CAT_DATAXFER, RD_SET_AVX512BW, 1215,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVDQU16, RD_CAT_DATAXFER, RD_SET_AVX512BW, 1215,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVDQU32, RD_CAT_DATAXFER, RD_SET_AVX512F, 1216,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVDQU32, RD_CAT_DATAXFER, RD_SET_AVX512F, 1216,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVDQU64, RD_CAT_DATAXFER, RD_SET_AVX512F, 1217,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVDQU64, RD_CAT_DATAXFER, RD_SET_AVX512F, 1217,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVDQU8, RD_CAT_DATAXFER, RD_SET_AVX512BW, 1218,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVDQU8, RD_CAT_DATAXFER, RD_SET_AVX512BW, 1218,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVHLPS, RD_CAT_DATAXFER, RD_SET_AVX512F, 1219,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_E7NM, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVHLPS, RD_CAT_AVX, RD_SET_AVX, 1219,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVHPD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1220,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVHPD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1220,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVHPD, RD_CAT_DATAXFER, RD_SET_AVX, 1220,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVHPD, RD_CAT_DATAXFER, RD_SET_AVX, 1220,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVHPS, RD_CAT_DATAXFER, RD_SET_AVX512F, 1221,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_T2, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVHPS, RD_CAT_DATAXFER, RD_SET_AVX512F, 1221,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), RD_TUPLE_T2, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVHPS, RD_CAT_DATAXFER, RD_SET_AVX, 1221,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVHPS, RD_CAT_DATAXFER, RD_SET_AVX, 1221,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVLHPS, RD_CAT_DATAXFER, RD_SET_AVX512F, 1222,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_E7NM, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVLHPS, RD_CAT_AVX, RD_SET_AVX, 1222,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVLPD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1223,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVLPD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1223,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVLPD, RD_CAT_DATAXFER, RD_SET_AVX, 1223,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVLPD, RD_CAT_DATAXFER, RD_SET_AVX, 1223,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVLPS, RD_CAT_DATAXFER, RD_SET_AVX512F, 1224,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_T2, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVLPS, RD_CAT_DATAXFER, RD_SET_AVX512F, 1224,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), RD_TUPLE_T2, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVLPS, RD_CAT_DATAXFER, RD_SET_AVX, 1224,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVLPS, RD_CAT_DATAXFER, RD_SET_AVX, 1224,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVMSKPD, RD_CAT_DATAXFER, RD_SET_AVX, 1225,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_D64 | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVMSKPS, RD_CAT_DATAXFER, RD_SET_AVX, 1226,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_D64 | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVNTDQ, RD_CAT_DATAXFER, RD_SET_AVX512F, 1227,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), RD_TUPLE_FVM, RD_EXT_E1NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_fv, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVNTDQ, RD_CAT_AVX, RD_SET_AVX, 1227,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_1, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVNTDQA, RD_CAT_DATAXFER, RD_SET_AVX512F, 1228,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), RD_TUPLE_FVM, RD_EXT_E1NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVNTDQA, RD_CAT_AVX, RD_SET_AVX, 1228,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_1, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVNTPD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1229,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), RD_TUPLE_FVM, RD_EXT_E1NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_fv, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVNTPD, RD_CAT_AVX, RD_SET_AVX, 1229,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_1, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVNTPS, RD_CAT_DATAXFER, RD_SET_AVX512F, 1230,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), RD_TUPLE_FVM, RD_EXT_E1NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_fv, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVNTPS, RD_CAT_AVX, RD_SET_AVX, 1230,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_1, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVQ, RD_CAT_DATAXFER, RD_SET_AVX512F, 1231,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVQ, RD_CAT_DATAXFER, RD_SET_AVX512F, 1231,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVQ, RD_CAT_DATAXFER, RD_SET_AVX512F, 1231,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVQ, RD_CAT_DATAXFER, RD_SET_AVX512F, 1231,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVQ, RD_CAT_DATAXFER, RD_SET_AVX, 1231,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVQ, RD_CAT_DATAXFER, RD_SET_AVX, 1231,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVQ, RD_CAT_DATAXFER, RD_SET_AVX, 1231,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVQ, RD_CAT_DATAXFER, RD_SET_AVX, 1231,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1232,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E10, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1232,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E10, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1232,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E10, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_sd, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1232,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E10, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_U, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSD, RD_CAT_DATAXFER, RD_SET_AVX, 1232,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSD, RD_CAT_DATAXFER, RD_SET_AVX, 1232,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSD, RD_CAT_DATAXFER, RD_SET_AVX, 1232,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_U, RD_OPS_sd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSD, RD_CAT_DATAXFER, RD_SET_AVX, 1232,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1233,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S16, RD_EXT_E5, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1233,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), 0, RD_EXT_E5, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1233,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(3, 0), RD_TUPLE_T1S16, RD_EXT_E5, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1233,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), 0, RD_EXT_E5, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSHDUP, RD_CAT_DATAXFER, RD_SET_AVX512F, 1234,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSHDUP, RD_CAT_AVX, RD_SET_AVX, 1234,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSLDUP, RD_CAT_DATAXFER, RD_SET_AVX512F, 1235,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSLDUP, RD_CAT_AVX, RD_SET_AVX, 1235,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSS, RD_CAT_DATAXFER, RD_SET_AVX512F, 1236,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E10, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSS, RD_CAT_DATAXFER, RD_SET_AVX512F, 1236,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E10, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSS, RD_CAT_DATAXFER, RD_SET_AVX512F, 1236,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E10, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_ss, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSS, RD_CAT_DATAXFER, RD_SET_AVX512F, 1236,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E10, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_U, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSS, RD_CAT_DATAXFER, RD_SET_AVX, 1236,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSS, RD_CAT_DATAXFER, RD_SET_AVX, 1236,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSS, RD_CAT_DATAXFER, RD_SET_AVX, 1236,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_U, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVSS, RD_CAT_DATAXFER, RD_SET_AVX, 1236,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVUPD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1237,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVUPD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1237,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVUPD, RD_CAT_DATAXFER, RD_SET_AVX, 1237,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVUPD, RD_CAT_DATAXFER, RD_SET_AVX, 1237,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVUPS, RD_CAT_DATAXFER, RD_SET_AVX512F, 1238,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVUPS, RD_CAT_DATAXFER, RD_SET_AVX512F, 1238,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVUPS, RD_CAT_DATAXFER, RD_SET_AVX, 1238,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVUPS, RD_CAT_DATAXFER, RD_SET_AVX, 1238,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVW, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1239,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), RD_TUPLE_T1S16, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVW, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1239,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), RD_TUPLE_T1S16, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVW, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1239,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), RD_TUPLE_T1S16, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMOVW, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1239,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), RD_TUPLE_T1S16, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMPSADBW, RD_CAT_AVX, RD_SET_AVX, 1240,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMPTRLD, RD_CAT_VTX, RD_SET_VTX, 1241,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXR_SEAM | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF | RD_MOD_SMM_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_VTX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VMPTRST, RD_CAT_VTX, RD_SET_VTX, 1242,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXR_SEAM | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF | RD_MOD_SMM_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_VTX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VMREAD, RD_CAT_VTX, RD_SET_VTX, 1243,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXR_SEAM | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF | RD_MOD_SMM_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_MODRM, RD_CFF_VTX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VMRESUME, RD_CAT_VTX, RD_SET_VTX, 1244,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXR_SEAM | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF | RD_MOD_SMM_OFF,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_VTX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VMRUN, RD_CAT_SYSTEM, RD_SET_SVM, 1245,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXR_SEAM | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF | RD_MOD_SMM_OFF,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SVM,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMSAVE, RD_CAT_SYSTEM, RD_SET_SVM, 1246,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXR_SEAM | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF | RD_MOD_SMM_OFF,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_SVM,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_VMULPD, RD_CAT_AVX512, RD_SET_AVX512F, 1247,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VMULPD, RD_CAT_AVX, RD_SET_AVX, 1247,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_pd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMULPH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1248,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VMULPS, RD_CAT_AVX512, RD_SET_AVX512F, 1249,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VMULPS, RD_CAT_AVX, RD_SET_AVX, 1249,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ps, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMULSD, RD_CAT_AVX512, RD_SET_AVX512F, 1250,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VMULSD, RD_CAT_AVX, RD_SET_AVX, 1250,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMULSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1251,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VMULSS, RD_CAT_AVX512, RD_SET_AVX512F, 1252,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VMULSS, RD_CAT_AVX, RD_SET_AVX, 1252,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VMWRITE, RD_CAT_VTX, RD_SET_VTX, 1253,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXR_SEAM | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF | RD_MOD_SMM_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_F64 | RD_FLAG_MODRM, RD_CFF_VTX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VMXOFF, RD_CAT_VTX, RD_SET_VTX, 1254,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXR_SEAM | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF | RD_MOD_SMM_OFF,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_VTX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VMXON, RD_CAT_VTX, RD_SET_VTX, 1255,
				0,
				RD_MOD_R0 | RD_MOD_PROT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXR_SEAM | RD_MOD_SGX_OFF | RD_MOD_TSX_OFF | RD_MOD_SMM_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_VTX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VORPD, RD_CAT_LOGICAL_FP, RD_SET_AVX512DQ, 1256,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VORPD, RD_CAT_LOGICAL_FP, RD_SET_AVX, 1256,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_pd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VORPS, RD_CAT_LOGICAL_FP, RD_SET_AVX512DQ, 1257,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VORPS, RD_CAT_LOGICAL_FP, RD_SET_AVX, 1257,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ps, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VP2INTERSECTD, RD_CAT_AVX512VP2INTERSECT, RD_SET_AVX512VP2INTERSECT, 1258,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VP2INTERSECT,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, 0, 2),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VP2INTERSECTQ, RD_CAT_AVX512VP2INTERSECT, RD_SET_AVX512VP2INTERSECT, 1259,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VP2INTERSECT,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, 0, 2),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VP4DPWSSD, RD_CAT_VNNIW, RD_SET_AVX5124VNNIW, 1260,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T1_4X, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX5124VNNIW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_oq, 0, RD_OPA_R, 0, 4),
					RD_OP(RD_OPT_M, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VP4DPWSSDS, RD_CAT_VNNIW, RD_SET_AVX5124VNNIW, 1261,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T1_4X, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX5124VNNIW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_oq, 0, RD_OPA_R, 0, 4),
					RD_OP(RD_OPT_M, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPABSB, RD_CAT_AVX512, RD_SET_AVX512BW, 1262,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPABSB, RD_CAT_AVX, RD_SET_AVX, 1262,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPABSD, RD_CAT_AVX512, RD_SET_AVX512F, 1263,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPABSD, RD_CAT_AVX, RD_SET_AVX, 1263,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPABSQ, RD_CAT_AVX512, RD_SET_AVX512F, 1264,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPABSW, RD_CAT_AVX512, RD_SET_AVX512BW, 1265,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPABSW, RD_CAT_AVX, RD_SET_AVX, 1265,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPACKSSDW, RD_CAT_AVX512, RD_SET_AVX512BW, 1266,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPACKSSDW, RD_CAT_AVX, RD_SET_AVX, 1266,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPACKSSWB, RD_CAT_AVX512, RD_SET_AVX512BW, 1267,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPACKSSWB, RD_CAT_AVX, RD_SET_AVX, 1267,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPACKUSDW, RD_CAT_AVX512, RD_SET_AVX512BW, 1268,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPACKUSDW, RD_CAT_AVX, RD_SET_AVX, 1268,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPACKUSWB, RD_CAT_AVX512, RD_SET_AVX512BW, 1269,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPACKUSWB, RD_CAT_AVX, RD_SET_AVX, 1269,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPADDB, RD_CAT_AVX512, RD_SET_AVX512BW, 1270,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPADDB, RD_CAT_AVX, RD_SET_AVX, 1270,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPADDD, RD_CAT_AVX512, RD_SET_AVX512F, 1271,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPADDD, RD_CAT_AVX, RD_SET_AVX, 1271,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPADDQ, RD_CAT_AVX512, RD_SET_AVX512F, 1272,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPADDQ, RD_CAT_AVX, RD_SET_AVX, 1272,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPADDSB, RD_CAT_AVX512, RD_SET_AVX512BW, 1273,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPADDSB, RD_CAT_AVX, RD_SET_AVX, 1273,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPADDSW, RD_CAT_AVX512, RD_SET_AVX512BW, 1274,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPADDSW, RD_CAT_AVX, RD_SET_AVX, 1274,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPADDUSB, RD_CAT_AVX512, RD_SET_AVX512BW, 1275,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPADDUSB, RD_CAT_AVX, RD_SET_AVX, 1275,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPADDUSW, RD_CAT_AVX512, RD_SET_AVX512BW, 1276,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPADDUSW, RD_CAT_AVX, RD_SET_AVX, 1276,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPADDW, RD_CAT_AVX512, RD_SET_AVX512BW, 1277,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPADDW, RD_CAT_AVX, RD_SET_AVX, 1277,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPALIGNR, RD_CAT_AVX512, RD_SET_AVX512BW, 1278,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(5, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPALIGNR, RD_CAT_AVX, RD_SET_AVX, 1278,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPAND, RD_CAT_LOGICAL, RD_SET_AVX, 1279,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPANDD, RD_CAT_LOGICAL, RD_SET_AVX512F, 1280,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPANDN, RD_CAT_LOGICAL, RD_SET_AVX, 1281,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPANDND, RD_CAT_LOGICAL, RD_SET_AVX512F, 1282,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPANDNQ, RD_CAT_LOGICAL, RD_SET_AVX512F, 1283,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPANDQ, RD_CAT_LOGICAL, RD_SET_AVX512F, 1284,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPAVGB, RD_CAT_AVX512, RD_SET_AVX512BW, 1285,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPAVGB, RD_CAT_AVX, RD_SET_AVX, 1285,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPAVGW, RD_CAT_AVX512, RD_SET_AVX512BW, 1286,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPAVGW, RD_CAT_AVX, RD_SET_AVX, 1286,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPBLENDD, RD_CAT_AVX2, RD_SET_AVX2, 1287,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPBLENDMB, RD_CAT_BLEND, RD_SET_AVX512BW, 1288,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPBLENDMD, RD_CAT_BLEND, RD_SET_AVX512F, 1289,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPBLENDMQ, RD_CAT_BLEND, RD_SET_AVX512F, 1290,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPBLENDMW, RD_CAT_BLEND, RD_SET_AVX512BW, 1291,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPBLENDVB, RD_CAT_AVX, RD_SET_AVX, 1292,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPBLENDW, RD_CAT_AVX, RD_SET_AVX, 1293,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPBROADCASTB, RD_CAT_BROADCAST, RD_SET_AVX512BW, 1294,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S8, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPBROADCASTB, RD_CAT_BROADCAST, RD_SET_AVX512BW, 1294,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S8, RD_EXT_E7NM, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPBROADCASTB, RD_CAT_BROADCAST, RD_SET_AVX2, 1294,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPBROADCASTD, RD_CAT_BROADCAST, RD_SET_AVX512F, 1295,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPBROADCASTD, RD_CAT_BROADCAST, RD_SET_AVX512F, 1295,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E7NM, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPBROADCASTD, RD_CAT_BROADCAST, RD_SET_AVX2, 1295,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPBROADCASTMB2Q, RD_CAT_BROADCAST, RD_SET_AVX512CD, 1296,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_E6NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512CD,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPBROADCASTMW2D, RD_CAT_BROADCAST, RD_SET_AVX512CD, 1297,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_E6NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512CD,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPBROADCASTQ, RD_CAT_BROADCAST, RD_SET_AVX512F, 1298,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPBROADCASTQ, RD_CAT_BROADCAST, RD_SET_AVX512F, 1298,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E7NM, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPBROADCASTQ, RD_CAT_BROADCAST, RD_SET_AVX2, 1298,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPBROADCASTW, RD_CAT_BROADCAST, RD_SET_AVX512BW, 1299,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S16, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPBROADCASTW, RD_CAT_BROADCAST, RD_SET_AVX512BW, 1299,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S16, RD_EXT_E7NM, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPBROADCASTW, RD_CAT_BROADCAST, RD_SET_AVX2, 1299,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCLMULQDQ, RD_CAT_VPCLMULQDQ, RD_SET_VPCLMULQDQ, 1300,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_VPCLMULQDQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCLMULQDQ, RD_CAT_VPCLMULQDQ, RD_SET_VPCLMULQDQ, 1300,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_VPCLMULQDQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMOV, RD_CAT_XOP, RD_SET_XOP, 1301,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMOV, RD_CAT_XOP, RD_SET_XOP, 1301,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMPB, RD_CAT_AVX512, RD_SET_AVX512BW, 1302,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(5, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMPD, RD_CAT_AVX512, RD_SET_AVX512F, 1303,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMPEQB, RD_CAT_AVX512, RD_SET_AVX512BW, 1304,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMPEQB, RD_CAT_AVX, RD_SET_AVX, 1304,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMPEQD, RD_CAT_AVX512, RD_SET_AVX512F, 1305,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPCMPEQD, RD_CAT_AVX, RD_SET_AVX, 1305,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMPEQQ, RD_CAT_AVX512, RD_SET_AVX512F, 1306,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPCMPEQQ, RD_CAT_AVX, RD_SET_AVX, 1306,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMPEQW, RD_CAT_AVX512, RD_SET_AVX512BW, 1307,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMPEQW, RD_CAT_AVX, RD_SET_AVX, 1307,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMPESTRI, RD_CAT_STTNI, RD_SET_AVX, 1308,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 4), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_y, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_y, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_y, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VPCMPESTRM, RD_CAT_STTNI, RD_SET_AVX, 1309,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 4), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_y, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_y, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SSE_XMM0, RD_OPS_dq, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VPCMPGTB, RD_CAT_AVX512, RD_SET_AVX512BW, 1310,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMPGTB, RD_CAT_AVX, RD_SET_AVX, 1310,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMPGTD, RD_CAT_AVX512, RD_SET_AVX512F, 1311,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPCMPGTD, RD_CAT_AVX, RD_SET_AVX, 1311,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMPGTQ, RD_CAT_AVX512, RD_SET_AVX512F, 1312,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPCMPGTQ, RD_CAT_AVX, RD_SET_AVX, 1312,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMPGTW, RD_CAT_AVX512, RD_SET_AVX512BW, 1313,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMPGTW, RD_CAT_AVX, RD_SET_AVX, 1313,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMPISTRI, RD_CAT_STTNI, RD_SET_AVX, 1314,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 2), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_y, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VPCMPISTRM, RD_CAT_STTNI, RD_SET_AVX, 1315,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 2), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_SSE_XMM0, RD_OPS_dq, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VPCMPQ, RD_CAT_AVX512, RD_SET_AVX512F, 1316,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMPUB, RD_CAT_AVX512, RD_SET_AVX512BW, 1317,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(5, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMPUD, RD_CAT_AVX512, RD_SET_AVX512F, 1318,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMPUQ, RD_CAT_AVX512, RD_SET_AVX512F, 1319,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMPUW, RD_CAT_AVX512, RD_SET_AVX512BW, 1320,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(5, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCMPW, RD_CAT_AVX512, RD_SET_AVX512BW, 1321,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(5, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCOMB, RD_CAT_XOP, RD_SET_XOP, 1322,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCOMD, RD_CAT_XOP, RD_SET_XOP, 1323,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCOMPRESSB, RD_CAT_AVX512VBMI, RD_SET_AVX512VBMI2, 1324,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S8, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOMZ | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VBMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCOMPRESSD, RD_CAT_COMPRESS, RD_SET_AVX512F, 1325,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOMZ | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCOMPRESSQ, RD_CAT_COMPRESS, RD_SET_AVX512F, 1326,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOMZ | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCOMPRESSW, RD_CAT_AVX512VBMI, RD_SET_AVX512VBMI2, 1327,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S16, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOMZ | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VBMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCOMQ, RD_CAT_XOP, RD_SET_XOP, 1328,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCOMUB, RD_CAT_XOP, RD_SET_XOP, 1329,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCOMUD, RD_CAT_XOP, RD_SET_XOP, 1330,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCOMUQ, RD_CAT_XOP, RD_SET_XOP, 1331,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCOMUW, RD_CAT_XOP, RD_SET_XOP, 1332,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCOMW, RD_CAT_XOP, RD_SET_XOP, 1333,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPCONFLICTD, RD_CAT_CONFLICT, RD_SET_AVX512CD, 1334,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512CD,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPCONFLICTQ, RD_CAT_CONFLICT, RD_SET_AVX512CD, 1335,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512CD,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPDPBSSD, RD_CAT_AVXVNNIINT8, RD_SET_AVXVNNIINT8, 1336,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXVNNIINT8,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPDPBSSDS, RD_CAT_AVXVNNIINT8, RD_SET_AVXVNNIINT8, 1337,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXVNNIINT8,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPDPBSUD, RD_CAT_AVXVNNIINT8, RD_SET_AVXVNNIINT8, 1338,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXVNNIINT8,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPDPBSUDS, RD_CAT_AVXVNNIINT8, RD_SET_AVXVNNIINT8, 1339,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXVNNIINT8,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPDPBUSD, RD_CAT_VNNI, RD_SET_AVX512VNNI, 1340,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VNNI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPDPBUSD, RD_CAT_AVXVNNI, RD_SET_AVXVNNI, 1340,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXVNNI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPDPBUSDS, RD_CAT_VNNI, RD_SET_AVX512VNNI, 1341,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VNNI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPDPBUSDS, RD_CAT_AVXVNNI, RD_SET_AVXVNNI, 1341,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXVNNI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPDPBUUD, RD_CAT_AVXVNNIINT8, RD_SET_AVXVNNIINT8, 1342,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXVNNIINT8,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPDPBUUDS, RD_CAT_AVXVNNIINT8, RD_SET_AVXVNNIINT8, 1343,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXVNNIINT8,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPDPWSSD, RD_CAT_VNNI, RD_SET_AVX512VNNI, 1344,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VNNI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPDPWSSD, RD_CAT_AVXVNNI, RD_SET_AVXVNNI, 1344,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXVNNI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPDPWSSDS, RD_CAT_VNNI, RD_SET_AVX512VNNI, 1345,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VNNI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPDPWSSDS, RD_CAT_AVXVNNI, RD_SET_AVXVNNI, 1345,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXVNNI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPDPWSUD, RD_CAT_AVXVNNIINT16, RD_SET_AVXVNNIINT16, 1346,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXVNNIINT16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPDPWSUDS, RD_CAT_AVXVNNIINT16, RD_SET_AVXVNNIINT16, 1347,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXVNNIINT16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPDPWUSD, RD_CAT_AVXVNNIINT16, RD_SET_AVXVNNIINT16, 1348,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXVNNIINT16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPDPWUSDS, RD_CAT_AVXVNNIINT16, RD_SET_AVXVNNIINT16, 1349,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXVNNIINT16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPDPWUUD, RD_CAT_AVXVNNIINT16, RD_SET_AVXVNNIINT16, 1350,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXVNNIINT16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPDPWUUDS, RD_CAT_AVXVNNIINT16, RD_SET_AVXVNNIINT16, 1351,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXVNNIINT16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERM2F128, RD_CAT_AVX, RD_SET_AVX, 1352,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_qq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERM2I128, RD_CAT_AVX2, RD_SET_AVX2, 1353,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_qq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMB, RD_CAT_AVX512VBMI, RD_SET_AVX512VBMI, 1354,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOMZ | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VBMI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMD, RD_CAT_AVX512, RD_SET_AVX512F, 1355,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_uv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_uv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPERMD, RD_CAT_AVX2, RD_SET_AVX2, 1355,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_qq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMI2B, RD_CAT_AVX512VBMI, RD_SET_AVX512VBMI, 1356,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VBMI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMI2D, RD_CAT_AVX512, RD_SET_AVX512F, 1357,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPERMI2PD, RD_CAT_AVX512, RD_SET_AVX512F, 1358,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPERMI2PS, RD_CAT_AVX512, RD_SET_AVX512F, 1359,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPERMI2Q, RD_CAT_AVX512, RD_SET_AVX512F, 1360,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPERMI2W, RD_CAT_AVX512, RD_SET_AVX512BW, 1361,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMIL2PD, RD_CAT_XOP, RD_SET_XOP, 1362,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(5, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_Im2z, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMIL2PD, RD_CAT_XOP, RD_SET_XOP, 1362,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(5, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_Im2z, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMIL2PS, RD_CAT_XOP, RD_SET_XOP, 1363,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(5, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_Im2z, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMIL2PS, RD_CAT_XOP, RD_SET_XOP, 1363,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(5, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_Im2z, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMILPD, RD_CAT_AVX512, RD_SET_AVX512F, 1364,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPERMILPD, RD_CAT_AVX512, RD_SET_AVX512F, 1364,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMILPD, RD_CAT_AVX, RD_SET_AVX, 1364,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMILPD, RD_CAT_AVX, RD_SET_AVX, 1364,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMILPS, RD_CAT_AVX512, RD_SET_AVX512F, 1365,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPERMILPS, RD_CAT_AVX512, RD_SET_AVX512F, 1365,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMILPS, RD_CAT_AVX, RD_SET_AVX, 1365,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMILPS, RD_CAT_AVX, RD_SET_AVX, 1365,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMPD, RD_CAT_AVX512, RD_SET_AVX512F, 1366,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_uv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_uv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPERMPD, RD_CAT_AVX512, RD_SET_AVX512F, 1366,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_uv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_uv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPERMPD, RD_CAT_AVX512, RD_SET_AVX512F, 1366,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_uv, 0, RD_OPA_R, RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMPD, RD_CAT_AVX2, RD_SET_AVX2, 1366,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMPS, RD_CAT_AVX512, RD_SET_AVX512F, 1367,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_uv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_uv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPERMPS, RD_CAT_AVX512, RD_SET_AVX512F, 1367,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_uv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_uv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPERMPS, RD_CAT_AVX2, RD_SET_AVX2, 1367,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_qq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMQ, RD_CAT_AVX512, RD_SET_AVX512F, 1368,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_uv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_uv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPERMQ, RD_CAT_AVX512, RD_SET_AVX512F, 1368,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_uv, 0, RD_OPA_R, RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMQ, RD_CAT_AVX2, RD_SET_AVX2, 1368,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMT2B, RD_CAT_AVX512VBMI, RD_SET_AVX512VBMI, 1369,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VBMI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMT2D, RD_CAT_AVX512, RD_SET_AVX512F, 1370,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPERMT2PD, RD_CAT_AVX512, RD_SET_AVX512F, 1371,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPERMT2PS, RD_CAT_AVX512, RD_SET_AVX512F, 1372,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPERMT2Q, RD_CAT_AVX512, RD_SET_AVX512F, 1373,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPERMT2W, RD_CAT_AVX512, RD_SET_AVX512BW, 1374,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPERMW, RD_CAT_AVX512, RD_SET_AVX512BW, 1375,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOMZ | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXPANDB, RD_CAT_AVX512VBMI, RD_SET_AVX512VBMI2, 1376,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S8, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VBMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXPANDD, RD_CAT_EXPAND, RD_SET_AVX512F, 1377,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXPANDQ, RD_CAT_EXPAND, RD_SET_AVX512F, 1378,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXPANDW, RD_CAT_AVX512VBMI, RD_SET_AVX512VBMI2, 1379,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_T1S16, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VBMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXTRB, RD_CAT_AVX512, RD_SET_AVX512BW, 1380,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_T1S8, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXTRB, RD_CAT_AVX512, RD_SET_AVX512BW, 1380,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_T1S8, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_D64 | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXTRB, RD_CAT_AVX, RD_SET_AVX, 1380,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXTRB, RD_CAT_AVX, RD_SET_AVX, 1380,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_D64 | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXTRD, RD_CAT_AVX512, RD_SET_AVX512DQ, 1381,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXTRD, RD_CAT_AVX512, RD_SET_AVX512DQ, 1381,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_D64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXTRD, RD_CAT_AVX, RD_SET_AVX, 1381,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXTRD, RD_CAT_AVX, RD_SET_AVX, 1381,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_D64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXTRQ, RD_CAT_AVX512, RD_SET_AVX512DQ, 1382,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXTRQ, RD_CAT_AVX512, RD_SET_AVX512DQ, 1382,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXTRQ, RD_CAT_AVX, RD_SET_AVX, 1382,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXTRQ, RD_CAT_AVX, RD_SET_AVX, 1382,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXTRW, RD_CAT_AVX512, RD_SET_AVX512BW, 1383,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXTRW, RD_CAT_AVX512, RD_SET_AVX512BW, 1383,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_T1S16, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXTRW, RD_CAT_AVX512, RD_SET_AVX512BW, 1383,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_T1S16, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_D64 | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXTRW, RD_CAT_AVX, RD_SET_AVX, 1383,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_D64 | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXTRW, RD_CAT_AVX, RD_SET_AVX, 1383,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPEXTRW, RD_CAT_AVX, RD_SET_AVX, 1383,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_D64 | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPGATHERDD, RD_CAT_GATHER, RD_SET_AVX512F, 1384,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E12, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_vm32n, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VPGATHERDD, RD_CAT_AVX2GATHER, RD_SET_AVX2GATHER, 1384,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_12, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_CRW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_vm32n, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VPGATHERDQ, RD_CAT_GATHER, RD_SET_AVX512F, 1385,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E12, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_vm32h, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VPGATHERDQ, RD_CAT_AVX2GATHER, RD_SET_AVX2GATHER, 1385,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_12, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_CRW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_vm32h, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VPGATHERQD, RD_CAT_GATHER, RD_SET_AVX512F, 1386,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E12, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_vm64n, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VPGATHERQD, RD_CAT_AVX2GATHER, RD_SET_AVX2GATHER, 1386,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_12, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_CRW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_vm64n, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VPGATHERQQ, RD_CAT_GATHER, RD_SET_AVX512F, 1387,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E12, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_vm64n, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VPGATHERQQ, RD_CAT_AVX2GATHER, RD_SET_AVX2GATHER, 1387,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_12, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_CRW, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_vm64n, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VPHADDBD, RD_CAT_XOP, RD_SET_XOP, 1388,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPHADDBQ, RD_CAT_XOP, RD_SET_XOP, 1389,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPHADDBW, RD_CAT_XOP, RD_SET_XOP, 1390,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPHADDD, RD_CAT_AVX, RD_SET_AVX, 1391,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPHADDDQ, RD_CAT_XOP, RD_SET_XOP, 1392,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPHADDSW, RD_CAT_AVX, RD_SET_AVX, 1393,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPHADDUBD, RD_CAT_XOP, RD_SET_XOP, 1394,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPHADDUBQ, RD_CAT_XOP, RD_SET_XOP, 1395,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPHADDUBW, RD_CAT_XOP, RD_SET_XOP, 1396,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPHADDUDQ, RD_CAT_XOP, RD_SET_XOP, 1397,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPHADDUWD, RD_CAT_XOP, RD_SET_XOP, 1398,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPHADDUWQ, RD_CAT_XOP, RD_SET_XOP, 1399,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPHADDW, RD_CAT_AVX, RD_SET_AVX, 1400,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPHADDWD, RD_CAT_XOP, RD_SET_XOP, 1401,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPHADDWQ, RD_CAT_XOP, RD_SET_XOP, 1402,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPHMINPOSUW, RD_CAT_AVX, RD_SET_AVX, 1403,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPHSUBBW, RD_CAT_XOP, RD_SET_XOP, 1404,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPHSUBD, RD_CAT_AVX, RD_SET_AVX, 1405,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPHSUBDQ, RD_CAT_XOP, RD_SET_XOP, 1406,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPHSUBSW, RD_CAT_AVX, RD_SET_AVX, 1407,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPHSUBW, RD_CAT_AVX, RD_SET_AVX, 1408,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPHSUBWD, RD_CAT_XOP, RD_SET_XOP, 1409,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPINSRB, RD_CAT_AVX512, RD_SET_AVX512BW, 1410,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), RD_TUPLE_T1S8, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPINSRB, RD_CAT_AVX512, RD_SET_AVX512BW, 1410,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), RD_TUPLE_T1S8, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPINSRB, RD_CAT_AVX, RD_SET_AVX, 1410,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPINSRB, RD_CAT_AVX, RD_SET_AVX, 1410,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPINSRD, RD_CAT_AVX512, RD_SET_AVX512DQ, 1411,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPINSRD, RD_CAT_AVX, RD_SET_AVX, 1411,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPINSRQ, RD_CAT_AVX512, RD_SET_AVX512DQ, 1412,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPINSRQ, RD_CAT_AVX, RD_SET_AVX, 1412,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_IWO64 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPINSRW, RD_CAT_AVX512, RD_SET_AVX512BW, 1413,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPINSRW, RD_CAT_AVX512, RD_SET_AVX512BW, 1413,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E9NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPINSRW, RD_CAT_AVX, RD_SET_AVX, 1413,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_w, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPINSRW, RD_CAT_AVX, RD_SET_AVX, 1413,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_R, RD_OPS_d, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPLZCNTD, RD_CAT_CONFLICT, RD_SET_AVX512CD, 1414,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512CD,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPLZCNTQ, RD_CAT_CONFLICT, RD_SET_AVX512CD, 1415,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512CD,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPMACSDD, RD_CAT_XOP, RD_SET_XOP, 1416,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMACSDQH, RD_CAT_XOP, RD_SET_XOP, 1417,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMACSDQL, RD_CAT_XOP, RD_SET_XOP, 1418,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMACSSDD, RD_CAT_XOP, RD_SET_XOP, 1419,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMACSSDQH, RD_CAT_XOP, RD_SET_XOP, 1420,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMACSSDQL, RD_CAT_XOP, RD_SET_XOP, 1421,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMACSSWD, RD_CAT_XOP, RD_SET_XOP, 1422,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMACSSWW, RD_CAT_XOP, RD_SET_XOP, 1423,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMACSWD, RD_CAT_XOP, RD_SET_XOP, 1424,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMACSWW, RD_CAT_XOP, RD_SET_XOP, 1425,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMADCSSWD, RD_CAT_XOP, RD_SET_XOP, 1426,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMADCSWD, RD_CAT_XOP, RD_SET_XOP, 1427,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMADD52HUQ, RD_CAT_IFMA, RD_SET_AVX512IFMA, 1428,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512IFMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPMADD52HUQ, RD_CAT_AVXIFMA, RD_SET_AVXIFMA, 1428,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXIFMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMADD52LUQ, RD_CAT_IFMA, RD_SET_AVX512IFMA, 1429,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512IFMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPMADD52LUQ, RD_CAT_AVXIFMA, RD_SET_AVXIFMA, 1429,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVXIFMA,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMADDUBSW, RD_CAT_AVX512, RD_SET_AVX512BW, 1430,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMADDUBSW, RD_CAT_AVX, RD_SET_AVX, 1430,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMADDWD, RD_CAT_AVX512, RD_SET_AVX512BW, 1431,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMADDWD, RD_CAT_AVX, RD_SET_AVX, 1431,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMASKMOVD, RD_CAT_AVX2, RD_SET_AVX2, 1432,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMASKMOVD, RD_CAT_AVX2, RD_SET_AVX2, 1432,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMASKMOVQ, RD_CAT_AVX2, RD_SET_AVX2, 1433,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_M, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMASKMOVQ, RD_CAT_AVX2, RD_SET_AVX2, 1433,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMAXSB, RD_CAT_AVX512, RD_SET_AVX512BW, 1434,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMAXSB, RD_CAT_AVX, RD_SET_AVX, 1434,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMAXSD, RD_CAT_AVX512, RD_SET_AVX512F, 1435,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPMAXSD, RD_CAT_AVX, RD_SET_AVX, 1435,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMAXSQ, RD_CAT_AVX512, RD_SET_AVX512F, 1436,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPMAXSW, RD_CAT_AVX512, RD_SET_AVX512BW, 1437,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMAXSW, RD_CAT_AVX, RD_SET_AVX, 1437,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMAXUB, RD_CAT_AVX512, RD_SET_AVX512BW, 1438,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMAXUB, RD_CAT_AVX, RD_SET_AVX, 1438,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMAXUD, RD_CAT_AVX512, RD_SET_AVX512F, 1439,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPMAXUD, RD_CAT_AVX, RD_SET_AVX, 1439,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMAXUQ, RD_CAT_AVX512, RD_SET_AVX512F, 1440,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPMAXUW, RD_CAT_AVX512, RD_SET_AVX512BW, 1441,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMAXUW, RD_CAT_AVX, RD_SET_AVX, 1441,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMINSB, RD_CAT_AVX512, RD_SET_AVX512BW, 1442,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMINSB, RD_CAT_AVX, RD_SET_AVX, 1442,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMINSD, RD_CAT_AVX512, RD_SET_AVX512F, 1443,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPMINSD, RD_CAT_AVX, RD_SET_AVX, 1443,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMINSQ, RD_CAT_AVX512, RD_SET_AVX512F, 1444,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPMINSW, RD_CAT_AVX512, RD_SET_AVX512BW, 1445,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMINSW, RD_CAT_AVX, RD_SET_AVX, 1445,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMINUB, RD_CAT_AVX512, RD_SET_AVX512BW, 1446,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMINUB, RD_CAT_AVX, RD_SET_AVX, 1446,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMINUD, RD_CAT_AVX512, RD_SET_AVX512F, 1447,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPMINUD, RD_CAT_AVX, RD_SET_AVX, 1447,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMINUQ, RD_CAT_AVX512, RD_SET_AVX512F, 1448,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPMINUW, RD_CAT_AVX512, RD_SET_AVX512BW, 1449,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMINUW, RD_CAT_AVX, RD_SET_AVX, 1449,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVB2M, RD_CAT_DATAXFER, RD_SET_AVX512BW, 1450,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_E7NM, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVD2M, RD_CAT_DATAXFER, RD_SET_AVX512DQ, 1451,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_E7NM, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVDB, RD_CAT_DATAXFER, RD_SET_AVX512F, 1452,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_QVM, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_qv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVDW, RD_CAT_DATAXFER, RD_SET_AVX512F, 1453,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_HVM, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVM2B, RD_CAT_DATAXFER, RD_SET_AVX512BW, 1454,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_E7NM, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVM2D, RD_CAT_DATAXFER, RD_SET_AVX512DQ, 1455,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_E7NM, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVM2Q, RD_CAT_DATAXFER, RD_SET_AVX512DQ, 1456,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_E7NM, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVM2W, RD_CAT_DATAXFER, RD_SET_AVX512BW, 1457,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_E7NM, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_mK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVMSKB, RD_CAT_DATAXFER, RD_SET_AVX, 1458,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_D64 | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVQ2M, RD_CAT_DATAXFER, RD_SET_AVX512DQ, 1459,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_E7NM, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVQB, RD_CAT_DATAXFER, RD_SET_AVX512F, 1460,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_OVM, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_ev, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVQD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1461,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_HVM, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVQW, RD_CAT_DATAXFER, RD_SET_AVX512F, 1462,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_QVM, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_qv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSDB, RD_CAT_DATAXFER, RD_SET_AVX512F, 1463,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_QVM, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_qv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSDW, RD_CAT_DATAXFER, RD_SET_AVX512F, 1464,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_HVM, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSQB, RD_CAT_DATAXFER, RD_SET_AVX512F, 1465,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_OVM, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_ev, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSQD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1466,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_HVM, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSQW, RD_CAT_DATAXFER, RD_SET_AVX512F, 1467,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_QVM, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_qv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSWB, RD_CAT_DATAXFER, RD_SET_AVX512BW, 1468,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_HVM, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSXBD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1469,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_QVM, RD_EXT_E5, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSXBD, RD_CAT_AVX, RD_SET_AVX, 1469,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSXBD, RD_CAT_AVX2, RD_SET_AVX2, 1469,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSXBQ, RD_CAT_DATAXFER, RD_SET_AVX512F, 1470,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_OVM, RD_EXT_E5, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ev, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSXBQ, RD_CAT_AVX, RD_SET_AVX, 1470,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSXBQ, RD_CAT_AVX2, RD_SET_AVX2, 1470,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSXBW, RD_CAT_DATAXFER, RD_SET_AVX512BW, 1471,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_HVM, RD_EXT_E5, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSXBW, RD_CAT_AVX, RD_SET_AVX, 1471,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSXBW, RD_CAT_AVX2, RD_SET_AVX2, 1471,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSXDQ, RD_CAT_DATAXFER, RD_SET_AVX512F, 1472,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_HVM, RD_EXT_E5, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSXDQ, RD_CAT_AVX, RD_SET_AVX, 1472,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSXDQ, RD_CAT_AVX2, RD_SET_AVX2, 1472,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSXWD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1473,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_HVM, RD_EXT_E5, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSXWD, RD_CAT_AVX, RD_SET_AVX, 1473,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSXWD, RD_CAT_AVX2, RD_SET_AVX2, 1473,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSXWQ, RD_CAT_DATAXFER, RD_SET_AVX512F, 1474,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_QVM, RD_EXT_E5, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSXWQ, RD_CAT_AVX, RD_SET_AVX, 1474,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVSXWQ, RD_CAT_AVX2, RD_SET_AVX2, 1474,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVUSDB, RD_CAT_DATAXFER, RD_SET_AVX512F, 1475,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_QVM, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_qv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVUSDW, RD_CAT_DATAXFER, RD_SET_AVX512F, 1476,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_HVM, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVUSQB, RD_CAT_DATAXFER, RD_SET_AVX512F, 1477,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_OVM, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_ev, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVUSQD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1478,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_HVM, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVUSQW, RD_CAT_DATAXFER, RD_SET_AVX512F, 1479,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_QVM, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_qv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVUSWB, RD_CAT_DATAXFER, RD_SET_AVX512BW, 1480,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_HVM, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVW2M, RD_CAT_DATAXFER, RD_SET_AVX512BW, 1481,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_E7NM, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVWB, RD_CAT_DATAXFER, RD_SET_AVX512BW, 1482,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_HVM, RD_EXT_E6, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVZXBD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1483,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_QVM, RD_EXT_E5, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVZXBD, RD_CAT_AVX, RD_SET_AVX, 1483,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVZXBD, RD_CAT_AVX2, RD_SET_AVX2, 1483,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVZXBQ, RD_CAT_DATAXFER, RD_SET_AVX512F, 1484,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_OVM, RD_EXT_E5, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ev, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVZXBQ, RD_CAT_AVX, RD_SET_AVX, 1484,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_w, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVZXBQ, RD_CAT_AVX2, RD_SET_AVX2, 1484,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVZXBW, RD_CAT_DATAXFER, RD_SET_AVX512BW, 1485,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_HVM, RD_EXT_E5, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVZXBW, RD_CAT_AVX, RD_SET_AVX, 1485,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVZXBW, RD_CAT_AVX2, RD_SET_AVX2, 1485,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVZXDQ, RD_CAT_DATAXFER, RD_SET_AVX512F, 1486,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_HVM, RD_EXT_E5, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVZXDQ, RD_CAT_AVX, RD_SET_AVX, 1486,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVZXDQ, RD_CAT_AVX2, RD_SET_AVX2, 1486,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVZXWD, RD_CAT_DATAXFER, RD_SET_AVX512F, 1487,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_HVM, RD_EXT_E5, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_hv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVZXWD, RD_CAT_AVX, RD_SET_AVX, 1487,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVZXWD, RD_CAT_AVX2, RD_SET_AVX2, 1487,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVZXWQ, RD_CAT_DATAXFER, RD_SET_AVX512F, 1488,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_QVM, RD_EXT_E5, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_qv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVZXWQ, RD_CAT_AVX, RD_SET_AVX, 1488,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_d, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMOVZXWQ, RD_CAT_AVX2, RD_SET_AVX2, 1488,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMULDQ, RD_CAT_AVX512, RD_SET_AVX512F, 1489,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPMULDQ, RD_CAT_AVX, RD_SET_AVX, 1489,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMULHRSW, RD_CAT_AVX512, RD_SET_AVX512BW, 1490,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMULHRSW, RD_CAT_AVX, RD_SET_AVX, 1490,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMULHUW, RD_CAT_AVX512, RD_SET_AVX512BW, 1491,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMULHUW, RD_CAT_AVX, RD_SET_AVX, 1491,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMULHW, RD_CAT_AVX512, RD_SET_AVX512BW, 1492,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMULHW, RD_CAT_AVX, RD_SET_AVX, 1492,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMULLD, RD_CAT_AVX512, RD_SET_AVX512F, 1493,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPMULLD, RD_CAT_AVX, RD_SET_AVX, 1493,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMULLQ, RD_CAT_AVX512, RD_SET_AVX512DQ, 1494,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPMULLW, RD_CAT_AVX512, RD_SET_AVX512BW, 1495,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMULLW, RD_CAT_AVX, RD_SET_AVX, 1495,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPMULTISHIFTQB, RD_CAT_AVX512VBMI, RD_SET_AVX512VBMI, 1496,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VBMI,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPMULUDQ, RD_CAT_AVX512, RD_SET_AVX512F, 1497,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPMULUDQ, RD_CAT_AVX, RD_SET_AVX, 1497,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPOPCNTB, RD_CAT_VPOPCNT, RD_SET_AVX512BITALG, 1498,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BITALG,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPOPCNTD, RD_CAT_VPOPCNT, RD_SET_AVX512VPOPCNTDQ, 1499,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VPOPCNTDQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPOPCNTQ, RD_CAT_VPOPCNT, RD_SET_AVX512VPOPCNTDQ, 1500,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VPOPCNTDQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPOPCNTW, RD_CAT_VPOPCNT, RD_SET_AVX512BITALG, 1501,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BITALG,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPOR, RD_CAT_LOGICAL, RD_SET_AVX, 1502,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPORD, RD_CAT_LOGICAL, RD_SET_AVX512F, 1503,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPORQ, RD_CAT_LOGICAL, RD_SET_AVX512F, 1504,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPPERM, RD_CAT_XOP, RD_SET_XOP, 1505,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPPERM, RD_CAT_XOP, RD_SET_XOP, 1505,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_L, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPROLD, RD_CAT_AVX512, RD_SET_AVX512F, 1506,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPROLQ, RD_CAT_AVX512, RD_SET_AVX512F, 1507,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPROLVD, RD_CAT_AVX512, RD_SET_AVX512F, 1508,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPROLVQ, RD_CAT_AVX512, RD_SET_AVX512F, 1509,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPRORD, RD_CAT_AVX512, RD_SET_AVX512F, 1510,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPRORQ, RD_CAT_AVX512, RD_SET_AVX512F, 1511,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPRORVD, RD_CAT_AVX512, RD_SET_AVX512F, 1512,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPRORVQ, RD_CAT_AVX512, RD_SET_AVX512F, 1513,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPROTB, RD_CAT_XOP, RD_SET_XOP, 1514,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPROTB, RD_CAT_XOP, RD_SET_XOP, 1514,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPROTB, RD_CAT_XOP, RD_SET_XOP, 1514,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPROTD, RD_CAT_XOP, RD_SET_XOP, 1515,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPROTD, RD_CAT_XOP, RD_SET_XOP, 1515,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPROTD, RD_CAT_XOP, RD_SET_XOP, 1515,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPROTQ, RD_CAT_XOP, RD_SET_XOP, 1516,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPROTQ, RD_CAT_XOP, RD_SET_XOP, 1516,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPROTQ, RD_CAT_XOP, RD_SET_XOP, 1516,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPROTW, RD_CAT_XOP, RD_SET_XOP, 1517,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPROTW, RD_CAT_XOP, RD_SET_XOP, 1517,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPROTW, RD_CAT_XOP, RD_SET_XOP, 1517,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSADBW, RD_CAT_AVX512, RD_SET_AVX512BW, 1518,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSADBW, RD_CAT_AVX, RD_SET_AVX, 1518,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSCATTERDD, RD_CAT_SCATTER, RD_SET_AVX512F, 1519,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E12, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm32n, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VPSCATTERDQ, RD_CAT_SCATTER, RD_SET_AVX512F, 1520,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E12, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm32h, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VPSCATTERQD, RD_CAT_SCATTER, RD_SET_AVX512F, 1521,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E12, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm64n, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_hv, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VPSCATTERQQ, RD_CAT_SCATTER, RD_SET_AVX512F, 1522,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E12, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm64n, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VPSHAB, RD_CAT_XOP, RD_SET_XOP, 1523,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHAB, RD_CAT_XOP, RD_SET_XOP, 1523,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHAD, RD_CAT_XOP, RD_SET_XOP, 1524,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHAD, RD_CAT_XOP, RD_SET_XOP, 1524,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHAQ, RD_CAT_XOP, RD_SET_XOP, 1525,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHAQ, RD_CAT_XOP, RD_SET_XOP, 1525,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHAW, RD_CAT_XOP, RD_SET_XOP, 1526,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHAW, RD_CAT_XOP, RD_SET_XOP, 1526,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHLB, RD_CAT_XOP, RD_SET_XOP, 1527,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHLB, RD_CAT_XOP, RD_SET_XOP, 1527,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHLB, RD_CAT_XOP, RD_SET_XOP, 1527,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHLB, RD_CAT_XOP, RD_SET_XOP, 1527,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHLD, RD_CAT_XOP, RD_SET_XOP, 1528,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHLDD, RD_CAT_AVX512VBMI, RD_SET_AVX512VBMI2, 1529,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VBMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHLDQ, RD_CAT_AVX512VBMI, RD_SET_AVX512VBMI2, 1530,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VBMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHLDVD, RD_CAT_AVX512VBMI, RD_SET_AVX512VBMI2, 1531,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VBMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPSHLDVQ, RD_CAT_AVX512VBMI, RD_SET_AVX512VBMI2, 1532,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VBMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPSHLDVW, RD_CAT_AVX512VBMI, RD_SET_AVX512VBMI2, 1533,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VBMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHLDW, RD_CAT_AVX512VBMI, RD_SET_AVX512VBMI2, 1534,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(5, 0), RD_TUPLE_FVM, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VBMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHLQ, RD_CAT_XOP, RD_SET_XOP, 1535,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHLQ, RD_CAT_XOP, RD_SET_XOP, 1535,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHLW, RD_CAT_XOP, RD_SET_XOP, 1536,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_XOP,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHRDD, RD_CAT_AVX512VBMI, RD_SET_AVX512VBMI2, 1537,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VBMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHRDQ, RD_CAT_AVX512VBMI, RD_SET_AVX512VBMI2, 1538,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VBMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHRDVD, RD_CAT_AVX512VBMI, RD_SET_AVX512VBMI2, 1539,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VBMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPSHRDVQ, RD_CAT_AVX512VBMI, RD_SET_AVX512VBMI2, 1540,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VBMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPSHRDVW, RD_CAT_AVX512VBMI, RD_SET_AVX512VBMI2, 1541,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VBMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHRDW, RD_CAT_AVX512VBMI, RD_SET_AVX512VBMI2, 1542,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(5, 0), RD_TUPLE_FVM, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512VBMI2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHUFB, RD_CAT_AVX512, RD_SET_AVX512BW, 1543,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHUFB, RD_CAT_AVX, RD_SET_AVX, 1543,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHUFBITQMB, RD_CAT_AVX512VBMI, RD_SET_AVX512BITALG, 1544,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BITALG,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHUFD, RD_CAT_AVX512, RD_SET_AVX512F, 1545,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHUFD, RD_CAT_AVX, RD_SET_AVX, 1545,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHUFHW, RD_CAT_AVX512, RD_SET_AVX512BW, 1546,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHUFHW, RD_CAT_AVX, RD_SET_AVX, 1546,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHUFLW, RD_CAT_AVX512, RD_SET_AVX512BW, 1547,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSHUFLW, RD_CAT_AVX, RD_SET_AVX, 1547,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSIGNB, RD_CAT_AVX, RD_SET_AVX, 1548,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSIGND, RD_CAT_AVX, RD_SET_AVX, 1549,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSIGNW, RD_CAT_AVX, RD_SET_AVX, 1550,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSLLD, RD_CAT_AVX512, RD_SET_AVX512F, 1551,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSLLD, RD_CAT_AVX512, RD_SET_AVX512F, 1551,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_M128, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSLLD, RD_CAT_AVX, RD_SET_AVX, 1551,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSLLD, RD_CAT_AVX, RD_SET_AVX, 1551,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSLLDQ, RD_CAT_AVX512, RD_SET_AVX512BW, 1552,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSLLDQ, RD_CAT_AVX, RD_SET_AVX, 1552,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSLLQ, RD_CAT_AVX512, RD_SET_AVX512F, 1553,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSLLQ, RD_CAT_AVX512, RD_SET_AVX512F, 1553,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_M128, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSLLQ, RD_CAT_AVX, RD_SET_AVX, 1553,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSLLQ, RD_CAT_AVX, RD_SET_AVX, 1553,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSLLVD, RD_CAT_AVX512, RD_SET_AVX512F, 1554,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPSLLVD, RD_CAT_AVX2, RD_SET_AVX2, 1554,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSLLVQ, RD_CAT_AVX512, RD_SET_AVX512F, 1555,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPSLLVQ, RD_CAT_AVX2, RD_SET_AVX2, 1555,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSLLVW, RD_CAT_AVX512, RD_SET_AVX512BW, 1556,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSLLW, RD_CAT_AVX512, RD_SET_AVX512BW, 1557,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSLLW, RD_CAT_AVX512, RD_SET_AVX512BW, 1557,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_M128, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSLLW, RD_CAT_AVX, RD_SET_AVX, 1557,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSLLW, RD_CAT_AVX, RD_SET_AVX, 1557,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRAD, RD_CAT_AVX512, RD_SET_AVX512F, 1558,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRAD, RD_CAT_AVX512, RD_SET_AVX512F, 1558,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_M128, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRAD, RD_CAT_AVX, RD_SET_AVX, 1558,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRAD, RD_CAT_AVX, RD_SET_AVX, 1558,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRAQ, RD_CAT_AVX512, RD_SET_AVX512F, 1559,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRAQ, RD_CAT_AVX512, RD_SET_AVX512F, 1559,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_M128, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRAVD, RD_CAT_AVX512, RD_SET_AVX512F, 1560,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPSRAVD, RD_CAT_AVX2, RD_SET_AVX2, 1560,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRAVQ, RD_CAT_AVX512, RD_SET_AVX512F, 1561,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPSRAVW, RD_CAT_AVX512, RD_SET_AVX512BW, 1562,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRAW, RD_CAT_AVX512, RD_SET_AVX512BW, 1563,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRAW, RD_CAT_AVX512, RD_SET_AVX512BW, 1563,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_M128, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRAW, RD_CAT_AVX, RD_SET_AVX, 1563,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRAW, RD_CAT_AVX, RD_SET_AVX, 1563,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRLD, RD_CAT_AVX512, RD_SET_AVX512F, 1564,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRLD, RD_CAT_AVX512, RD_SET_AVX512F, 1564,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_M128, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRLD, RD_CAT_AVX, RD_SET_AVX, 1564,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRLD, RD_CAT_AVX, RD_SET_AVX, 1564,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRLDQ, RD_CAT_AVX512, RD_SET_AVX512BW, 1565,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRLDQ, RD_CAT_AVX, RD_SET_AVX, 1565,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRLQ, RD_CAT_AVX512, RD_SET_AVX512F, 1566,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRLQ, RD_CAT_AVX512, RD_SET_AVX512F, 1566,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_M128, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRLQ, RD_CAT_AVX, RD_SET_AVX, 1566,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRLQ, RD_CAT_AVX, RD_SET_AVX, 1566,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRLVD, RD_CAT_AVX512, RD_SET_AVX512F, 1567,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPSRLVD, RD_CAT_AVX2, RD_SET_AVX2, 1567,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRLVQ, RD_CAT_AVX512, RD_SET_AVX512F, 1568,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPSRLVQ, RD_CAT_AVX2, RD_SET_AVX2, 1568,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRLVW, RD_CAT_AVX512, RD_SET_AVX512BW, 1569,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRLW, RD_CAT_AVX512, RD_SET_AVX512BW, 1570,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRLW, RD_CAT_AVX512, RD_SET_AVX512BW, 1570,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_M128, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRLW, RD_CAT_AVX, RD_SET_AVX, 1570,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_7, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSRLW, RD_CAT_AVX, RD_SET_AVX, 1570,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSUBB, RD_CAT_AVX512, RD_SET_AVX512BW, 1571,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSUBB, RD_CAT_AVX, RD_SET_AVX, 1571,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSUBD, RD_CAT_AVX512, RD_SET_AVX512F, 1572,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPSUBD, RD_CAT_AVX, RD_SET_AVX, 1572,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSUBQ, RD_CAT_AVX512, RD_SET_AVX512F, 1573,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPSUBQ, RD_CAT_AVX, RD_SET_AVX, 1573,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSUBSB, RD_CAT_AVX512, RD_SET_AVX512BW, 1574,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSUBSB, RD_CAT_AVX, RD_SET_AVX, 1574,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSUBSW, RD_CAT_AVX512, RD_SET_AVX512BW, 1575,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSUBSW, RD_CAT_AVX, RD_SET_AVX, 1575,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSUBUSB, RD_CAT_AVX512, RD_SET_AVX512BW, 1576,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSUBUSB, RD_CAT_AVX, RD_SET_AVX, 1576,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSUBUSW, RD_CAT_AVX512, RD_SET_AVX512BW, 1577,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSUBUSW, RD_CAT_AVX, RD_SET_AVX, 1577,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSUBW, RD_CAT_AVX512, RD_SET_AVX512BW, 1578,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPSUBW, RD_CAT_AVX, RD_SET_AVX, 1578,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPTERNLOGD, RD_CAT_LOGICAL, RD_SET_AVX512F, 1579,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPTERNLOGQ, RD_CAT_LOGICAL, RD_SET_AVX512F, 1580,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPTEST, RD_CAT_LOGICAL, RD_SET_AVX, 1581,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VPTESTMB, RD_CAT_LOGICAL, RD_SET_AVX512BW, 1582,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPTESTMD, RD_CAT_LOGICAL, RD_SET_AVX512F, 1583,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPTESTMQ, RD_CAT_LOGICAL, RD_SET_AVX512F, 1584,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPTESTMW, RD_CAT_LOGICAL, RD_SET_AVX512BW, 1585,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPTESTNMB, RD_CAT_LOGICAL, RD_SET_AVX512BW, 1586,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPTESTNMD, RD_CAT_LOGICAL, RD_SET_AVX512F, 1587,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPTESTNMQ, RD_CAT_LOGICAL, RD_SET_AVX512F, 1588,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPTESTNMW, RD_CAT_LOGICAL, RD_SET_AVX512BW, 1589,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4nb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_rK, RD_OPS_q, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPUNPCKHBW, RD_CAT_AVX512, RD_SET_AVX512BW, 1590,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPUNPCKHBW, RD_CAT_AVX, RD_SET_AVX, 1590,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPUNPCKHDQ, RD_CAT_AVX512, RD_SET_AVX512F, 1591,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPUNPCKHDQ, RD_CAT_AVX, RD_SET_AVX, 1591,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPUNPCKHQDQ, RD_CAT_AVX512, RD_SET_AVX512F, 1592,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPUNPCKHQDQ, RD_CAT_AVX, RD_SET_AVX, 1592,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPUNPCKHWD, RD_CAT_AVX512, RD_SET_AVX512BW, 1593,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPUNPCKHWD, RD_CAT_AVX, RD_SET_AVX, 1593,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPUNPCKLBW, RD_CAT_AVX512, RD_SET_AVX512BW, 1594,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPUNPCKLBW, RD_CAT_AVX, RD_SET_AVX, 1594,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPUNPCKLDQ, RD_CAT_AVX512, RD_SET_AVX512F, 1595,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPUNPCKLDQ, RD_CAT_AVX, RD_SET_AVX, 1595,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPUNPCKLQDQ, RD_CAT_AVX512, RD_SET_AVX512F, 1596,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VPUNPCKLQDQ, RD_CAT_AVX, RD_SET_AVX, 1596,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPUNPCKLWD, RD_CAT_AVX512, RD_SET_AVX512BW, 1597,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_FVM, RD_EXT_E4NFnb, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512BW,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPUNPCKLWD, RD_CAT_AVX, RD_SET_AVX, 1597,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPXOR, RD_CAT_LOGICAL, RD_SET_AVX, 1598,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VPXORD, RD_CAT_LOGICAL, RD_SET_AVX512F, 1599,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VPXORQ, RD_CAT_LOGICAL, RD_SET_AVX512F, 1600,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VRANGEPD, RD_CAT_AVX512, RD_SET_AVX512DQ, 1601,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VRANGEPS, RD_CAT_AVX512, RD_SET_AVX512DQ, 1602,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VRANGESD, RD_CAT_AVX512, RD_SET_AVX512DQ, 1603,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(5, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VRANGESS, RD_CAT_AVX512, RD_SET_AVX512DQ, 1604,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(5, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VRCP14PD, RD_CAT_AVX512, RD_SET_AVX512F, 1605,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VRCP14PS, RD_CAT_AVX512, RD_SET_AVX512F, 1606,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VRCP14SD, RD_CAT_AVX512, RD_SET_AVX512F, 1607,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E10, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VRCP14SS, RD_CAT_AVX512, RD_SET_AVX512F, 1608,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E10, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VRCP28PD, RD_CAT_KNL, RD_SET_AVX512ER, 1609,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512ER,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_oq, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VRCP28PS, RD_CAT_KNL, RD_SET_AVX512ER, 1610,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512ER,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_oq, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VRCP28SD, RD_CAT_KNL, RD_SET_AVX512ER, 1611,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512ER,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VRCP28SS, RD_CAT_KNL, RD_SET_AVX512ER, 1612,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512ER,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VRCPPH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1613,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VRCPPS, RD_CAT_AVX, RD_SET_AVX, 1614,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VRCPSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1615,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E10, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VRCPSS, RD_CAT_AVX, RD_SET_AVX, 1616,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VREDUCEPD, RD_CAT_AVX512, RD_SET_AVX512DQ, 1617,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VREDUCEPH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1618,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B16, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VREDUCEPS, RD_CAT_AVX512, RD_SET_AVX512DQ, 1619,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VREDUCESD, RD_CAT_AVX512, RD_SET_AVX512DQ, 1620,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(5, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VREDUCESH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1621,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(5, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VREDUCESS, RD_CAT_AVX512, RD_SET_AVX512DQ, 1622,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(5, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VRNDSCALEPD, RD_CAT_AVX512, RD_SET_AVX512F, 1623,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VRNDSCALEPH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1624,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B16, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VRNDSCALEPS, RD_CAT_AVX512, RD_SET_AVX512F, 1625,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VRNDSCALESD, RD_CAT_AVX512, RD_SET_AVX512F, 1626,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(5, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VRNDSCALESH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1627,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(5, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VRNDSCALESS, RD_CAT_AVX512, RD_SET_AVX512F, 1628,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(5, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VROUNDPD, RD_CAT_AVX, RD_SET_AVX, 1629,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VROUNDPS, RD_CAT_AVX, RD_SET_AVX, 1630,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VROUNDSD, RD_CAT_AVX, RD_SET_AVX, 1631,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VROUNDSS, RD_CAT_AVX, RD_SET_AVX, 1632,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VRSQRT14PD, RD_CAT_AVX512, RD_SET_AVX512F, 1633,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VRSQRT14PS, RD_CAT_AVX512, RD_SET_AVX512F, 1634,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VRSQRT14SD, RD_CAT_AVX512, RD_SET_AVX512F, 1635,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E10, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VRSQRT14SS, RD_CAT_AVX512, RD_SET_AVX512F, 1636,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E10, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VRSQRT28PD, RD_CAT_KNL, RD_SET_AVX512ER, 1637,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512ER,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_oq, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VRSQRT28PS, RD_CAT_KNL, RD_SET_AVX512ER, 1638,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512ER,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_oq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_oq, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VRSQRT28SD, RD_CAT_KNL, RD_SET_AVX512ER, 1639,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512ER,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VRSQRT28SS, RD_CAT_KNL, RD_SET_AVX512ER, 1640,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512ER,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VRSQRTPH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1641,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VRSQRTPS, RD_CAT_AVX, RD_SET_AVX, 1642,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VRSQRTSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1643,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E10, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VRSQRTSS, RD_CAT_AVX, RD_SET_AVX, 1644,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSCALEFPD, RD_CAT_AVX512, RD_SET_AVX512F, 1645,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VSCALEFPH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1646,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VSCALEFPS, RD_CAT_AVX512, RD_SET_AVX512F, 1647,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VSCALEFSD, RD_CAT_AVX512, RD_SET_AVX512F, 1648,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VSCALEFSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1649,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VSCALEFSS, RD_CAT_AVX512, RD_SET_AVX512F, 1650,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VSCATTERDPD, RD_CAT_SCATTER, RD_SET_AVX512F, 1651,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E12, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm32h, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VSCATTERDPS, RD_CAT_SCATTER, RD_SET_AVX512F, 1652,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E12, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm32n, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VSCATTERPF0DPD, RD_CAT_SCATTER, RD_SET_AVX512PF, 1653,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E12NP, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB, RD_CFF_AVX512PF,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm32h, 0, RD_OPA_P, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSCATTERPF0DPS, RD_CAT_SCATTER, RD_SET_AVX512PF, 1654,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E12NP, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB, RD_CFF_AVX512PF,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm32n, 0, RD_OPA_P, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSCATTERPF0QPD, RD_CAT_SCATTER, RD_SET_AVX512PF, 1655,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E12NP, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB, RD_CFF_AVX512PF,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm64n, 0, RD_OPA_P, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSCATTERPF0QPS, RD_CAT_SCATTER, RD_SET_AVX512PF, 1656,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E12NP, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB, RD_CFF_AVX512PF,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm64n, 0, RD_OPA_P, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSCATTERPF1DPD, RD_CAT_SCATTER, RD_SET_AVX512PF, 1657,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E12NP, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB, RD_CFF_AVX512PF,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm32h, 0, RD_OPA_P, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSCATTERPF1DPS, RD_CAT_SCATTER, RD_SET_AVX512PF, 1658,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E12NP, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB, RD_CFF_AVX512PF,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm32n, 0, RD_OPA_P, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSCATTERPF1QPD, RD_CAT_SCATTER, RD_SET_AVX512PF, 1659,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E12NP, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB, RD_CFF_AVX512PF,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm64n, 0, RD_OPA_P, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSCATTERPF1QPS, RD_CAT_SCATTER, RD_SET_AVX512PF, 1660,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(2, 0), RD_TUPLE_T1S, RD_EXT_E12NP, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB, RD_CFF_AVX512PF,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm64n, 0, RD_OPA_P, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSCATTERQPD, RD_CAT_SCATTER, RD_SET_AVX512F, 1661,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E12, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm64n, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VSCATTERQPS, RD_CAT_SCATTER, RD_SET_AVX512F, 1662,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK, RD_OPS_CNT(3, 0), RD_TUPLE_T1S, RD_EXT_E12, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MMASK | RD_FLAG_MODRM | RD_FLAG_VSIB | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_vm64n, 0, RD_OPA_W, RD_OPD_MASK, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_V, RD_OPS_hv, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_VSHA512MSG1, RD_CAT_SHA512, RD_SET_SHA512, 1663,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SHA512,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSHA512MSG2, RD_CAT_SHA512, RD_SET_SHA512, 1664,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SHA512,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_qq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSHA512RNDS2, RD_CAT_SHA512, RD_SET_SHA512, 1665,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SHA512,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_qq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_qq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_U, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSHUFF32X4, RD_CAT_AVX512, RD_SET_AVX512F, 1666,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_uv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_uv, 0, RD_OPA_R, RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSHUFF64X2, RD_CAT_AVX512, RD_SET_AVX512F, 1667,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_uv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_uv, 0, RD_OPA_R, RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSHUFI32X4, RD_CAT_AVX512, RD_SET_AVX512F, 1668,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_uv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_uv, 0, RD_OPA_R, RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSHUFI64X2, RD_CAT_AVX512, RD_SET_AVX512F, 1669,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_NOL0 | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_uv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_uv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_uv, 0, RD_OPA_R, RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSHUFPD, RD_CAT_AVX512, RD_SET_AVX512F, 1670,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSHUFPD, RD_CAT_AVX, RD_SET_AVX, 1670,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_pd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSHUFPS, RD_CAT_AVX512, RD_SET_AVX512F, 1671,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(5, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSHUFPS, RD_CAT_AVX, RD_SET_AVX, 1671,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ps, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSM3MSG1, RD_CAT_SM3, RD_SET_SM3, 1672,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SM3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSM3MSG2, RD_CAT_SM3, RD_SET_SM3, 1673,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SM3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSM3RNDS2, RD_CAT_SM3, RD_SET_SM3, 1674,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(4, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SM3,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSM4KEY4, RD_CAT_SM4, RD_SET_SM4, 1675,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SM4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSM4RNDS4, RD_CAT_SM4, RD_SET_SM4, 1676,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_6, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SM4,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSQRTPD, RD_CAT_AVX512, RD_SET_AVX512F, 1677,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VSQRTPD, RD_CAT_AVX, RD_SET_AVX, 1677,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSQRTPH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1678,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VSQRTPS, RD_CAT_AVX512, RD_SET_AVX512F, 1679,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(3, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VSQRTPS, RD_CAT_AVX, RD_SET_AVX, 1679,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSQRTSD, RD_CAT_AVX512, RD_SET_AVX512F, 1680,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VSQRTSD, RD_CAT_AVX, RD_SET_AVX, 1680,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSQRTSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1681,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VSQRTSS, RD_CAT_AVX512, RD_SET_AVX512F, 1682,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VSQRTSS, RD_CAT_AVX, RD_SET_AVX, 1682,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSTMXCSR, RD_CAT_AVX, RD_SET_AVX, 1683,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(1, 1), 0, RD_EXT_5, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_d, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_MXCSR, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSUBPD, RD_CAT_AVX512, RD_SET_AVX512F, 1684,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VSUBPD, RD_CAT_AVX, RD_SET_AVX, 1684,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_pd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSUBPH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1685,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_SAE | RD_OPD_B16, 0)
				}
			}, {
				RD_INS_VSUBPS, RD_CAT_AVX512, RD_SET_AVX512F, 1686,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E2, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_ER | RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VSUBPS, RD_CAT_AVX, RD_SET_AVX, 1686,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ps, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSUBSD, RD_CAT_AVX512, RD_SET_AVX512F, 1687,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VSUBSD, RD_CAT_AVX, RD_SET_AVX, 1687,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VSUBSH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1688,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_SAE, RD_OPS_CNT(4, 0), RD_TUPLE_T1S16, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_SAE, 0)
				}
			}, {
				RD_INS_VSUBSS, RD_CAT_AVX512, RD_SET_AVX512F, 1689,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_ER, RD_OPS_CNT(4, 0), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_ER, 0)
				}
			}, {
				RD_INS_VSUBSS, RD_CAT_AVX, RD_SET_AVX, 1689,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_2, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VTESTPD, RD_CAT_LOGICAL_FP, RD_SET_AVX, 1690,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VTESTPS, RD_CAT_LOGICAL_FP, RD_SET_AVX, 1691,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VUCOMISD, RD_CAT_AVX512, RD_SET_AVX512F, 1692,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_SAE, RD_OPS_CNT(2, 1), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VUCOMISD, RD_CAT_AVX, RD_SET_AVX, 1692,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VUCOMISH, RD_CAT_AVX512FP16, RD_SET_AVX512FP16, 1693,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_SAE, RD_OPS_CNT(2, 1), RD_TUPLE_T1S16, RD_EXT_E3NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512FP16,
				0,
				0 | RDR_RFLAG_ZF | RDR_RFLAG_PF | RDR_RFLAG_CF,
				0,
				0 | RDR_RFLAG_OF | RDR_RFLAG_SF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_sh, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VUCOMISS, RD_CAT_AVX512, RD_SET_AVX512F, 1694,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_SAE, RD_OPS_CNT(2, 1), RD_TUPLE_T1S, RD_EXT_E3, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_dq, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, RD_OPD_SAE, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VUCOMISS, RD_CAT_AVX, RD_SET_AVX, 1694,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(2, 1), 0, RD_EXT_3, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_LIG | RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_ZF,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ss, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VUNPCKHPD, RD_CAT_AVX512, RD_SET_AVX512F, 1695,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VUNPCKHPD, RD_CAT_AVX, RD_SET_AVX, 1695,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VUNPCKHPS, RD_CAT_AVX512, RD_SET_AVX512F, 1696,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VUNPCKHPS, RD_CAT_AVX, RD_SET_AVX, 1696,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VUNPCKLPD, RD_CAT_AVX512, RD_SET_AVX512F, 1697,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VUNPCKLPD, RD_CAT_AVX, RD_SET_AVX, 1697,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VUNPCKLPS, RD_CAT_AVX512, RD_SET_AVX512F, 1698,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4NF, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512F,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VUNPCKLPS, RD_CAT_AVX, RD_SET_AVX, 1698,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_x, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_x, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_x, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VXORPD, RD_CAT_LOGICAL_FP, RD_SET_AVX512DQ, 1699,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B64, 0)
				}
			}, {
				RD_INS_VXORPD, RD_CAT_LOGICAL_FP, RD_SET_AVX, 1699,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_pd, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VXORPS, RD_CAT_LOGICAL_FP, RD_SET_AVX512DQ, 1700,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				RD_DECO_MASK | RD_DECO_ZERO | RD_DECO_BROADCAST, RD_OPS_CNT(4, 0), RD_TUPLE_FV, RD_EXT_E4, RD_EXC_EVEX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX512DQ,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_fv, 0, RD_OPA_W, RD_OPD_MASK | RD_OPD_Z, 0),
					RD_OP(RD_OPT_aK, RD_OPS_q, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_fv, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_fv, 0, RD_OPA_R, RD_OPD_B32, 0)
				}
			}, {
				RD_INS_VXORPS, RD_CAT_LOGICAL_FP, RD_SET_AVX, 1700,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(3, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_WIG | RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_H, RD_OPS_ps, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_VZEROALL, RD_CAT_AVX, RD_SET_AVX, 1701,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(0, 1), 0, RD_EXT_8, RD_EXC_SSE_AVX, 0, 0, 0, 0, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_VZEROUPPER, RD_CAT_AVX, RD_SET_AVX, 1702,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF,
				0, RD_OPS_CNT(0, 1), 0, RD_EXT_8, RD_EXC_SSE_AVX, 0, 0, 0, 0, RD_CFF_AVX,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_WAIT, RD_CAT_X87_ALU, RD_SET_X87, 1703,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0xff, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_WBINVD, RD_CAT_SYSTEM, RD_SET_I486REAL, 1704,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_WBNOINVD, RD_CAT_WBNOINVD, RD_SET_WBNOINVD, 1705,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, 0, RD_CFF_WBNOINVD,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_WRFSBASE, RD_CAT_RDWRFSGS, RD_SET_RDWRFSGS, 1706,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_RDWRFSGS,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MSR_FSBASE, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_WRGSBASE, RD_CAT_RDWRFSGS, RD_SET_RDWRFSGS, 1707,
				0,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(1, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_RDWRFSGS,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_R, RD_OPS_y, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MSR_GSBASE, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_WRMSR, RD_CAT_SYSTEM, RD_SET_PENTIUMREAL, 1708,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_SERIAL, RD_CFF_MSR,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MSR, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_WRMSRLIST, RD_CAT_SYSTEM, RD_SET_MSRLIST, 1709,
				0,
				RD_MOD_R0 | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 3), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_O64, RD_CFF_MSRLIST,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_MEM_SMSRT, RD_OPS_4096, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MEM_DMSRT, RD_OPS_4096, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_WRMSRNS, RD_CAT_SYSTEM, RD_SET_WRMSRNS, 1710,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_WRMSRNS,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_MSR, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_WRPKRU, RD_CAT_MISC, RD_SET_PKU, 1711,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_PKU,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_PKRU, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_WRSHR, RD_CAT_SYSTEM, RD_SET_CYRIX, 1712,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_d, 0, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_WRSS, RD_CAT_CET, RD_SET_CET_SS, 1713,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_SHS | RD_FLAG_MODRM, RD_CFF_CET_SS,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_WRSS, RD_CAT_CET, RD_SET_CET_SS, 1714,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_SHS | RD_FLAG_MODRM, RD_CFF_CET_SS,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_WRUSS, RD_CAT_CET, RD_SET_CET_SS, 1715,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_SHS | RD_FLAG_MODRM, RD_CFF_CET_SS,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_WRUSS, RD_CAT_CET, RD_SET_CET_SS, 1716,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_SHS | RD_FLAG_MODRM, RD_CFF_CET_SS,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_y, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_y, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_XABORT, RD_CAT_UNCOND_BR, RD_SET_TSX, 1717,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_RTM,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_yf, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0)
				}
			}, {
				RD_INS_XADD, RD_CAT_SEMAPHORE, RD_SET_I486REAL, 1718,
				RD_PREF_LOCK | RD_PREF_HLE,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_XADD, RD_CAT_SEMAPHORE, RD_SET_I486REAL, 1718,
				RD_PREF_LOCK | RD_PREF_HLE,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_ZF | RDR_RFLAG_SF | RDR_RFLAG_OF,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_XBEGIN, RD_CAT_COND_BR, RD_SET_TSX, 1719,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 2), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_RTM,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_J, RD_OPS_z, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_RIP, RD_OPS_yf, RD_OPF_DEFAULT, RD_OPA_RCW, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_CW, 0, 0)
				}
			}, {
				RD_INS_XCHG, RD_CAT_DATAXFER, RD_SET_I86, 1720,
				RD_PREF_HLE | RD_PREF_LOCK | RD_PREF_HLE_WO_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_XCHG, RD_CAT_DATAXFER, RD_SET_I86, 1720,
				RD_PREF_HLE | RD_PREF_LOCK | RD_PREF_HLE_WO_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_XCHG, RD_CAT_DATAXFER, RD_SET_I86, 1720,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_XCHG, RD_CAT_DATAXFER, RD_SET_I86, 1720,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_XCHG, RD_CAT_DATAXFER, RD_SET_I86, 1720,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_XCHG, RD_CAT_DATAXFER, RD_SET_I86, 1720,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_XCHG, RD_CAT_DATAXFER, RD_SET_I86, 1720,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_XCHG, RD_CAT_DATAXFER, RD_SET_I86, 1720,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_XCHG, RD_CAT_DATAXFER, RD_SET_I86, 1720,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_XCHG, RD_CAT_DATAXFER, RD_SET_I86, 1720,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_Z, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, 0, RD_OPA_RW, 0, 0)
				}
			}, {
				RD_INS_XCRYPTCBC, RD_CAT_PADLOCK, RD_SET_CYRIX, 1721,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_XCRYPTCFB, RD_CAT_PADLOCK, RD_SET_CYRIX, 1722,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_XCRYPTCTR, RD_CAT_PADLOCK, RD_SET_CYRIX, 1723,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_XCRYPTECB, RD_CAT_PADLOCK, RD_SET_CYRIX, 1724,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_XCRYPTOFB, RD_CAT_PADLOCK, RD_SET_CYRIX, 1725,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_XEND, RD_CAT_COND_BR, RD_SET_TSX, 1726,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_RTM,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_RIP, RD_OPS_yf, RD_OPF_DEFAULT, RD_OPA_CW, 0, 0)
				}
			}, {
				RD_INS_XGETBV, RD_CAT_XSAVE, RD_SET_XSAVE, 1727,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_XSAVE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_XCR, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_XLATB, RD_CAT_MISC, RD_SET_I86, 1728,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 2), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_MEM_rBX_AL, RD_OPS_b, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_XOR, RD_CAT_LOGIC, RD_SET_I86, 1729,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_XOR, RD_CAT_LOGIC, RD_SET_I86, 1729,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_XOR, RD_CAT_LOGIC, RD_SET_I86, 1729,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_G, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_XOR, RD_CAT_LOGIC, RD_SET_I86, 1729,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_G, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_XOR, RD_CAT_LOGIC, RD_SET_I86, 1729,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_XOR, RD_CAT_LOGIC, RD_SET_I86, 1729,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, 0, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_XOR, RD_CAT_LOGIC, RD_SET_I86, 1729,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_XOR, RD_CAT_LOGIC, RD_SET_I86, 1729,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_z, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_XOR, RD_CAT_LOGIC, RD_SET_I86, 1729,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_R0 | RD_MOD_R1 | RD_MOD_R2 | RD_MOD_R3 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_I64, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_b, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_XOR, RD_CAT_LOGIC, RD_SET_I86, 1729,
				RD_PREF_HLE | RD_PREF_LOCK,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0 | RDR_RFLAG_PF | RDR_RFLAG_ZF | RDR_RFLAG_SF,
				0 | RDR_RFLAG_AF,
				0 | RDR_RFLAG_CF | RDR_RFLAG_OF | RDR_RFLAG_AF, {
					RD_OP(RD_OPT_E, RD_OPS_v, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_I, RD_OPS_b, RD_OPF_SEX_OP1, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_XORPD, RD_CAT_LOGICAL_FP, RD_SET_SSE2, 1730,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE2,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_pd, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_pd, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_XORPS, RD_CAT_LOGICAL_FP, RD_SET_SSE, 1731,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(2, 0), 0, RD_EXT_4, RD_EXC_SSE_AVX, 0, 0, 0, RD_FLAG_MODRM | RD_FLAG_VECTOR, RD_CFF_SSE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_V, RD_OPS_ps, 0, RD_OPA_RW, 0, 0),
					RD_OP(RD_OPT_W, RD_OPS_ps, 0, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_XRESLDTRK, RD_CAT_MISC, RD_SET_TSXLDTRK, 1732,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_TSXLDTRK,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_XRSTOR, RD_CAT_XSAVE, RD_SET_XSAVE, 1733,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_XSAVE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_unknown, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_XCR_0, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_XRSTOR, RD_CAT_XSAVE, RD_SET_XSAVE, 1734,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_XSAVE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_unknown, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_XCR_0, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_XRSTORS, RD_CAT_XSAVE, RD_SET_XSAVES, 1735,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_XSAVES,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_unknown, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_XCR_0, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_XRSTORS, RD_CAT_XSAVE, RD_SET_XSAVES, 1736,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_XSAVES,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_unknown, 0, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_XCR_0, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_XSAVE, RD_CAT_XSAVE, RD_SET_XSAVE, 1737,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_XSAVE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_unknown, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_XCR_0, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_XSAVE, RD_CAT_XSAVE, RD_SET_XSAVE, 1738,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_XSAVE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_unknown, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_XCR_0, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_XSAVEC, RD_CAT_XSAVE, RD_SET_XSAVEC, 1739,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_XSAVEC,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_unknown, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_XCR_0, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_XSAVEC, RD_CAT_XSAVE, RD_SET_XSAVEC, 1740,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_XSAVEC,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_unknown, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_XCR_0, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_XSAVEOPT, RD_CAT_XSAVE, RD_SET_XSAVE, 1741,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_XSAVE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_unknown, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_XCR_0, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_XSAVEOPT, RD_CAT_XSAVE, RD_SET_XSAVE, 1742,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_XSAVE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_unknown, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_XCR_0, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_XSAVES, RD_CAT_XSAVE, RD_SET_XSAVES, 1743,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_XSAVES,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_unknown, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_XCR_0, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_XSAVES, RD_CAT_XSAVE, RD_SET_XSAVES, 1744,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(1, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_XSAVES,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_M, RD_OPS_unknown, 0, RD_OPA_W, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_XCR_0, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_REG_BANK, RD_OPS_unknown, RD_OPF_DEFAULT, RD_OPA_R, 0, 0)
				}
			}, {
				RD_INS_XSETBV, RD_CAT_XSAVE, RD_SET_XSAVE, 1745,
				0,
				RD_MOD_R0 | RD_MOD_REAL | RD_MOD_V8086 | RD_MOD_PROT | RD_MOD_COMPAT | RD_MOD_LONG | RD_MOD_VMXR | RD_MOD_VMXN | RD_MOD_VMXR_SEAM | RD_MOD_VMXN_SEAM | RD_MOD_VMX_OFF | RD_MOD_SMM | RD_MOD_SMM_OFF | RD_MOD_SGX_OFF | RD_MOD_TSX | RD_MOD_TSX_OFF,
				0, RD_OPS_CNT(0, 4), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_XSAVE,
				0,
				0,
				0,
				0, {
					RD_OP(RD_OPT_GPR_rCX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rDX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_GPR_rAX, RD_OPS_d, RD_OPF_DEFAULT, RD_OPA_R, 0, 0),
					RD_OP(RD_OPT_XCR, RD_OPS_q, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}, {
				RD_INS_XSHA1, RD_CAT_PADLOCK, RD_SET_CYRIX, 1746,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_XSHA256, RD_CAT_PADLOCK, RD_SET_CYRIX, 1747,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_XSTORE, RD_CAT_PADLOCK, RD_SET_CYRIX, 1748,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_XSTORE, RD_CAT_PADLOCK, RD_SET_CYRIX, 1748,
				RD_PREF_REP,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, 0,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_XSUSLDTRK, RD_CAT_MISC, RD_SET_TSXLDTRK, 1749,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 0), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_TSXLDTRK,
				0,
				0,
				0,
				0, {
					0
				},
			}, {
				RD_INS_XTEST, RD_CAT_LOGIC, RD_SET_TSX, 1750,
				0,
				RD_MOD_ANY,
				0, RD_OPS_CNT(0, 1), 0, 0, 0, 0, 0, 0, RD_FLAG_MODRM, RD_CFF_RTM,
				0,
				0 | RDR_RFLAG_ZF,
				0,
				0 | RDR_RFLAG_CF | RDR_RFLAG_PF | RDR_RFLAG_AF | RDR_RFLAG_SF | RDR_RFLAG_OF, {
					RD_OP(RD_OPT_F, RD_OPS_v, RD_OPF_DEFAULT, RD_OPA_W, 0, 0)
				}
			}
		};

		static const unsigned char g_pPrefixesMap[256] = {
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
			0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
			3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 2, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_37_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[0])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d5_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_fc_mem_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_fc_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[4])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_fc_mem_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[64])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_fc_mem_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[66])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_fc_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_fc_mem_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_fc_mem_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_fc_mem_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_fc_mem_F2_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_38_fc_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_fc_mem_mprefix),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f6_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[16])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f6_mem_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[33])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f6_mem_NP_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2722])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f6_mem_NP_rexw_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2723])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_38_f6_mem_NP_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f6_mem_NP_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f6_mem_NP_rexw_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_f6_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f6_mem_NP_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f6_mem_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f6_mem_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f6_reg_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[16])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f6_reg_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[33])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_f6_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f6_reg_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f6_reg_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_38_f6_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f6_mem_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f6_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_de_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[34])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_de_mem_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[42])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_de_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_de_mem_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_de_mem_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_de_reg_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[34])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_de_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_de_reg_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_38_de_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_de_mem_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_de_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_dd_mem_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[35])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_dd_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[43])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_dd_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_dd_mem_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_dd_mem_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_dd_reg_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[43])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_dd_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_dd_reg_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_38_dd_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_dd_mem_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_dd_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_df_mem_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[36])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_df_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[37])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_df_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_df_mem_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_df_mem_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_df_reg_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[37])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_df_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_df_reg_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_38_df_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_df_mem_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_df_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_d8_mem_01_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[38])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_d8_mem_01_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_d8_mem_01_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_d8_mem_03_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[39])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_d8_mem_03_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_d8_mem_03_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_d8_mem_00_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[44])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_d8_mem_00_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_d8_mem_00_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_d8_mem_02_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[45])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_d8_mem_02_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_d8_mem_02_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_38_d8_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_d8_mem_00_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_d8_mem_01_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_d8_mem_02_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_d8_mem_03_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_38_d8_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_d8_mem_modrmreg),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_dc_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[40])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_dc_mem_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[41])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_dc_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_dc_mem_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_dc_mem_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_dc_reg_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[40])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_dc_reg_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[604])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_dc_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_dc_reg_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_dc_reg_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_38_dc_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_dc_mem_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_dc_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_db_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[46])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_db_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_db_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_15_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[76])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_15_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_15_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_14_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[77])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_14_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_14_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f0_mem_F2_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[198])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f0_mem_F2_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[199])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_f0_mem_F2_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f0_mem_F2_None_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f0_mem_F2_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f0_mem_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[678])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f0_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[679])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_f0_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f0_mem_None_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f0_mem_66_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f0_mem_F2_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f0_reg_F2_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[198])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f0_reg_F2_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[199])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_f0_reg_F2_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f0_reg_F2_None_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f0_reg_F2_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_f0_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f0_reg_F2_mprefix)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_38_f0_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f0_mem_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f0_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f1_mem_F2_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[200])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f1_mem_F2_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[201])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_f1_mem_F2_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f1_mem_F2_None_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f1_mem_F2_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f1_mem_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[680])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f1_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[681])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_f1_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f1_mem_None_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f1_mem_66_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f1_mem_F2_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f1_reg_F2_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[200])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f1_reg_F2_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[201])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_f1_reg_F2_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f1_reg_F2_None_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f1_reg_F2_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_f1_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f1_reg_F2_mprefix)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_38_f1_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f1_mem_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f1_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_fa_reg_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[252])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_fa_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_fa_reg_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_38_fa_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_fa_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_fb_reg_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[253])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_fb_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_fb_reg_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_38_fb_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_fb_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f8_mem_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[256])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f8_mem_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[257])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f8_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[687])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_f8_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f8_mem_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f8_mem_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f8_mem_F2_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_38_f8_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f8_mem_mprefix),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_cf_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[419])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_cf_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_cf_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_80_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[464])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_80_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_80_mem_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_38_80_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_80_mem_mprefix),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_82_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[468])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_82_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_82_mem_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_38_82_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_82_mem_mprefix),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_81_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[469])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_81_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_81_mem_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_38_81_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_81_mem_mprefix),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f9_mem_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[688])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_f9_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f9_mem_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_38_f9_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f9_mem_mprefix),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_2a_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[706])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_2a_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_2a_mem_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_38_2a_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_2a_mem_mprefix),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_1c_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[846])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_1c_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[847])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_1c_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_1c_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_1c_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_1e_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[848])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_1e_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[849])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_1e_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_1e_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_1e_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_1d_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[850])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_1d_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[851])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_1d_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_1d_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_1d_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_2b_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[856])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_2b_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_2b_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_10_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[887])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_10_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_10_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_29_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[895])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_29_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_29_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_37_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[904])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_37_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_37_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_02_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[943])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_02_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[944])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_02_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_02_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_02_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_03_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[945])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_03_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[946])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_03_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_03_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_03_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_01_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[947])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_01_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[948])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_01_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_01_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_01_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_41_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[949])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_41_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_41_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_06_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[950])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_06_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[951])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_06_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_06_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_06_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_07_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[952])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_07_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[953])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_07_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_07_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_07_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_05_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[954])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_05_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[955])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_05_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_05_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_05_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_04_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[966])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_04_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[967])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_04_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_04_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_04_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_3c_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[970])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_3c_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_3c_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_3d_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[971])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_3d_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_3d_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_3f_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[976])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_3f_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_3f_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_3e_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[977])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_3e_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_3e_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_38_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[978])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_38_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_38_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_39_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[979])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_39_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_39_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_3b_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[984])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_3b_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_3b_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_3a_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[985])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_3a_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_3a_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_21_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[988])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_21_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_21_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_22_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[989])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_22_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_22_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_20_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[990])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_20_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_20_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_25_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[991])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_25_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_25_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_23_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[992])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_23_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_23_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_24_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[993])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_24_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_24_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_31_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[994])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_31_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_31_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_32_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[995])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_32_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_32_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_30_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[996])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_30_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_30_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_35_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[997])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_35_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_35_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_33_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[998])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_33_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_33_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_34_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[999])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_34_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_34_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_28_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1000])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_28_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_28_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_0b_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1001])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_0b_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1002])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_0b_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_0b_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_0b_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_40_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1008])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_40_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_40_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_00_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1055])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_00_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1056])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_00_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_00_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_00_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_08_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1061])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_08_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1062])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_08_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_08_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_08_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_0a_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1063])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_0a_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1064])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_0a_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_0a_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_0a_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_09_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1065])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_09_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1066])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_09_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_09_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_09_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_17_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1119])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_17_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_17_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_c9_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1280])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_c9_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_c9_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_ca_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1281])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_ca_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_ca_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_c8_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1282])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_c8_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_c8_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_cc_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1284])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_cc_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_cc_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_cd_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1285])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_cd_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_cd_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_cb_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1286])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_cb_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_cb_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f5_mem_66_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2724])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_38_f5_mem_66_rexw_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2725])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_38_f5_mem_66_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f5_mem_66_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f5_mem_66_rexw_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_38_f5_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f5_mem_66_auxiliary),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_38_f5_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f5_mem_mprefix),
				nullptr
			}
		};

		static const RD_TABLE_OPCODE g_pRootTable_root_0f_38_opcode = {
			RD_ILUT_OPCODE, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_00_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_01_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_02_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_03_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_04_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_05_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_06_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_07_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_08_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_09_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_0a_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_0b_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_10_mprefix),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_14_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_15_mprefix),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_17_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_1c_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_1d_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_1e_mprefix),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_20_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_21_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_22_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_23_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_24_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_25_mprefix),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_28_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_29_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_2a_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_2b_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_30_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_31_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_32_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_33_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_34_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_35_mprefix),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_37_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_38_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_39_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_3a_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_3b_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_3c_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_3d_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_3e_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_3f_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_40_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_41_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_80_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_81_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_82_modrmmod),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_c8_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_c9_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_ca_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_cb_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_cc_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_cd_mprefix),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_cf_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_d8_modrmmod),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_db_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_dc_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_dd_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_de_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_df_modrmmod),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f0_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f1_modrmmod),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f5_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f6_modrmmod),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f8_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_f9_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_fa_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_fb_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_fc_modrmmod),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_58_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[27])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_58_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[28])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_58_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[29])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_58_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[30])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_58_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_58_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_58_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_58_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_58_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d0_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[31])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d0_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[32])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_d0_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d0_66_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d0_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_df_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[47])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_df_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_df_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_0d_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[74])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_0d_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_0d_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_0c_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[75])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_0c_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_0c_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_41_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[246])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_41_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_41_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_40_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[247])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_40_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_40_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_17_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[261])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_17_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_17_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_cf_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[417])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_cf_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_cf_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_ce_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[418])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_ce_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_ce_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_f0_reg_00_00_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[423])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_f0_reg_00_00_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_f0_reg_00_00_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_0f_3a_f0_reg_00_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_f0_reg_00_00_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_3a_f0_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_f0_reg_00_modrmrm),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_3a_f0_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_f0_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_21_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[453])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_21_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_21_mem_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_21_reg_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[454])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_21_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_21_reg_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_3a_21_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_21_mem_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_21_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_42_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[745])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_42_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_42_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_0f_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[875])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_0f_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[876])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_0f_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_0f_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_0f_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_0e_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[888])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_0e_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_0e_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_44_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[890])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_44_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_44_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_61_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[898])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_61_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_61_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_60_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[899])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_60_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_60_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_63_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[907])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_63_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_63_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_62_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[908])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_62_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_62_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_14_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[912])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_14_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_14_mem_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_14_reg_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[913])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_14_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_14_reg_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_3a_14_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_14_mem_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_14_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_16_mem_66_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[914])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_16_mem_66_rexw_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[916])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_3a_16_mem_66_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_16_mem_66_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_16_mem_66_rexw_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_16_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_16_mem_66_auxiliary),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_16_reg_66_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[915])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_16_reg_66_rexw_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[917])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_3a_16_reg_66_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_16_reg_66_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_16_reg_66_rexw_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_16_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_16_reg_66_auxiliary),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_3a_16_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_16_mem_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_16_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_15_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[920])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_15_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_15_mem_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_15_reg_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[921])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_15_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_15_reg_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_3a_15_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_15_mem_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_15_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_20_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[958])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_20_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_20_mem_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_20_reg_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[959])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_20_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_20_reg_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_3a_20_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_20_mem_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_20_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_22_66_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[960])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_22_66_rexw_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[961])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_3a_22_66_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_22_66_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_22_66_rexw_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_22_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_22_66_auxiliary),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_09_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1211])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_09_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_09_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_08_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1212])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_08_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_08_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_0b_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1213])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_0b_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_0b_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_0a_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1214])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_0a_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_0a_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3a_cc_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1283])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_3a_cc_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_cc_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_OPCODE g_pRootTable_root_0f_3a_opcode = {
			RD_ILUT_OPCODE, {
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_08_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_09_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_0a_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_0b_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_0c_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_0d_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_0e_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_0f_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_14_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_15_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_16_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_17_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_20_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_21_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_22_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_40_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_41_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_42_mprefix),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_44_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_60_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_61_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_62_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_63_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_cc_mprefix),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_ce_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_cf_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_df_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_f0_modrmmod),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3f_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[48])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_55_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[60])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_55_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[61])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_55_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_55_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_55_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_54_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[62])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_54_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[63])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_54_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_54_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_54_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1a_mpx_mem_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[83])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1a_mpx_mem_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[85])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1a_mpx_mem_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[86])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1a_mpx_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[88])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_1a_mpx_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1a_mpx_mem_None_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1a_mpx_mem_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1a_mpx_mem_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1a_mpx_mem_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1a_mpx_reg_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[83])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1a_mpx_reg_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[85])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1a_mpx_reg_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[88])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1a_mpx_reg_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[790])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_1a_mpx_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1a_mpx_reg_None_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1a_mpx_reg_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1a_mpx_reg_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1a_mpx_reg_F2_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_1a_mpx_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1a_mpx_mem_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1a_mpx_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1a_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[784])
		};

		static const RD_TABLE_FEATURE g_pRootTable_root_0f_1a_feature = {
			RD_ILUT_FEATURE, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1a_None_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1a_mpx_modrmmod),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1b_mpx_mem_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[84])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1b_mpx_mem_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[87])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1b_mpx_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[89])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1b_mpx_mem_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[90])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_1b_mpx_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1b_mpx_mem_None_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1b_mpx_mem_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1b_mpx_mem_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1b_mpx_mem_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1b_mpx_reg_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[84])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1b_mpx_reg_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[89])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1b_mpx_reg_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[791])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1b_mpx_reg_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[792])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_1b_mpx_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1b_mpx_reg_None_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1b_mpx_reg_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1b_mpx_reg_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1b_mpx_reg_F2_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_1b_mpx_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1b_mpx_mem_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1b_mpx_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1b_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[785])
		};

		static const RD_TABLE_FEATURE g_pRootTable_root_0f_1b_feature = {
			RD_ILUT_FEATURE, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1b_None_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1b_mpx_modrmmod),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_bc_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[92])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_bc_aF3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1386])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_bc_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_bc_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_bc_aF3_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_bd_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[93])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_bd_aF3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[622])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_bd_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_bd_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_bd_aF3_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c8_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[94])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c9_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[95])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ca_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[96])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_cb_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[97])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_cc_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[98])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_cd_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[99])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ce_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[100])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_cf_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[101])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_a3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[102])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ba_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[103])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ba_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[104])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ba_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[107])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ba_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[109])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_ba_modrmreg = {
			RD_ILUT_MODRM_REG, {
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ba_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ba_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ba_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ba_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_bb_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[105])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_b3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[106])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ab_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[108])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_01_02_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[118])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_01_02_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[259])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_01_02_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[260])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_01_02_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_01_02_NP_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_01_02_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_01_02_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_01_07_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[249])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_01_07_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1256])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_01_07_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_01_07_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_01_07_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_01_00_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[635])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_01_00_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_01_00_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_01_01_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[753])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_01_01_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_01_01_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_01_06_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1257])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_01_06_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_01_06_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_01_05_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1258])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_01_05_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_01_05_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_01_03_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1320])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_01_03_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_01_03_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_01_04_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1363])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_01_04_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_01_04_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_0f_01_reg_01_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_01_00_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_01_01_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_01_02_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_01_03_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_01_04_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_01_05_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_01_06_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_01_07_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_03_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[126])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_03_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[466])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_03_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1308])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_03_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1323])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_03_01_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1901])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_03_01_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1902])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_03_01_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1915])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_03_01_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1916])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_03_01_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_03_01_None_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_03_01_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_03_01_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_03_01_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_03_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1914])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2029])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_03_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2030])
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_0f_01_reg_03_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_03_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_03_01_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_03_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_03_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_03_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_03_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_03_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_03_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_05_06_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[130])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_05_06_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1179])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_05_06_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_05_06_NP_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_05_06_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_05_02_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1237])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_05_02_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_05_02_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_05_00_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1260])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_05_00_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1276])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_05_00_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2778])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_05_00_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_05_00_NP_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_05_00_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_05_00_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_05_07_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1337])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_05_07_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2720])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_05_07_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_05_07_NP_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_05_07_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_05_05_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1378])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_05_05_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_05_05_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_05_04_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1393])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_05_04_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_05_04_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_05_01_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2760])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_05_01_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_05_01_F2_leaf)
			}
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_0f_01_reg_05_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_05_00_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_05_01_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_05_02_mprefix),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_05_04_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_05_05_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_05_06_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_05_07_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_07_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[132])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_07_06_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[467])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_07_06_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1195])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_07_06_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1197])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_07_06_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_07_06_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_07_06_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_07_06_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_07_02_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[629])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_07_02_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[636])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_07_02_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_07_02_NP_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_07_02_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_07_03_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[754])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_07_03_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_07_03_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_07_07_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1080])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_07_07_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1157])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_07_07_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1384])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_07_07_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_07_07_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_07_07_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_07_07_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_07_05_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1181])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_07_05_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1196])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_07_05_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_07_05_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_07_05_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_07_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1190])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_07_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1355])
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_0f_01_reg_07_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_07_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_07_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_07_02_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_07_03_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_07_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_07_05_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_07_06_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_07_07_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_02_07_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[250])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_02_07_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_02_07_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_02_04_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1900])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_02_04_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_02_04_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_02_05_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2745])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_02_05_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_02_05_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_02_00_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2746])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_02_00_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_02_00_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_02_01_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2773])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_02_01_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_02_01_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_02_06_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2779])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_02_06_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_02_06_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_0f_01_reg_02_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_02_00_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_02_01_mprefix),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_02_04_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_02_05_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_02_06_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_02_07_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_00_00_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[251])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_00_00_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_00_00_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_00_07_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[889])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_00_07_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_00_07_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_00_05_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[909])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_00_05_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_00_05_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_00_06_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1177])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_00_06_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2718])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_00_06_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2719])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_00_06_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_00_06_NP_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_00_06_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_00_06_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_00_01_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1898])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_00_01_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_00_01_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_00_02_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1913])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_00_02_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_00_02_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_00_03_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2028])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_00_03_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_00_03_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_00_04_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2042])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_reg_00_04_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_00_04_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_0f_01_reg_00_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_00_00_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_00_01_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_00_02_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_00_03_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_00_04_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_00_05_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_00_06_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_00_07_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[603])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_reg_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1314])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_01_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_00_modrmrm),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_01_modrmrm),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_02_modrmrm),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_03_modrmrm),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_05_modrmrm),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_07_modrmrm)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_mem_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[465])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_mem_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[596])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_mem_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[598])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_mem_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[603])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_mem_05_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1220])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_01_mem_05_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_mem_05_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1279])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1307])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_01_mem_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1313])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_01_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_mem_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_mem_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_mem_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_mem_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_mem_05_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_mem_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_mem_07_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1c_cldm_mem_00_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[121])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1c_cldm_mem_00_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[793])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1c_cldm_mem_00_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[794])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1c_cldm_mem_00_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[795])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_1c_cldm_mem_00_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_mem_00_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_mem_00_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_mem_00_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_mem_00_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1c_cldm_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[797])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1c_cldm_mem_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[798])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1c_cldm_mem_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[799])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1c_cldm_mem_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[800])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1c_cldm_mem_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[801])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1c_cldm_mem_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[802])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1c_cldm_mem_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[803])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_1c_cldm_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_mem_00_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_mem_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_mem_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_mem_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_mem_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_mem_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_mem_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_mem_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1c_cldm_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[796])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1c_cldm_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[797])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1c_cldm_reg_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[798])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1c_cldm_reg_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[799])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1c_cldm_reg_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[800])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1c_cldm_reg_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[801])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1c_cldm_reg_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[802])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1c_cldm_reg_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[803])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_1c_cldm_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_reg_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_reg_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_reg_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_reg_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_reg_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_reg_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_reg_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_reg_07_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_1c_cldm_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1c_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[786])
		};

		static const RD_TABLE_FEATURE g_pRootTable_root_0f_1c_feature = {
			RD_ILUT_FEATURE, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_None_leaf),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_cldm_modrmmod),
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_mem_07_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[124])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_mem_07_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[125])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_ae_mem_07_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_07_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_07_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_mem_06_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[128])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_mem_06_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[131])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_mem_06_NP_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2769])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_mem_06_NP_rexw_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2770])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_ae_mem_06_NP_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_06_NP_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_06_NP_rexw_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_ae_mem_06_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_06_NP_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_06_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_06_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_mem_01_NP_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[409])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_mem_01_NP_rexw_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[410])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_ae_mem_01_NP_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_01_NP_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_01_NP_rexw_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_ae_mem_01_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_01_NP_auxiliary),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_mem_00_NP_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[411])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_mem_00_NP_rexw_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[412])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_ae_mem_00_NP_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_00_NP_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_00_NP_rexw_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_ae_mem_00_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_00_NP_auxiliary),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_mem_02_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[588])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_ae_mem_02_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_02_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_mem_04_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1120])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_mem_04_NP_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2765])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_mem_04_NP_rexw_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2766])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_ae_mem_04_NP_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_04_NP_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_04_NP_rexw_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_ae_mem_04_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_04_NP_auxiliary),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_04_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_mem_03_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1325])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_ae_mem_03_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_03_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_mem_05_NP_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2761])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_mem_05_NP_rexw_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2762])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_ae_mem_05_NP_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_05_NP_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_05_NP_rexw_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_ae_mem_05_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_05_NP_auxiliary),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_ae_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_00_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_01_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_02_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_03_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_04_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_05_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_06_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_07_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_reg_05_F3_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[447])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_reg_05_F3_rexw_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[448])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_ae_reg_05_F3_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_05_F3_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_05_F3_rexw_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_reg_05_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[594])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_ae_reg_05_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_05_NP_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_05_F3_auxiliary),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_reg_06_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[630])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_reg_06_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1385])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_reg_06_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1394])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_reg_06_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1395])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_ae_reg_06_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_06_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_06_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_06_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_06_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_reg_04_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1120])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_ae_reg_04_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_04_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_reg_00_F3_64_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1174])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_ae_reg_00_F3_auxiliary = {
			RD_ILUT_AUXILIARY, {
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_00_F3_64_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_ae_reg_00_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_00_F3_auxiliary),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_reg_01_F3_64_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1175])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_ae_reg_01_F3_auxiliary = {
			RD_ILUT_AUXILIARY, {
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_01_F3_64_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_ae_reg_01_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_01_F3_auxiliary),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_reg_07_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1278])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_ae_reg_07_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_07_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_reg_02_F3_64_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2715])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_ae_reg_02_F3_auxiliary = {
			RD_ILUT_AUXILIARY, {
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_02_F3_64_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_ae_reg_02_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_02_F3_auxiliary),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ae_reg_03_F3_64_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2716])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_ae_reg_03_F3_auxiliary = {
			RD_ILUT_AUXILIARY, {
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_03_F3_64_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_ae_reg_03_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_03_F3_auxiliary),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_ae_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_00_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_01_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_02_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_03_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_04_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_05_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_06_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_07_mprefix)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_ae_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[129])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_46_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[134])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_42_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[135])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_4c_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[136])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_4e_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[137])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_47_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[138])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_43_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[139])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_4d_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[140])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_4f_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[141])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_41_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[142])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_4b_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[143])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_49_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[144])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_45_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[145])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_40_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[146])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_4a_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[147])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_48_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[148])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_44_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[149])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c2_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[173])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c2_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[174])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c2_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[178])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c2_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[183])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_c2_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c2_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c2_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c2_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c2_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_b0_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[187])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_b1_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[188])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c7_mem_01_rexw_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[189])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c7_mem_01_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[190])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_c7_mem_01_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_01_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_01_rexw_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c7_mem_06_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1899])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c7_mem_06_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2025])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c7_mem_06_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2043])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_c7_mem_06_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_06_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_06_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_06_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c7_mem_07_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2026])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_c7_mem_07_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_07_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c7_mem_03_NP_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2763])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c7_mem_03_NP_rexw_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2764])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_c7_mem_03_NP_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_03_NP_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_03_NP_rexw_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_c7_mem_03_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_03_NP_auxiliary),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c7_mem_04_NP_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2767])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c7_mem_04_NP_rexw_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2768])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_c7_mem_04_NP_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_04_NP_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_04_NP_rexw_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_c7_mem_04_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_04_NP_auxiliary),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c7_mem_05_NP_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2771])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c7_mem_05_NP_rexw_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2772])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_c7_mem_05_NP_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_05_NP_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_05_NP_rexw_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_c7_mem_05_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_05_NP_auxiliary),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_c7_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_01_auxiliary),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_03_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_04_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_05_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_06_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_07_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c7_reg_07_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1178])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c7_reg_07_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1184])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c7_reg_07_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1185])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_c7_reg_07_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_reg_07_None_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_reg_07_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_reg_07_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c7_reg_06_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1182])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c7_reg_06_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1183])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c7_reg_06_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1259])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_c7_reg_06_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_reg_06_None_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_reg_06_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_reg_06_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_c7_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_reg_06_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_reg_07_mprefix)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_c7_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_2f_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[192])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_2f_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[193])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_2f_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2f_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2f_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_a2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[194])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3d_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[195])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_3c_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[196])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_e6_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[202])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_e6_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[204])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_e6_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[218])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_e6_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e6_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e6_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e6_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5b_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[203])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5b_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[209])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5b_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[220])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_5b_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5b_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5b_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5b_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_2d_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[205])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_2d_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[211])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_2d_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[212])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_2d_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[217])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_2d_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2d_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2d_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2d_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2d_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5a_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[206])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5a_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[210])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5a_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[213])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5a_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[216])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_5a_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5a_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5a_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5a_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5a_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_2a_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[207])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_2a_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[208])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_2a_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[214])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_2a_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[215])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_2a_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2a_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2a_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2a_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2a_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_2c_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[219])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_2c_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[221])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_2c_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[222])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_2c_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[223])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_2c_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2c_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2c_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2c_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2c_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5e_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[241])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5e_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[242])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5e_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[243])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5e_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[244])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_5e_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5e_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5e_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5e_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5e_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_39_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[245])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_77_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[248])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_77_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_77_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_cet_reg_07_03_aF3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[254])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_cet_reg_07_03_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[816])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_1e_cet_reg_07_03_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_07_03_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_07_03_aF3_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_cet_reg_07_02_aF3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[255])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_cet_reg_07_02_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[815])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_1e_cet_reg_07_02_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_07_02_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_07_02_aF3_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_cet_reg_07_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[813])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_cet_reg_07_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[814])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_cet_reg_07_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[817])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_cet_reg_07_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[818])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_cet_reg_07_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[819])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_cet_reg_07_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[820])
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_0f_1e_cet_reg_07_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_07_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_07_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_07_02_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_07_03_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_07_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_07_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_07_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_07_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_cet_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[805])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_cet_reg_01_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[806])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_cet_reg_01_rexw_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[807])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_cet_reg_01_rexw_aF3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1188])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_1e_cet_reg_01_rexw_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_01_rexw_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_01_rexw_aF3_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_cet_reg_01_aF3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1187])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_1e_cet_reg_01_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_01_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_01_rexw_auxiliary),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_01_aF3_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_cet_reg_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[808])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_cet_reg_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[809])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_cet_reg_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[810])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_cet_reg_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[811])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_cet_reg_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[812])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_1e_cet_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_01_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_07_modrmrm)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_cet_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[804])
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_1e_cet_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_mem_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1e_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[788])
		};

		static const RD_TABLE_FEATURE g_pRootTable_root_0f_1e_feature = {
			RD_ILUT_FEATURE, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_cet_modrmmod),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_78_None_66_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[262])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_78_None_66_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_78_None_66_00_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_78_None_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[455])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_78_None_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2027])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_78_None_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_78_None_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_78_None_66_modrmreg),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_78_None_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_78_cyrix_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1352])
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_78_cyrix_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_78_cyrix_mem_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VENDOR g_pRootTable_root_0f_78_vendor = {
			RD_ILUT_VENDOR, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_78_None_mprefix),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_78_cyrix_modrmmod),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_79_None_reg_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[263])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_79_None_reg_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[456])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_79_None_reg_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2041])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_79_None_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_79_None_reg_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_79_None_reg_66_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_79_None_reg_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_79_None_mem_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2041])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_79_None_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_79_None_mem_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_79_None_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_79_None_mem_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_79_None_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_79_cyrix_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1215])
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_79_cyrix_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_79_cyrix_mem_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VENDOR g_pRootTable_root_0f_79_vendor = {
			RD_ILUT_VENDOR, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_79_None_modrmmod),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_79_cyrix_modrmmod),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0e_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[306])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_37_None_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[416])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_37_None_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_37_None_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_37_cyrix_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2721])
		};

		static const RD_TABLE_VENDOR g_pRootTable_root_0f_37_vendor = {
			RD_ILUT_VENDOR, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_37_None_mprefix),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_37_cyrix_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_7c_None_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[420])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_7c_None_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[421])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_7c_None_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7c_None_66_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7c_None_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_7c_cyrix_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1354])
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_7c_cyrix_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7c_cyrix_mem_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VENDOR g_pRootTable_root_0f_7c_vendor = {
			RD_ILUT_VENDOR, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7c_None_mprefix),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7c_cyrix_modrmmod),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_7d_None_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[424])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_7d_None_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[425])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_7d_None_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7d_None_66_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7d_None_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_7d_cyrix_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1221])
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_7d_cyrix_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7d_cyrix_mem_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VENDOR g_pRootTable_root_0f_7d_vendor = {
			RD_ILUT_VENDOR, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7d_None_mprefix),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7d_cyrix_modrmmod),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_af_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[428])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_08_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[463])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_86_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[473])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_82_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[475])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_8c_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[479])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_8e_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[481])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_00_mem_06_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[486])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_00_mem_06_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[599])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_00_mem_06_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_00_mem_06_NP_leaf),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_00_mem_06_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_00_mem_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[601])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_00_mem_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[619])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_00_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1309])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_00_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1334])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_00_mem_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1597])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_00_mem_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1598])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_00_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_00_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_00_mem_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_00_mem_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_00_mem_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_00_mem_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_00_mem_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_00_mem_06_mprefix),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_00_reg_06_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[486])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_00_reg_06_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[600])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_00_reg_06_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_00_reg_06_NP_leaf),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_00_reg_06_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_00_reg_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[601])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_00_reg_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[619])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_00_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1310])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_00_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1335])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_00_reg_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1597])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_00_reg_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1598])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_00_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_00_reg_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_00_reg_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_00_reg_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_00_reg_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_00_reg_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_00_reg_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_00_reg_06_mprefix),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_00_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_00_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_b8_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[487])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_b8_aF3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1029])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_b8_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_b8_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_b8_aF3_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_87_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[490])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_83_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[492])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_8d_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[494])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_8f_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[496])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_81_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[498])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_8b_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[500])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_89_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[502])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_85_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[504])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_80_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[506])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_8a_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[508])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_88_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[511])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_84_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[513])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_02_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[585])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_02_reg_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[586])
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_02_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_02_mem_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_02_reg_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_f0_mem_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[587])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_f0_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f0_mem_F2_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_f0_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f0_mem_mprefix),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_b4_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[595])
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_b4_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_b4_mem_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_b5_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[597])
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_b5_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_b5_mem_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_03_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[616])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_03_reg_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[617])
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_03_mem_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_03_reg_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_b2_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[618])
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_b2_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_b2_mem_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_f7_reg_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[623])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_f7_reg_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[624])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_f7_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f7_reg_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f7_reg_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_f7_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f7_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5f_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[625])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5f_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[626])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5f_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[627])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5f_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[628])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_5f_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5f_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5f_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5f_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5f_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5d_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[631])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5d_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[632])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5d_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[633])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5d_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[634])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_5d_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5d_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5d_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5d_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5d_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_a6_reg_00_00_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[637])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_a6_reg_00_00_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a6_reg_00_00_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_0f_a6_reg_00_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a6_reg_00_00_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_a6_reg_01_00_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2774])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_a6_reg_01_00_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a6_reg_01_00_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_0f_a6_reg_01_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a6_reg_01_00_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_a6_reg_02_00_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2775])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_a6_reg_02_00_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a6_reg_02_00_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_0f_a6_reg_02_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a6_reg_02_00_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_a6_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a6_reg_00_modrmrm),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a6_reg_01_modrmrm),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a6_reg_02_modrmrm),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_a6_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a6_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_20_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[638])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_21_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[639])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_22_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[640])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_23_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[641])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_24_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[642])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_26_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[643])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_28_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[674])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_28_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[676])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_28_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_28_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_28_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_29_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[675])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_29_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[677])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_29_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_29_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_29_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_6e_NP_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[682])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_6e_NP_rexw_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[713])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_6e_NP_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_6e_NP_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_6e_NP_rexw_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_6e_66_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[683])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_6e_66_rexw_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[714])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_6e_66_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_6e_66_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_6e_66_rexw_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_6e_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_6e_NP_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_6e_66_auxiliary),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_7e_None_NP_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[684])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_7e_None_NP_rexw_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[716])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_7e_None_NP_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7e_None_NP_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7e_None_NP_rexw_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_7e_None_66_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[685])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_7e_None_66_rexw_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[717])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_7e_None_66_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7e_None_66_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7e_None_66_rexw_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_7e_None_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[718])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_7e_None_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7e_None_NP_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7e_None_66_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7e_None_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_7e_cyrix_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1312])
		};

		static const RD_TABLE_VENDOR g_pRootTable_root_0f_7e_vendor = {
			RD_ILUT_VENDOR, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7e_None_mprefix),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7e_cyrix_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_12_mem_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[686])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_12_mem_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[694])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_12_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[700])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_12_mem_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[729])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_12_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_12_mem_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_12_mem_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_12_mem_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_12_mem_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_12_reg_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[686])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_12_reg_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[694])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_12_reg_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[729])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_12_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_12_reg_NP_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_12_reg_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_12_reg_F2_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_12_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_12_mem_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_12_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d6_reg_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[689])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d6_reg_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[720])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d6_reg_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[721])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_d6_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d6_reg_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d6_reg_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d6_reg_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d6_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[720])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_d6_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d6_mem_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_d6_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d6_mem_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d6_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_6f_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[690])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_6f_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[692])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_6f_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[715])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_6f_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_6f_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_6f_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_6f_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_7f_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[691])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_7f_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[693])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_7f_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[719])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_7f_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7f_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7f_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7f_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_16_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[695])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_16_mem_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[697])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_16_mem_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[728])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_16_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_16_mem_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_16_mem_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_16_mem_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_16_reg_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[699])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_16_reg_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[728])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_16_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_16_reg_NP_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_16_reg_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_16_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_16_mem_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_16_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_17_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[696])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_17_mem_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[698])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_17_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_17_mem_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_17_mem_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_17_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_17_mem_mprefix),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_13_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[701])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_13_mem_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[702])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_13_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_13_mem_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_13_mem_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_13_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_13_mem_mprefix),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_50_reg_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[703])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_50_reg_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[704])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_50_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_50_reg_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_50_reg_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_50_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_50_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_e7_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[705])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_e7_mem_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[710])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_e7_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e7_mem_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e7_mem_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_e7_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e7_mem_mprefix),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c3_mem_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[707])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_c3_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c3_mem_NP_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_c3_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c3_mem_mprefix),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_2b_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[708])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_2b_mem_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[709])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_2b_mem_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[711])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_2b_mem_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[712])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_2b_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2b_mem_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2b_mem_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2b_mem_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2b_mem_F2_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_2b_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2b_mem_mprefix),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_10_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[724])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_10_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[732])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_10_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[739])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_10_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[741])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_10_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_10_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_10_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_10_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_10_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_11_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[725])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_11_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[733])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_11_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[740])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_11_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[742])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_11_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_11_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_11_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_11_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_11_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_be_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[736])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_bf_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[737])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_b6_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[743])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_b7_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[744])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_59_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[748])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_59_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[749])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_59_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[750])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_59_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[751])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_59_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_59_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_59_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_59_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_59_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0d_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[757])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0d_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[758])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0d_reg_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[759])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0d_reg_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[760])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0d_reg_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[761])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0d_reg_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[762])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0d_reg_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[763])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0d_reg_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[764])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_0d_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0d_reg_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0d_reg_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0d_reg_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0d_reg_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0d_reg_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0d_reg_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0d_reg_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0d_reg_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0d_mem_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1035])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0d_mem_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1036])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0d_mem_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1037])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0d_mem_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1038])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0d_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1039])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0d_mem_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1042])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0d_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1051])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0d_mem_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1052])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_0d_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0d_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0d_mem_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0d_mem_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0d_mem_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0d_mem_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0d_mem_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0d_mem_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0d_mem_07_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_0d_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0d_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0d_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_None_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[765])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_None_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[766])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_None_reg_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[767])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_None_reg_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[768])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_None_reg_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[769])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_None_reg_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[770])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_None_reg_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[771])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_None_reg_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[772])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_18_None_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_None_reg_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_None_reg_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_None_reg_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_None_reg_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_None_reg_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_None_reg_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_None_reg_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_None_reg_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_None_mem_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[769])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_None_mem_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[770])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_None_mem_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[771])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_None_mem_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[772])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_None_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1043])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_None_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1045])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_None_mem_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1047])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_None_mem_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1049])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_18_None_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_None_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_None_mem_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_None_mem_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_None_mem_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_None_mem_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_None_mem_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_None_mem_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_None_mem_07_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_18_None_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_None_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_None_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_piti_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[774])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_piti_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[775])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_piti_reg_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[776])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_piti_reg_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[777])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_piti_reg_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[778])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_piti_reg_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[779])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_piti_reg_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[781])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_piti_reg_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[783])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_18_piti_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_reg_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_reg_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_reg_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_reg_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_reg_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_reg_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_reg_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_reg_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_piti_mem_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[778])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_piti_mem_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[779])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_piti_mem_06_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[780])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_piti_mem_06_riprel_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1041])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_18_piti_mem_06_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_mem_06_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_mem_06_riprel_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_piti_mem_07_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[782])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_piti_mem_07_riprel_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1040])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_18_piti_mem_07_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_mem_07_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_mem_07_riprel_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_piti_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1044])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_piti_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1046])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_piti_mem_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1048])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_18_piti_mem_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1050])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_18_piti_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_mem_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_mem_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_mem_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_mem_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_mem_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_mem_06_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_mem_07_auxiliary)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_18_piti_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_reg_modrmreg)
			}
		};

		static const RD_TABLE_FEATURE g_pRootTable_root_0f_18_feature = {
			RD_ILUT_FEATURE, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_None_modrmmod),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_piti_modrmmod),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_19_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[773])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1d_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[787])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_1f_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[789])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_56_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[834])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_56_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[835])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_56_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_56_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_56_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_6b_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[852])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_6b_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[853])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_6b_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_6b_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_6b_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_63_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[854])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_63_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[855])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_63_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_63_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_63_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_67_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[857])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_67_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[858])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_67_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_67_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_67_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_fc_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[859])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_fc_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[860])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_fc_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_fc_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_fc_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_fe_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[861])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_fe_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[862])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_fe_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_fe_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_fe_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d4_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[863])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d4_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[864])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_d4_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d4_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d4_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ec_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[865])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ec_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[866])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_ec_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ec_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ec_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ed_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[867])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ed_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[868])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_ed_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ed_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ed_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_dc_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[869])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_dc_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[870])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_dc_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_dc_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_dc_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_dd_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[871])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_dd_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[872])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_dd_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_dd_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_dd_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_fd_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[873])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_fd_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[874])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_fd_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_fd_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_fd_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_db_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[877])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_db_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[878])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_db_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_db_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_db_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_df_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[879])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_df_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[880])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_df_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_df_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_df_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_e0_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[882])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_e0_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[883])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_e0_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e0_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e0_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_bf_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[884])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_1d_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[922])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_1c_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[923])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_ae_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[924])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_9e_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[925])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_b0_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[926])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_90_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[927])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_a0_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[928])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_a4_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[929])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_94_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[930])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_b4_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[931])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_8a_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[932])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_8e_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[933])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_96_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[934])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_a6_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[935])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_b6_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[936])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_86_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[937])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_a7_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[938])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_97_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[939])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_87_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[940])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_9a_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[941])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_aa_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[942])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_0d_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[956])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_0c_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[957])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_b7_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1003])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0f_bb_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1118])
		};

		static const RD_TABLE_OPCODE g_pRootTable_root_0f_0f_opcode_3dnow = {
			RD_ILUT_OPCODE_3DNOW, {
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_0c_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_0d_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_1c_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_1d_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_86_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_87_leaf),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_8a_leaf),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_8e_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_90_leaf),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_94_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_96_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_97_leaf),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_9a_leaf),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_9e_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_a0_leaf),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_a4_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_a6_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_a7_leaf),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_aa_leaf),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_ae_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_b0_leaf),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_b4_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_b6_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_b7_leaf),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_bb_leaf),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_bf_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_e3_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[885])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_e3_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[886])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_e3_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e3_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e3_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_74_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[891])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_74_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[892])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_74_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_74_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_74_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_76_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[893])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_76_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[894])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_76_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_76_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_76_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_75_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[896])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_75_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[897])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_75_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_75_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_75_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_64_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[900])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_64_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[901])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_64_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_64_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_64_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_66_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[902])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_66_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[903])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_66_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_66_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_66_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_65_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[905])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_65_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[906])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_65_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_65_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_65_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c5_reg_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[918])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c5_reg_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[919])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_c5_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c5_reg_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c5_reg_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_c5_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c5_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c4_reg_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[962])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c4_reg_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[964])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_c4_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c4_reg_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c4_reg_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c4_mem_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[963])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c4_mem_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[965])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_c4_mem_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c4_mem_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c4_mem_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_c4_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c4_mem_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c4_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_f5_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[968])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_f5_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[969])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_f5_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f5_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f5_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ee_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[972])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ee_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[973])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_ee_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ee_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ee_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_de_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[974])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_de_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[975])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_de_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_de_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_de_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ea_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[980])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ea_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[981])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_ea_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ea_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ea_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_da_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[982])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_da_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[983])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_da_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_da_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_da_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d7_reg_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[986])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d7_reg_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[987])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_d7_reg_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d7_reg_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d7_reg_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_d7_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d7_reg_mprefix)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_e4_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1004])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_e4_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1005])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_e4_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e4_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e4_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_e5_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1006])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_e5_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1007])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_e5_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e5_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e5_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d5_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1009])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d5_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1010])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_d5_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d5_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d5_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_f4_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1011])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_f4_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1012])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_f4_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f4_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f4_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_a1_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1013])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_a9_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1014])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_eb_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1033])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_eb_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1034])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_eb_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_eb_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_eb_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_f6_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1053])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_f6_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1054])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_f6_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f6_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f6_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_70_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1057])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_70_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1058])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_70_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1059])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_70_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1060])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_70_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_70_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_70_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_70_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_70_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_72_reg_06_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1067])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_72_reg_06_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1068])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_72_reg_06_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_72_reg_06_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_72_reg_06_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_72_reg_04_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1081])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_72_reg_04_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1082])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_72_reg_04_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_72_reg_04_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_72_reg_04_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_72_reg_02_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1089])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_72_reg_02_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1090])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_72_reg_02_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_72_reg_02_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_72_reg_02_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_72_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_72_reg_02_mprefix),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_72_reg_04_mprefix),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_72_reg_06_mprefix),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_72_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_72_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_f2_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1069])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_f2_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1070])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_f2_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f2_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f2_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_73_reg_07_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1071])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_73_reg_07_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_73_reg_07_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_73_reg_06_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1072])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_73_reg_06_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1073])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_73_reg_06_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_73_reg_06_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_73_reg_06_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_73_reg_03_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1093])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_73_reg_03_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_73_reg_03_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_73_reg_02_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1094])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_73_reg_02_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1095])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_73_reg_02_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_73_reg_02_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_73_reg_02_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_73_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_73_reg_02_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_73_reg_03_mprefix),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_73_reg_06_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_73_reg_07_mprefix)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_73_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_73_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_f3_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1074])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_f3_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1075])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_f3_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f3_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f3_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_71_reg_06_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1076])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_71_reg_06_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1077])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_71_reg_06_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_71_reg_06_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_71_reg_06_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_71_reg_04_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1085])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_71_reg_04_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1086])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_71_reg_04_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_71_reg_04_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_71_reg_04_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_71_reg_02_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1098])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_71_reg_02_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1099])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_71_reg_02_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_71_reg_02_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_71_reg_02_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_71_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_71_reg_02_mprefix),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_71_reg_04_mprefix),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_71_reg_06_mprefix),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_71_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_71_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_f1_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1078])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_f1_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1079])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_f1_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f1_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f1_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_e2_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1083])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_e2_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1084])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_e2_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e2_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e2_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_e1_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1087])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_e1_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1088])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_e1_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e1_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e1_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d2_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1091])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d2_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1092])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_d2_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d2_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d2_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d3_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1096])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d3_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1097])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_d3_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d3_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d3_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d1_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1100])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d1_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1101])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_d1_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d1_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d1_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_f8_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1102])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_f8_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1103])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_f8_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f8_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f8_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_fa_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1104])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_fa_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1105])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_fa_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_fa_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_fa_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_fb_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1106])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_fb_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1107])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_fb_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_fb_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_fb_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_e8_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1108])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_e8_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1109])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_e8_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e8_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e8_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_e9_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1110])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_e9_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1111])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_e9_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e9_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e9_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d8_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1112])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d8_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1113])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_d8_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d8_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d8_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d9_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1114])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_d9_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1115])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_d9_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d9_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d9_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_f9_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1116])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_f9_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1117])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_f9_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f9_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f9_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_68_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1121])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_68_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1122])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_68_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_68_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_68_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_6a_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1123])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_6a_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1124])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_6a_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_6a_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_6a_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_6d_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1125])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_6d_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_6d_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_69_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1126])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_69_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1127])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_69_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_69_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_69_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_60_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1128])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_60_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1129])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_60_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_60_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_60_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_62_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1130])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_62_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1131])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_62_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_62_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_62_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_6c_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1132])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_6c_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_6c_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_61_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1133])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_61_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1134])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_61_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_61_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_61_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_a0_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1135])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_a8_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1136])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ef_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1158])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ef_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1159])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_ef_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ef_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ef_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_53_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1166])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_53_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1167])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_53_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_53_NP_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_53_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_32_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1176])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_33_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1180])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_36_cyrix_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1186])
		};

		static const RD_TABLE_VENDOR g_pRootTable_root_0f_36_vendor = {
			RD_ILUT_VENDOR, {
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_36_cyrix_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_31_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1189])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_7b_cyrix_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1216])
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_7b_cyrix_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7b_cyrix_mem_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VENDOR g_pRootTable_root_0f_7b_vendor = {
			RD_ILUT_VENDOR, {
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7b_cyrix_modrmmod),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_aa_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1217])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_52_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1218])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_52_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1219])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_52_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_52_NP_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_52_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_96_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1261])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_92_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1262])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_9c_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1263])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_9e_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1264])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_97_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1265])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_93_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1266])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_9d_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1267])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_9f_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1268])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_91_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1269])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_9b_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1270])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_99_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1271])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_95_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1272])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_90_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1273])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_9a_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1274])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_98_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1275])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_94_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1277])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_a4_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1293])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_a5_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1294])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ac_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1302])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ad_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1303])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c6_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1305])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c6_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1306])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_c6_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c6_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c6_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_51_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1316])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_51_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1317])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_51_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1318])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_51_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1319])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_51_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_51_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_51_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_51_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_51_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5c_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1348])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5c_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1349])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5c_F2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1350])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_5c_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1351])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_5c_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5c_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5c_66_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5c_F3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5c_F2_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_7a_cyrix_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1353])
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_7a_cyrix_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7a_cyrix_mem_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VENDOR g_pRootTable_root_0f_7a_vendor = {
			RD_ILUT_VENDOR, {
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7a_cyrix_modrmmod),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1356])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_34_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1357])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_35_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1358])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1359])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_2e_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1388])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_2e_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1389])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_2e_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2e_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2e_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_ff_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1390])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_b9_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1391])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_0b_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1392])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_15_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1396])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_15_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1397])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_15_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_15_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_15_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_14_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1398])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_14_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1399])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_14_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_14_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_14_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_09_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2713])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_09_aF3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2714])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_0f_09_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_09_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_09_aF3_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_30_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2717])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c0_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2727])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_c1_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2728])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_a7_reg_02_00_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2740])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_a7_reg_02_00_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a7_reg_02_00_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_0f_a7_reg_02_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a7_reg_02_00_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_a7_reg_04_00_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2741])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_a7_reg_04_00_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a7_reg_04_00_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_0f_a7_reg_04_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a7_reg_04_00_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_a7_reg_03_00_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2742])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_a7_reg_03_00_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a7_reg_03_00_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_0f_a7_reg_03_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a7_reg_03_00_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_a7_reg_01_00_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2743])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_a7_reg_01_00_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a7_reg_01_00_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_0f_a7_reg_01_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a7_reg_01_00_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_a7_reg_05_00_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2744])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_a7_reg_05_00_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a7_reg_05_00_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_0f_a7_reg_05_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a7_reg_05_00_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_a7_reg_00_00_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2776])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_a7_reg_00_00_F3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2777])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_a7_reg_00_00_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a7_reg_00_00_None_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a7_reg_00_00_F3_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_0f_a7_reg_00_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a7_reg_00_00_mprefix),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_0f_a7_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a7_reg_00_modrmrm),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a7_reg_01_modrmrm),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a7_reg_02_modrmrm),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a7_reg_03_modrmrm),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a7_reg_04_modrmrm),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a7_reg_05_modrmrm),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_0f_a7_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a7_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_57_66_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2758])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0f_57_NP_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2759])
		};

		static const RD_TABLE_MPREFIX g_pRootTable_root_0f_57_mprefix = {
			RD_ILUT_MAN_PREFIX, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_57_NP_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_57_66_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_OPCODE g_pRootTable_root_0f_opcode = {
			RD_ILUT_OPCODE, {
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_00_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_01_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_02_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_03_modrmmod),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_07_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_08_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_09_auxiliary),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0b_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0d_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0e_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_0f_opcode_3dnow),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_10_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_11_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_12_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_13_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_14_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_15_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_16_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_17_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_18_feature),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_19_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1a_feature),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1b_feature),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1c_feature),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1d_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1e_feature),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_1f_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_20_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_21_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_22_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_23_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_24_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_26_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_28_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_29_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2a_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2b_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2c_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2d_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2e_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_2f_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_30_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_31_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_32_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_33_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_34_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_35_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_36_vendor),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_37_vendor),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_38_opcode),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_39_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3a_opcode),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3c_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3d_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_3f_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_40_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_41_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_42_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_43_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_44_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_45_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_46_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_47_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_48_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_49_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_4a_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_4b_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_4c_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_4d_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_4e_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_4f_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_50_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_51_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_52_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_53_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_54_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_55_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_56_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_57_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_58_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_59_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5a_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5b_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5c_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5d_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5e_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_5f_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_60_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_61_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_62_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_63_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_64_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_65_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_66_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_67_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_68_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_69_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_6a_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_6b_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_6c_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_6d_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_6e_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_6f_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_70_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_71_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_72_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_73_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_74_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_75_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_76_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_77_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_78_vendor),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_79_vendor),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7a_vendor),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7b_vendor),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7c_vendor),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7d_vendor),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7e_vendor),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_7f_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_80_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_81_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_82_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_83_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_84_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_85_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_86_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_87_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_88_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_89_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_8a_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_8b_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_8c_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_8d_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_8e_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_8f_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_90_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_91_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_92_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_93_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_94_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_95_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_96_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_97_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_98_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_99_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_9a_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_9b_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_9c_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_9d_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_9e_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_9f_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a0_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a1_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a2_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a4_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a5_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a6_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a7_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a8_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_a9_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_aa_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ab_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ac_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ad_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ae_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_af_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_b0_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_b1_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_b2_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_b3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_b4_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_b5_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_b6_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_b7_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_b8_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_b9_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ba_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_bb_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_bc_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_bd_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_be_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_bf_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c0_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c1_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c2_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c3_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c4_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c5_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c6_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c7_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c8_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_c9_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ca_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_cb_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_cc_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_cd_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ce_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_cf_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d0_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d1_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d2_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d3_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d4_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d5_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d6_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d7_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d8_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_d9_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_da_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_db_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_dc_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_dd_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_de_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_df_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e0_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e1_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e2_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e3_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e4_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e5_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e6_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e7_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e8_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_e9_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ea_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_eb_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ec_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ed_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ee_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ef_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f0_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f1_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f2_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f3_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f4_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f5_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f6_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f7_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f8_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_f9_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_fa_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_fb_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_fc_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_fd_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_fe_mprefix),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_ff_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d4_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[3])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_3f_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[5])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_10_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[6])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_11_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[7])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_12_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[8])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_13_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[9])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_14_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[10])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_15_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[11])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_80_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[12])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_80_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[23])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_80_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[55])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_80_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[156])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_80_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[830])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_80_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1244])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_80_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1344])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_80_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2754])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_80_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_80_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_80_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_80_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_80_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_80_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_80_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_80_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_80_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_81_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[13])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_81_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[24])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_81_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[56])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_81_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[157])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_81_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[831])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_81_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1245])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_81_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1345])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_81_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2755])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_81_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_81_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_81_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_81_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_81_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_81_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_81_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_81_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_81_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_82_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[14])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_82_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[25])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_82_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[57])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_82_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[158])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_82_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[832])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_82_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1246])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_82_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1346])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_82_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2756])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_82_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_82_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_82_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_82_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_82_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_82_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_82_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_82_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_82_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_83_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[15])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_83_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[26])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_83_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[58])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_83_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[159])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_83_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[833])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_83_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1247])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_83_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1347])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_83_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2757])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_83_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_83_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_83_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_83_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_83_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_83_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_83_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_83_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_83_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[17])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[18])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[19])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[20])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[21])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[22])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_20_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[49])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_21_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[50])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_22_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[51])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_23_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[52])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_24_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[53])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_25_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[54])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_63_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[65])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_63_64_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[738])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_63_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_63_None_leaf),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_63_64_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_62_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[91])
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_62_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_62_mem_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_e8_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[111])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ff_mem_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[112])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ff_mem_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[114])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ff_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[237])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ff_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[446])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ff_mem_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[485])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ff_mem_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[489])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ff_mem_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1151])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_ff_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_ff_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_ff_mem_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_ff_mem_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_ff_mem_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_ff_mem_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_ff_mem_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_ff_mem_06_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ff_reg_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[112])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ff_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[237])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ff_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[446])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ff_reg_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[485])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ff_reg_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1151])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_ff_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_ff_reg_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_ff_reg_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_ff_reg_02_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_ff_reg_04_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_ff_reg_06_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_ff_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_ff_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_ff_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_9a_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[113])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_98_ds16_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[115])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_98_ds64_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[117])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_98_ds32_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[225])
		};

		static const RD_TABLE_DSIZE g_pRootTable_root_98_dsize = {
			RD_ILUT_DSIZE, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_98_ds16_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_98_ds32_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_98_ds64_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_99_ds32_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[116])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_99_ds64_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[197])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_99_ds16_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[224])
		};

		static const RD_TABLE_DSIZE g_pRootTable_root_99_dsize = {
			RD_ILUT_DSIZE, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_99_ds16_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_99_ds32_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_99_ds64_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_f8_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[119])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_fc_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[120])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_fa_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[127])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_f5_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[133])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_38_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[150])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_39_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[151])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_3a_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[152])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_3b_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[153])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_3c_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[154])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_3d_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[155])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a6_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[176])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a6_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[177])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_a6_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_a6_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_a6_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a7_ds32_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[179])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a7_ds32_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[180])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_a7_ds32_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_a7_ds32_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_a7_ds32_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a7_ds64_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[181])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a7_ds64_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[182])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_a7_ds64_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_a7_ds64_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_a7_ds64_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a7_ds16_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[184])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a7_ds16_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[185])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_a7_ds16_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_a7_ds16_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_a7_ds16_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_DSIZE g_pRootTable_root_a7_dsize = {
			RD_ILUT_DSIZE, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_a7_ds16_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_a7_ds32_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_a7_ds64_auxiliary),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_27_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[226])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_2f_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[227])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_48_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[228])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_49_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[229])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_4a_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[230])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_4b_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[231])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_4c_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[232])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_4d_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[233])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_4e_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[234])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_4f_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[235])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_fe_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[236])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_fe_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[445])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_fe_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_fe_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_fe_01_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_f6_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[239])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_f6_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[426])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_f6_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[431])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_f6_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[746])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_f6_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[755])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_f6_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[822])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_f6_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1374])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_f6_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1375])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_f6_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_f6_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_f6_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_f6_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_f6_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_f6_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_f6_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_f6_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_f6_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_f7_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[240])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_f7_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[427])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_f7_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[432])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_f7_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[747])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_f7_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[756])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_f7_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[823])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_f7_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1376])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_f7_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1377])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_f7_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_f7_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_f7_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_f7_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_f7_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_f7_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_f7_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_f7_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_f7_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c8_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[258])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_06_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[264])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_06_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[295])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_06_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[324])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_06_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[366])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_06_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[368])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_06_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[369])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_06_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[413])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_06_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[414])
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_d9_reg_06_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_06_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_06_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_06_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_06_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_06_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_06_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_06_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_06_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_04_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[265])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_04_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[273])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_04_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[399])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_04_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[405])
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_d9_reg_04_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_04_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_04_01_leaf),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_04_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_04_05_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_07_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[294])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_07_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[367])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_07_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[371])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_07_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[373])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_07_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[374])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_07_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[375])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_07_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[376])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_07_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[415])
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_d9_reg_07_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_07_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_07_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_07_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_07_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_07_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_07_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_07_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_07_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[338])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_05_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[341])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_05_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[344])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_05_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[345])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_05_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[346])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_05_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[347])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_05_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[348])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_05_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[349])
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_d9_reg_05_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_05_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_05_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_05_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_05_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_05_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_05_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_05_06_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[358])
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_d9_reg_02_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_02_00_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[387])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[406])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_d9_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_02_modrmrm),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_04_modrmrm),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_05_modrmrm),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_06_modrmrm),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_07_modrmrm)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[337])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_mem_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[342])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_mem_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[343])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_mem_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[362])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_mem_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[363])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_mem_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[377])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d9_mem_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[381])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_d9_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_mem_00_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_mem_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_mem_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_mem_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_mem_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_mem_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_mem_07_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_d9_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d8_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[266])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d8_mem_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[282])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d8_mem_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[288])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d8_mem_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[296])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d8_mem_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[301])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d8_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[350])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d8_mem_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[389])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d8_mem_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[394])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_d8_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_d8_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d8_mem_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d8_mem_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d8_mem_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d8_mem_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d8_mem_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d8_mem_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d8_mem_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d8_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[267])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d8_reg_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[283])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d8_reg_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[289])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d8_reg_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[297])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d8_reg_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[302])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d8_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[351])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d8_reg_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[390])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d8_reg_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[395])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_d8_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_d8_reg_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d8_reg_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d8_reg_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d8_reg_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d8_reg_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d8_reg_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d8_reg_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d8_reg_07_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_d8_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_d8_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_d8_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dc_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[268])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dc_mem_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[284])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dc_mem_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[290])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dc_mem_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[298])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dc_mem_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[303])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dc_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[352])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dc_mem_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[391])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dc_mem_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[396])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_dc_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_dc_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dc_mem_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dc_mem_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dc_mem_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dc_mem_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dc_mem_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dc_mem_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dc_mem_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dc_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[269])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dc_reg_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[285])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dc_reg_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[291])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dc_reg_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[299])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dc_reg_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[304])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dc_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[353])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dc_reg_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[392])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dc_reg_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[397])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_dc_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_dc_reg_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dc_reg_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dc_reg_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dc_reg_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dc_reg_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dc_reg_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dc_reg_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dc_reg_07_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_dc_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_dc_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_dc_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_de_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[270])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_de_reg_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[292])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_de_reg_03_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[293])
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_de_reg_03_modrmrm = {
			RD_ILUT_MODRM_RM, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_de_reg_03_01_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_de_reg_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[300])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_de_reg_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[305])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_de_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[354])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_de_reg_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[393])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_de_reg_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[398])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_de_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_de_reg_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_de_reg_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_de_reg_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_de_reg_03_modrmrm),
				reinterpret_cast<const void*>(&g_pRootTable_root_de_reg_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_de_reg_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_de_reg_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_de_reg_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_de_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[310])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_de_mem_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[312])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_de_mem_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[314])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_de_mem_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[316])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_de_mem_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[318])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_de_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[323])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_de_mem_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[334])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_de_mem_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[336])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_de_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_de_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_de_mem_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_de_mem_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_de_mem_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_de_mem_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_de_mem_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_de_mem_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_de_mem_07_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_de_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_de_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_de_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_df_mem_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[271])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_df_mem_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[272])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_df_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[320])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_df_mem_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[321])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_df_mem_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[326])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_df_mem_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[328])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_df_mem_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[329])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_df_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[332])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_df_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_df_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_df_mem_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_df_mem_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_df_mem_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_df_mem_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_df_mem_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_df_mem_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_df_mem_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_df_reg_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[287])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_df_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[308])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_df_reg_04_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[365])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_df_reg_04_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[380])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_df_reg_04_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[388])
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_df_reg_04_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_df_reg_04_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_df_reg_04_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_df_reg_04_02_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_df_reg_07_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[370])
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_df_reg_07_modrmrm = {
			RD_ILUT_MODRM_RM, {
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_df_reg_07_04_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_df_reg_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[385])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_df_reg_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[386])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_df_reg_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[402])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_df_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[408])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_df_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_df_reg_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_df_reg_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_df_reg_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_df_reg_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_df_reg_04_modrmrm),
				reinterpret_cast<const void*>(&g_pRootTable_root_df_reg_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_df_reg_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_df_reg_07_modrmrm)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_df_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_df_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_df_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_da_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[274])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_da_reg_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[275])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_da_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[276])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_da_reg_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[281])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_da_reg_05_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[404])
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_da_reg_05_modrmrm = {
			RD_ILUT_MODRM_RM, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_da_reg_05_01_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_da_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_da_reg_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_da_reg_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_da_reg_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_da_reg_03_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_da_reg_05_modrmrm),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_da_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[309])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_da_mem_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[311])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_da_mem_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[313])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_da_mem_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[315])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_da_mem_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[317])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_da_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[322])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_da_mem_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[333])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_da_mem_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[335])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_da_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_da_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_da_mem_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_da_mem_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_da_mem_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_da_mem_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_da_mem_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_da_mem_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_da_mem_07_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_da_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_da_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_da_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_db_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[277])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_db_reg_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[278])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_db_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[279])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_db_reg_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[280])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_db_reg_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[286])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_db_reg_04_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[355])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_db_reg_04_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[356])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_db_reg_04_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[357])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_db_reg_04_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[359])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_db_reg_04_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[360])
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_db_reg_04_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_db_reg_04_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_db_reg_04_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_db_reg_04_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_db_reg_04_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_db_reg_04_04_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_db_reg_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[401])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_db_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_db_reg_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_db_reg_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_db_reg_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_db_reg_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_db_reg_04_modrmrm),
				reinterpret_cast<const void*>(&g_pRootTable_root_db_reg_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_db_reg_06_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_db_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[319])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_db_mem_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[325])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_db_mem_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[327])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_db_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[330])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_db_mem_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[339])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_db_mem_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[382])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_db_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_db_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_db_mem_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_db_mem_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_db_mem_03_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_db_mem_05_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_db_mem_07_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_db_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_db_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_db_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dd_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[307])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dd_reg_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[379])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dd_reg_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[384])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dd_reg_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[400])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dd_reg_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[403])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dd_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[407])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_dd_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_dd_reg_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dd_reg_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dd_reg_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dd_reg_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dd_reg_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dd_reg_05_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dd_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[331])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dd_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[340])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dd_mem_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[361])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dd_mem_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[364])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dd_mem_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[372])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dd_mem_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[378])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_dd_mem_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[383])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_dd_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_dd_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dd_mem_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dd_mem_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dd_mem_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dd_mem_04_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_dd_mem_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_dd_mem_07_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_dd_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_dd_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_dd_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_f4_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[422])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_69_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[429])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_6b_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[430])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_e4_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[433])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_e5_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[434])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ec_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[435])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ed_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[436])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_40_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[437])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_41_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[438])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_42_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[439])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_43_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[440])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_44_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[441])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_45_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[442])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_46_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[443])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_47_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[444])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_6c_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[449])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_6c_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[450])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_6c_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_6c_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_6c_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_6d_None_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[451])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_6d_None_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[452])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_6d_None_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_6d_None_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_6d_None_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_6d_ds16_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[457])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_6d_ds16_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[458])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_6d_ds16_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_6d_ds16_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_6d_ds16_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_DSIZE g_pRootTable_root_6d_dsize = {
			RD_ILUT_DSIZE, {
				reinterpret_cast<const void*>(&g_pRootTable_root_6d_None_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_6d_ds16_auxiliary),
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_cd_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[459])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_f1_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[460])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_cc_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[461])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ce_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[462])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_cf_ds32_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[470])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_cf_ds64_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[471])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_cf_ds16_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[472])
		};

		static const RD_TABLE_DSIZE g_pRootTable_root_cf_dsize = {
			RD_ILUT_DSIZE, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_cf_ds16_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_cf_ds32_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_cf_ds64_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_76_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[474])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_72_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[476])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_e3_as16_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[477])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_e3_as32_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[478])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_e3_as64_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[510])
		};

		static const RD_TABLE_ASIZE g_pRootTable_root_e3_asize = {
			RD_ILUT_ASIZE, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_e3_as16_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_e3_as32_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_e3_as64_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_7c_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[480])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_7e_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[482])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_e9_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[483])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_eb_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[484])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ea_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[488])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_77_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[491])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_73_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[493])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_7d_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[495])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_7f_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[497])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_71_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[499])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_7b_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[501])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_79_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[503])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_75_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[505])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_70_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[507])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_7a_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[509])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_78_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[512])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_74_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[514])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_9f_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[584])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c5_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[589])
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_c5_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_c5_mem_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_8d_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[591])
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_8d_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_8d_mem_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c9_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[592])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c4_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[593])
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_c4_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_c4_mem_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ac_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[605])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ac_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[606])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_ac_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_ac_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_ac_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ad_ds32_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[607])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ad_ds32_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[608])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_ad_ds32_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_ad_ds32_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_ad_ds32_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ad_ds64_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[609])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ad_ds64_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[610])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_ad_ds64_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_ad_ds64_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_ad_ds64_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ad_ds16_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[611])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ad_ds16_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[612])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_ad_ds16_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_ad_ds16_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_ad_ds16_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_DSIZE g_pRootTable_root_ad_dsize = {
			RD_ILUT_DSIZE, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_ad_ds16_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_ad_ds32_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_ad_ds64_auxiliary),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_e2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[613])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_e0_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[614])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_e1_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[615])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_88_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[644])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_89_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[645])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_8a_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[646])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_8b_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[647])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_8c_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[648])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_8c_reg_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[649])
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_8c_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_8c_mem_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_8c_reg_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_8e_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[650])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_8e_reg_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[651])
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_8e_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_8e_mem_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_8e_reg_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a0_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[652])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a1_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[653])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[654])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[655])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_b0_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[656])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_b1_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[657])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_b2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[658])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_b3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[659])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_b4_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[660])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_b5_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[661])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_b6_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[662])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_b7_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[663])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_b8_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[664])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_b9_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[665])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ba_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[666])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_bb_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[667])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_bc_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[668])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_bd_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[669])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_be_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[670])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_bf_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[671])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c6_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[672])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_c6_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_c6_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c6_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[672])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c6_reg_07_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2726])
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_c6_reg_07_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_c6_reg_07_00_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_c6_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_c6_reg_00_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_c6_reg_07_modrmrm)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_c6_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_c6_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_c6_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c7_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[673])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_c7_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_c7_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c7_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[673])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c7_reg_07_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2729])
		};

		static const RD_TABLE_MODRM_RM g_pRootTable_root_c7_reg_07_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pRootTable_root_c7_reg_07_00_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_c7_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_c7_reg_00_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_c7_reg_07_modrmrm)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pRootTable_root_c7_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pRootTable_root_c7_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_c7_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a4_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[722])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a4_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[723])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_a4_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_a4_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_a4_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a5_ds32_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[726])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a5_ds32_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[727])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_a5_ds32_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_a5_ds32_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_a5_ds32_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a5_ds64_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[730])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a5_ds64_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[731])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_a5_ds64_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_a5_ds64_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_a5_ds64_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a5_ds16_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[734])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a5_ds16_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[735])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_a5_ds16_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_a5_ds16_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_a5_ds16_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_DSIZE g_pRootTable_root_a5_dsize = {
			RD_ILUT_DSIZE, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_a5_ds16_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_a5_ds32_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_a5_ds64_auxiliary),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_90_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[821])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_90_aF3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[881])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_90_rexb_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2732])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_90_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_90_None_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_90_rexb_leaf),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_90_aF3_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_08_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[824])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_09_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[825])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0a_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[826])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0b_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[827])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0c_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[828])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0d_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[829])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_e6_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[836])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_e7_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[837])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ee_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[838])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ef_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[839])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_6e_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[840])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_6e_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[841])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_6e_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_6e_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_6e_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_6f_None_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[842])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_6f_None_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[843])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_6f_None_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_6f_None_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_6f_None_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_6f_ds16_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[844])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_6f_ds16_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[845])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_6f_ds16_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_6f_ds16_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_6f_ds16_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_DSIZE g_pRootTable_root_6f_dsize = {
			RD_ILUT_DSIZE, {
				reinterpret_cast<const void*>(&g_pRootTable_root_6f_None_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_6f_ds16_auxiliary),
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1015])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_17_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1016])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_1f_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1017])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_58_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1018])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_59_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1019])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_5a_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1020])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_5b_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1021])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_5c_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1022])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_5d_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1023])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_5e_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1024])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_5f_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1025])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_8f_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1026])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_8f_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_8f_00_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_61_ds16_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1027])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_61_ds32_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1028])
		};

		static const RD_TABLE_DSIZE g_pRootTable_root_61_dsize = {
			RD_ILUT_DSIZE, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_61_ds16_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_61_ds32_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_9d_ds32_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1030])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_9d_dds64_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1031])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_9d_ds16_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1032])
		};

		static const RD_TABLE_DSIZE g_pRootTable_root_9d_dsize = {
			RD_ILUT_DSIZE, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_9d_ds16_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_9d_ds32_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_9d_dds64_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1137])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_0e_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1138])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_16_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1139])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_1e_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1140])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_50_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1141])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_51_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1142])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_52_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1143])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_53_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1144])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_54_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1145])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_55_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1146])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_56_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1147])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_57_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1148])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_68_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1149])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_6a_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1150])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_60_ds16_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1152])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_60_ds32_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1153])
		};

		static const RD_TABLE_DSIZE g_pRootTable_root_60_dsize = {
			RD_ILUT_DSIZE, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_60_ds16_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_60_ds32_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_9c_ds32_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1154])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_9c_dds64_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1155])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_9c_ds16_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1156])
		};

		static const RD_TABLE_DSIZE g_pRootTable_root_9c_dsize = {
			RD_ILUT_DSIZE, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_9c_ds16_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_9c_ds32_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_9c_dds64_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c0_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1160])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c0_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1168])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c0_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1198])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c0_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1204])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c0_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1223])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c0_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1230])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c0_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1287])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c0_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1296])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_c0_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_c0_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_c0_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_c0_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_c0_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_c0_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_c0_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_c0_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_c0_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c1_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1161])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c1_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1169])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c1_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1199])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c1_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1205])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c1_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1224])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c1_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1231])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c1_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1288])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c1_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1297])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_c1_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_c1_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_c1_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_c1_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_c1_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_c1_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_c1_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_c1_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_c1_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d0_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1162])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d0_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1170])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d0_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1200])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d0_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1206])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d0_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1225])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d0_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1232])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d0_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1289])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d0_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1298])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_d0_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_d0_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d0_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d0_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d0_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d0_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d0_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d0_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d0_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d1_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1163])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d1_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1171])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d1_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1201])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d1_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1207])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d1_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1226])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d1_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1233])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d1_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1290])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d1_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1299])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_d1_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_d1_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d1_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d1_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d1_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d1_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d1_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d1_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d1_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d2_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1164])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d2_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1172])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d2_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1202])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d2_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1208])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d2_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1227])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d2_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1234])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d2_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1291])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d2_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1300])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_d2_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_d2_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d2_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d2_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d2_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d2_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d2_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d2_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d2_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d3_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1165])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d3_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1173])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d3_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1203])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d3_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1209])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d3_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1228])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d3_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1235])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d3_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1292])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d3_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1301])
		};

		static const RD_TABLE_MODRM_REG g_pRootTable_root_d3_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pRootTable_root_d3_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d3_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d3_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d3_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d3_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d3_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d3_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d3_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ca_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1191])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_cb_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1192])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1193])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_c3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1194])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_9e_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1222])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d6_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1229])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_18_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1238])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_19_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1239])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_1a_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1240])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_1b_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1241])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_1c_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1242])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_1d_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1243])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ae_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1248])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ae_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1249])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_ae_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_ae_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_ae_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_af_ds32_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1250])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_af_ds32_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1251])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_af_ds32_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_af_ds32_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_af_ds32_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_af_ds64_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1252])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_af_ds64_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1253])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_af_ds64_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_af_ds64_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_af_ds64_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_af_ds16_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1254])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_af_ds16_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1255])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_af_ds16_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_af_ds16_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_af_ds16_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_DSIZE g_pRootTable_root_af_dsize = {
			RD_ILUT_DSIZE, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_af_ds16_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_af_ds32_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_af_ds64_auxiliary),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_f9_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1321])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_fd_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1322])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_fb_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1324])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_aa_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1326])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_aa_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1327])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_aa_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_aa_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_aa_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ab_ds32_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1328])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ab_ds32_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1329])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_ab_ds32_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_ab_ds32_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_ab_ds32_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ab_ds64_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1330])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ab_ds64_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1331])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_ab_ds64_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_ab_ds64_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_ab_ds64_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ab_ds16_None_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1332])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_ab_ds16_rep_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1333])
		};

		static const RD_TABLE_AUXILIARY g_pRootTable_root_ab_ds16_auxiliary = {
			RD_ILUT_AUXILIARY, {
				reinterpret_cast<const void*>(&g_pRootTable_root_ab_ds16_None_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_ab_ds16_rep_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_DSIZE g_pRootTable_root_ab_dsize = {
			RD_ILUT_DSIZE, {
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_ab_ds16_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_ab_ds32_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_ab_ds64_auxiliary),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_28_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1338])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_29_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1339])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_2a_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1340])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_2b_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1341])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_2c_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1342])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_2d_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1343])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_84_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1370])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_85_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1371])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a8_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1372])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_a9_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1373])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_9b_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2712])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_86_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2730])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_87_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2731])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_91_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2733])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_92_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2734])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_93_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2735])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_94_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2736])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_95_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2737])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_96_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2738])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_97_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2739])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_d7_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2747])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_30_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2748])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_31_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2749])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_32_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2750])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_33_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2751])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_34_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2752])
		};

		static const RD_TABLE_INSTRUCTION g_pRootTable_root_35_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2753])
		};

		static const RD_TABLE_OPCODE g_pRootTable_root_opcode = {
			RD_ILUT_OPCODE, {
				reinterpret_cast<const void*>(&g_pRootTable_root_00_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_01_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_02_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_03_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_04_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_05_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_06_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_07_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_08_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_09_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0a_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0b_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0c_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0d_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0e_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_0f_opcode),
				reinterpret_cast<const void*>(&g_pRootTable_root_10_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_11_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_12_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_13_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_14_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_15_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_16_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_17_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_18_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_19_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_1a_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_1b_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_1c_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_1d_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_1e_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_1f_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_20_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_21_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_22_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_23_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_24_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_25_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_27_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_28_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_29_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_2a_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_2b_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_2c_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_2d_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_2f_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_30_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_31_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_32_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_33_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_34_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_35_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_37_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_38_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_39_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_3a_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_3b_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_3c_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_3d_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_3f_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_40_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_41_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_42_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_43_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_44_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_45_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_46_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_47_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_48_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_49_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_4a_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_4b_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_4c_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_4d_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_4e_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_4f_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_50_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_51_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_52_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_53_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_54_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_55_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_56_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_57_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_58_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_59_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_5a_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_5b_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_5c_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_5d_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_5e_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_5f_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_60_dsize),
				reinterpret_cast<const void*>(&g_pRootTable_root_61_dsize),
				reinterpret_cast<const void*>(&g_pRootTable_root_62_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_63_auxiliary),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_68_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_69_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_6a_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_6b_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_6c_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_6d_dsize),
				reinterpret_cast<const void*>(&g_pRootTable_root_6e_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_6f_dsize),
				reinterpret_cast<const void*>(&g_pRootTable_root_70_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_71_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_72_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_73_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_74_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_75_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_76_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_77_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_78_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_79_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_7a_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_7b_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_7c_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_7d_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_7e_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_7f_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_80_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_81_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_82_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_83_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_84_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_85_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_86_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_87_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_88_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_89_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_8a_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_8b_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_8c_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_8d_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_8e_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_8f_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_90_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_91_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_92_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_93_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_94_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_95_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_96_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_97_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_98_dsize),
				reinterpret_cast<const void*>(&g_pRootTable_root_99_dsize),
				reinterpret_cast<const void*>(&g_pRootTable_root_9a_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_9b_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_9c_dsize),
				reinterpret_cast<const void*>(&g_pRootTable_root_9d_dsize),
				reinterpret_cast<const void*>(&g_pRootTable_root_9e_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_9f_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_a0_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_a1_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_a2_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_a3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_a4_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_a5_dsize),
				reinterpret_cast<const void*>(&g_pRootTable_root_a6_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_a7_dsize),
				reinterpret_cast<const void*>(&g_pRootTable_root_a8_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_a9_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_aa_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_ab_dsize),
				reinterpret_cast<const void*>(&g_pRootTable_root_ac_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_ad_dsize),
				reinterpret_cast<const void*>(&g_pRootTable_root_ae_auxiliary),
				reinterpret_cast<const void*>(&g_pRootTable_root_af_dsize),
				reinterpret_cast<const void*>(&g_pRootTable_root_b0_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_b1_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_b2_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_b3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_b4_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_b5_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_b6_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_b7_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_b8_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_b9_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_ba_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_bb_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_bc_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_bd_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_be_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_bf_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_c0_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_c1_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_c2_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_c3_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_c4_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_c5_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_c6_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_c7_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_c8_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_c9_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_ca_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_cb_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_cc_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_cd_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_ce_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_cf_dsize),
				reinterpret_cast<const void*>(&g_pRootTable_root_d0_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_d1_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_d2_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_d3_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_d4_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d5_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d6_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d7_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_d8_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_d9_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_da_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_db_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_dc_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_dd_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_de_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_df_modrmmod),
				reinterpret_cast<const void*>(&g_pRootTable_root_e0_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_e1_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_e2_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_e3_asize),
				reinterpret_cast<const void*>(&g_pRootTable_root_e4_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_e5_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_e6_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_e7_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_e8_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_e9_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_ea_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_eb_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_ec_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_ed_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_ee_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_ef_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_f1_leaf),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pRootTable_root_f4_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_f5_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_f6_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_f7_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_f8_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_f9_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_fa_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_fb_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_fc_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_fd_leaf),
				reinterpret_cast<const void*>(&g_pRootTable_root_fe_modrmreg),
				reinterpret_cast<const void*>(&g_pRootTable_root_ff_modrmmod)
			}
		};

		RD_TABLE const* const g_pRootTable = reinterpret_cast<RD_TABLE const* const>(&g_pRootTable_root_opcode);

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_0a_10_leaf = {
	RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[68])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_0a_12_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[620])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_0a_12_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[621])
		};

		static const RD_TABLE_MODRM_REG g_pXopTable_root_0a_12_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pXopTable_root_0a_12_00_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_0a_12_01_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_OPCODE g_pXopTable_root_0a_opcode = {
			RD_ILUT_OPCODE, {
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_0a_10_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_0a_12_modrmreg),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[69])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_01_05_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[71])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_01_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[73])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_01_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[78])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_01_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[80])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_01_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1360])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_01_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1387])
		};

		static const RD_TABLE_MODRM_REG g_pXopTable_root_09_01_modrmreg = {
			RD_ILUT_MODRM_REG, {
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_09_01_01_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_01_02_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_01_03_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_01_04_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_01_05_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_01_06_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_01_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_02_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[70])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[72])
		};

		static const RD_TABLE_MODRM_REG g_pXopTable_root_09_02_modrmreg = {
			RD_ILUT_MODRM_REG, {
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_09_02_01_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_09_02_06_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_12_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[602])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_12_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1311])
		};

		static const RD_TABLE_MODRM_REG g_pXopTable_root_09_12_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pXopTable_root_09_12_reg_00_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_12_reg_01_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pXopTable_root_09_12_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_09_12_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_81_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1825])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_80_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1826])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_83_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1827])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_82_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1828])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_c2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2252])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_c3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2253])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_c1_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2254])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_cb_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2256])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_d2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2258])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_d3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2259])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_d1_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2260])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_db_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2261])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_d6_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2262])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_d7_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2263])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_c6_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2265])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_c7_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2266])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_e1_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2268])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_e3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2270])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_e2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2273])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_90_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2437])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_90_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2438])
		};

		static const RD_TABLE_VEX_W g_pXopTable_root_09_90_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pXopTable_root_09_90_00_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_90_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_92_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2440])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_92_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2441])
		};

		static const RD_TABLE_VEX_W g_pXopTable_root_09_92_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pXopTable_root_09_92_00_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_92_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_93_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2443])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_93_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2444])
		};

		static const RD_TABLE_VEX_W g_pXopTable_root_09_93_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pXopTable_root_09_93_00_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_93_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_91_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2446])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_91_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2447])
		};

		static const RD_TABLE_VEX_W g_pXopTable_root_09_91_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pXopTable_root_09_91_00_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_91_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_98_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2454])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_98_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2455])
		};

		static const RD_TABLE_VEX_W g_pXopTable_root_09_98_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pXopTable_root_09_98_00_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_98_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_9a_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2456])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_9a_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2457])
		};

		static const RD_TABLE_VEX_W g_pXopTable_root_09_9a_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pXopTable_root_09_9a_00_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_9a_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_9b_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2458])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_9b_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2459])
		};

		static const RD_TABLE_VEX_W g_pXopTable_root_09_9b_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pXopTable_root_09_9b_00_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_9b_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_99_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2460])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_99_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2461])
		};

		static const RD_TABLE_VEX_W g_pXopTable_root_09_99_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pXopTable_root_09_99_00_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_99_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_94_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2462])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_94_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2463])
		};

		static const RD_TABLE_VEX_W g_pXopTable_root_09_94_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pXopTable_root_09_94_00_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_94_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_95_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2464])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_95_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2475])
		};

		static const RD_TABLE_VEX_W g_pXopTable_root_09_95_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pXopTable_root_09_95_00_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_95_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_96_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2465])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_96_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2466])
		};

		static const RD_TABLE_VEX_W g_pXopTable_root_09_96_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pXopTable_root_09_96_00_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_96_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_97_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2473])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_09_97_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2474])
		};

		static const RD_TABLE_VEX_W g_pXopTable_root_09_97_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pXopTable_root_09_97_00_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_97_01_leaf)
			}
		};

		static const RD_TABLE_OPCODE g_pXopTable_root_09_opcode = {
			RD_ILUT_OPCODE, {
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_09_01_modrmreg),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_02_modrmreg),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_09_12_modrmmod),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_09_80_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_81_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_82_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_83_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_09_90_w),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_91_w),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_92_w),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_93_w),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_94_w),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_95_w),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_96_w),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_97_w),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_98_w),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_99_w),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_9a_w),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_9b_w),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_09_c1_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_c2_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_c3_leaf),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_09_c6_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_c7_leaf),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_09_cb_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_09_d1_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_d2_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_d3_leaf),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_09_d6_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_d7_leaf),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_09_db_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_09_e1_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_e2_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_e3_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_a2_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2118])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_a2_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2119])
		};

		static const RD_TABLE_VEX_W g_pXopTable_root_08_a2_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pXopTable_root_08_a2_00_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_08_a2_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_cc_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2148])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_ce_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2149])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_cf_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2154])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_ec_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2155])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_ee_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2156])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_ef_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2157])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_ed_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2158])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_cd_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2159])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_9e_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2288])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_9f_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2289])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_97_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2290])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_8e_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2291])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_8f_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2292])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_87_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2293])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_86_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2294])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_85_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2295])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_96_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2296])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_95_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2297])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_a6_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2298])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_b6_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2299])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_a3_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2426])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_a3_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2427])
		};

		static const RD_TABLE_VEX_W g_pXopTable_root_08_a3_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pXopTable_root_08_a3_00_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_08_a3_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_c0_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2436])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_c2_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2439])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_c3_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2442])
		};

		static const RD_TABLE_INSTRUCTION g_pXopTable_root_08_c1_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2445])
		};

		static const RD_TABLE_OPCODE g_pXopTable_root_08_opcode = {
			RD_ILUT_OPCODE, {
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_08_85_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_08_86_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_08_87_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_08_8e_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_08_8f_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_08_95_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_08_96_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_08_97_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_08_9e_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_08_9f_leaf),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_08_a2_w),
				reinterpret_cast<const void*>(&g_pXopTable_root_08_a3_w),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_08_a6_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_08_b6_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_08_c0_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_08_c1_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_08_c2_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_08_c3_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_08_cc_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_08_cd_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_08_ce_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_08_cf_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_08_ec_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_08_ed_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_08_ee_leaf),
				reinterpret_cast<const void*>(&g_pXopTable_root_08_ef_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_MMMMM g_pXopTable_root_mmmmm = {
			RD_ILUT_VEX_MMMMM, {
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pXopTable_root_08_opcode),
				reinterpret_cast<const void*>(&g_pXopTable_root_09_opcode),
				reinterpret_cast<const void*>(&g_pXopTable_root_0a_opcode),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		RD_TABLE const* g_pXopTable = reinterpret_cast<RD_TABLE const*>(&g_pXopTable_root_mmmmm);

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_f2_00_00_leaf = {
	RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[59])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_f2_00_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f2_00_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_f2_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f2_00_l),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_f7_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[67])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_f7_00_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f7_00_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_f7_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1236])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_f7_02_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f7_02_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_f7_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1295])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_f7_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f7_01_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_f7_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1304])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_f7_03_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f7_03_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_f7_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f7_00_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f7_01_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f7_02_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f7_03_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_f3_00_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[79])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_f3_00_03_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f3_00_03_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_f3_00_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[81])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_f3_00_02_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f3_00_02_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_f3_00_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[82])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_f3_00_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f3_00_01_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_REG g_pVexTable_root_02_f3_00_modrmreg = {
			RD_ILUT_MODRM_REG, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f3_00_01_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f3_00_02_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f3_00_03_l),
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_f3_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f3_00_modrmreg),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_f5_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[110])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_f5_00_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f5_00_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_f5_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[910])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_f5_03_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f5_03_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_f5_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[911])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_f5_02_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f5_02_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_f5_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f5_00_l),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f5_02_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f5_03_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_e6_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[160])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_e6_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e6_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_e6_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e6_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_e6_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e6_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_e2_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[161])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_e2_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e2_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_e2_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e2_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_e2_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e2_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_ee_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[162])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_ee_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ee_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_ee_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ee_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_ee_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ee_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_ec_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[163])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_ec_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ec_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_ec_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ec_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_ec_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ec_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_e7_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[164])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_e7_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e7_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_e7_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e7_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_e7_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e7_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_e3_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[165])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_e3_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e3_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_e3_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e3_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_e3_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e3_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_ef_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[166])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_ef_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ef_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_ef_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ef_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_ef_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ef_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_ed_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[167])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_ed_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ed_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_ed_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ed_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_ed_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ed_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_e1_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[168])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_e1_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e1_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_e1_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e1_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_e1_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e1_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_eb_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[169])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_eb_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_eb_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_eb_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_eb_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_eb_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_eb_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_e9_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[170])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_e9_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e9_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_e9_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e9_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_e9_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e9_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_e5_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[171])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_e5_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e5_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_e5_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e5_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_e5_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e5_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_e0_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[172])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_e0_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e0_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_e0_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e0_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_e0_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e0_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_ea_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[175])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_ea_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ea_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_ea_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ea_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_ea_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ea_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_e8_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[186])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_e8_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e8_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_e8_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e8_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_e8_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e8_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_e4_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[191])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_e4_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e4_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_e4_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e4_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_e4_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e4_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_49_00_mem_00_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[590])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_49_00_mem_00_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_49_00_mem_00_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_49_00_mem_00_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_49_00_mem_00_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_REG g_pVexTable_root_02_49_00_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_49_00_mem_00_l),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_49_00_reg_00_00_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1381])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_49_00_reg_00_00_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_49_00_reg_00_00_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_49_00_reg_00_00_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_49_00_reg_00_00_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_RM g_pVexTable_root_02_49_00_reg_00_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_49_00_reg_00_00_l),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_REG g_pVexTable_root_02_49_00_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_49_00_reg_00_modrmrm),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_49_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_49_00_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_49_00_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_49_01_mem_00_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1336])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_49_01_mem_00_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_49_01_mem_00_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_49_01_mem_00_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_49_01_mem_00_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_REG g_pVexTable_root_02_49_01_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_49_01_mem_00_l),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_49_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_49_01_mem_modrmreg),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_49_03_reg_00_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1383])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_49_03_reg_00_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_49_03_reg_00_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_49_03_reg_00_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_49_03_reg_00_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_RM g_pVexTable_root_02_49_03_reg_modrmrm = {
			RD_ILUT_MODRM_RM, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_49_03_reg_00_l),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_49_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_49_03_reg_modrmrm)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_49_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_49_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_49_01_modrmmod),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_49_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_f6_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[752])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_f6_03_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f6_03_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_f6_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f6_03_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_6c_01_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1361])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_6c_01_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_6c_01_reg_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_6c_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_6c_01_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_6c_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_6c_01_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_6c_00_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1362])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_6c_00_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_6c_00_reg_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_6c_00_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_6c_00_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_6c_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_6c_00_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_6c_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_6c_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_6c_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_5c_02_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1364])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_5c_02_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5c_02_reg_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_5c_02_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5c_02_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_5c_02_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5c_02_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_5c_03_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1369])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_5c_03_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5c_03_reg_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_5c_03_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5c_03_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_5c_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5c_03_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_5c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5c_02_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5c_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_5e_03_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1365])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_5e_03_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5e_03_reg_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_5e_03_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5e_03_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_5e_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5e_03_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_5e_02_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1366])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_5e_02_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5e_02_reg_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_5e_02_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5e_02_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_5e_02_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5e_02_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_5e_01_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1367])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_5e_01_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5e_01_reg_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_5e_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5e_01_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_5e_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5e_01_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_5e_00_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1368])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_5e_00_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5e_00_reg_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_5e_00_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5e_00_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_5e_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5e_00_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_5e_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5e_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5e_01_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5e_02_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5e_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_4b_03_mem_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1379])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_4b_03_mem_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_4b_03_mem_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_4b_03_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_4b_03_mem_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_4b_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_4b_03_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_4b_01_mem_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1380])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_4b_01_mem_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_4b_01_mem_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_4b_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_4b_01_mem_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_4b_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_4b_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_4b_02_mem_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1382])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_4b_02_mem_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_4b_02_mem_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_4b_02_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_4b_02_mem_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_4b_02_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_4b_02_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_4b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_4b_01_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_4b_02_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_4b_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_de_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1417])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_de_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_de_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_df_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1419])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_df_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_df_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_dc_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1421])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_dc_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_dc_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_dd_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1423])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_dd_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_dd_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_db_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1424])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_db_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_db_01_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_db_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_db_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_b1_02_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1436])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_b1_02_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b1_02_mem_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_b1_02_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b1_02_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_b1_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1437])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_b1_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b1_01_mem_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_b1_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b1_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_b1_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b1_01_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b1_02_modrmmod),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_1a_01_mem_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1444])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_1a_01_mem_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_1a_01_mem_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_1a_01_mem_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_1a_01_mem_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_1a_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_1a_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_1a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_1a_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_5a_01_mem_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1450])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_5a_01_mem_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5a_01_mem_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_5a_01_mem_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5a_01_mem_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_5a_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5a_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_5a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5a_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_19_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1457])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_19_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_19_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_19_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_19_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_18_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1459])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_18_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_18_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_18_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_18_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_b0_02_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1484])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_b0_02_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b0_02_mem_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_b0_02_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b0_02_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_b0_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1485])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_b0_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b0_01_mem_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_b0_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b0_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_b0_03_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1486])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_b0_03_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b0_03_mem_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_b0_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b0_03_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_b0_00_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1487])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_b0_00_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b0_00_mem_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_b0_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b0_00_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_b0_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b0_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b0_01_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b0_02_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b0_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_72_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1489])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_72_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_72_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_72_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_72_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_13_01_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1502])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_13_01_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_13_01_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_13_01_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1503])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_13_01_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_13_01_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_13_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_13_01_00_w),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_13_01_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_13_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_13_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_98_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1626])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_98_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1629])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_98_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_98_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_98_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_98_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_98_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_99_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1631])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_99_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1634])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_99_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_99_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_99_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_99_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_99_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_a8_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1636])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_a8_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1639])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_a8_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_a8_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_a8_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_a8_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_a8_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_a9_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1641])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_a9_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1644])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_a9_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_a9_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_a9_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_a9_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_a9_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_b8_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1646])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_b8_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1649])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_b8_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b8_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b8_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_b8_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b8_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_b9_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1651])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_b9_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1654])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_b9_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b9_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b9_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_b9_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b9_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_96_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1666])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_96_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1669])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_96_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_96_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_96_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_96_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_96_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_a6_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1671])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_a6_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1674])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_a6_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_a6_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_a6_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_a6_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_a6_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_b6_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1676])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_b6_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1679])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_b6_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b6_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b6_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_b6_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b6_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_9a_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1685])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_9a_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1688])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_9a_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9a_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9a_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_9a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9a_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_9b_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1690])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_9b_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1693])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_9b_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9b_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9b_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_9b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9b_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_aa_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1695])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_aa_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1698])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_aa_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_aa_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_aa_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_aa_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_aa_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_ab_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1700])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_ab_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1703])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_ab_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ab_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ab_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_ab_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ab_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_ba_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1705])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_ba_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1708])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_ba_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ba_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ba_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_ba_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ba_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_bb_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1710])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_bb_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1713])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_bb_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_bb_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_bb_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_bb_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_bb_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_97_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1715])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_97_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1718])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_97_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_97_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_97_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_97_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_97_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_a7_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1720])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_a7_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1723])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_a7_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_a7_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_a7_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_a7_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_a7_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_b7_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1725])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_b7_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1728])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_b7_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b7_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b7_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_b7_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b7_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_9c_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1744])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_9c_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1747])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_9c_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9c_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9c_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_9c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9c_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_9d_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1749])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_9d_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1752])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_9d_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9d_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9d_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_9d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9d_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_ac_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1754])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_ac_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1757])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_ac_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ac_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ac_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_ac_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ac_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_ad_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1759])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_ad_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1762])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_ad_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ad_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ad_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_ad_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ad_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_bc_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1764])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_bc_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1767])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_bc_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_bc_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_bc_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_bc_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_bc_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_bd_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1769])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_bd_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1772])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_bd_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_bd_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_bd_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_bd_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_bd_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_9e_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1782])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_9e_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1785])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_9e_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9e_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9e_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_9e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9e_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_9f_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1787])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_9f_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1790])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_9f_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9f_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9f_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_9f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9f_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_ae_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1792])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_ae_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1795])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_ae_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ae_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ae_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_ae_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ae_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_af_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1797])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_af_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1800])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_af_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_af_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_af_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_af_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_af_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_be_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1802])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_be_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1805])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_be_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_be_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_be_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_be_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_be_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_bf_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1807])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_bf_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1810])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_bf_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_bf_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_bf_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_bf_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_bf_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_92_01_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1830])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_92_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1832])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_92_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_92_01_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_92_01_mem_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_92_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_92_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_92_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_92_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_93_01_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1842])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_93_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1844])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_93_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_93_01_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_93_01_mem_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_93_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_93_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_93_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_93_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_cf_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1862])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_cf_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_cf_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_cf_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_cf_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_2d_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1884])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_2d_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_2d_01_mem_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_2d_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_2d_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_2d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_2d_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_2f_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1885])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_2f_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_2f_01_mem_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_2f_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_2f_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_2f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_2f_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_2c_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1886])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_2c_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_2c_01_mem_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_2c_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_2c_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_2c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_2c_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_2e_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1887])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_2e_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_2e_01_mem_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_2e_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_2e_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_2e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_2e_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_2a_01_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1975])
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_2a_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_2a_01_mem_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_2a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_2a_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_1c_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2053])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_1c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_1c_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_1e_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2055])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_1e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_1e_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_1d_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2058])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_1d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_1d_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_2b_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2064])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_2b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_2b_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_78_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2104])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_78_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_78_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_78_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_78_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_58_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2107])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_58_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_58_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_58_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_58_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_59_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2112])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_59_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_59_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_59_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_59_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_79_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2115])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_79_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_79_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_79_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_79_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_29_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2127])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_29_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_29_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_37_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2137])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_37_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_37_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_50_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2162])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_50_03_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_50_03_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_50_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2164])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_50_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_50_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_50_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2167])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_50_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_50_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_50_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2170])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_50_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_50_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_50_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_50_00_w),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_50_01_w),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_50_02_w),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_50_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_51_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2163])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_51_03_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_51_03_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_51_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2165])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_51_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_51_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_51_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2169])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_51_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_51_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_51_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2171])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_51_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_51_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_51_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_51_00_w),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_51_01_w),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_51_02_w),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_51_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_52_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2173])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_52_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_52_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_52_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_52_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_53_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2175])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_53_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_53_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_53_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_53_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_d2_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2176])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_d2_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_d2_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_d2_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2178])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_d2_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_d2_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_d2_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2180])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_d2_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_d2_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_d2_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_d2_00_w),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_d2_01_w),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_d2_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_d3_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2177])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_d3_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_d3_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_d3_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2179])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_d3_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_d3_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_d3_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2181])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_d3_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_d3_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_d3_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_d3_00_w),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_d3_01_w),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_d3_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_36_01_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2186])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_36_01_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_36_01_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_36_01_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_36_01_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_36_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_36_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_0d_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2199])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_0d_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_0d_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_0d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_0d_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_0c_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2203])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_0c_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_0c_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_0c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_0c_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_16_01_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2211])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_16_01_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_16_01_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_16_01_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_16_01_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_16_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_16_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_90_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2245])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_90_01_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2247])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_90_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_90_01_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_90_01_mem_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_90_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_90_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_90_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_90_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_91_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2249])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_91_01_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2251])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_91_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_91_01_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_91_01_mem_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_91_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_91_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_91_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_91_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2255])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_02_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_02_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_03_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2257])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_03_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_03_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2264])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_01_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_01_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_41_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2267])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_41_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_41_01_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_41_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_41_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_06_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2269])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_06_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_06_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_07_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2271])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_07_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_07_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_05_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2272])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_05_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_05_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_b5_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2301])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_b5_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b5_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_b5_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b5_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_b4_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2303])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_b4_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b4_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_b4_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b4_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_04_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2305])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_04_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_04_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_8c_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2308])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_8c_01_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2310])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_8c_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_8c_01_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_8c_01_mem_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_8c_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_8c_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_8c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_8c_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_8e_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2309])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_8e_01_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2311])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_8e_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_8e_01_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_8e_01_mem_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_8e_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_8e_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_8e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_8e_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_3c_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2313])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_3c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_3c_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_3d_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2315])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_3d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_3d_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_3f_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2322])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_3f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_3f_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_3e_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2325])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_3e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_3e_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_38_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2327])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_38_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_38_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_39_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2329])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_39_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_39_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_3b_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2336])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_3b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_3b_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_3a_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2339])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_3a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_3a_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_21_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2360])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_21_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2361])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_21_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_21_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_21_01_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_21_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_21_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_22_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2363])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_22_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2364])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_22_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_22_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_22_01_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_22_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_22_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_20_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2366])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_20_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2367])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_20_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_20_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_20_01_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_20_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_20_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_25_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2369])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_25_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2370])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_25_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_25_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_25_01_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_25_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_25_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_23_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2372])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_23_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2373])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_23_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_23_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_23_01_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_23_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_23_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_24_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2375])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_24_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2376])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_24_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_24_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_24_01_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_24_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_24_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_31_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2386])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_31_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2387])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_31_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_31_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_31_01_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_31_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_31_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_32_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2389])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_32_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2390])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_32_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_32_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_32_01_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_32_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_32_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_30_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2392])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_30_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2393])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_30_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_30_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_30_01_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_30_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_30_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_35_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2395])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_35_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2396])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_35_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_35_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_35_01_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_35_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_35_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_33_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2398])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_33_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2399])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_33_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_33_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_33_01_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_33_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_33_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_34_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2401])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_34_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2402])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_34_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_34_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_34_01_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_34_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_34_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_28_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2404])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_28_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_28_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_0b_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2406])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_0b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_0b_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_40_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2412])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_40_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_40_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2483])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_00_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_00_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_08_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2491])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_08_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_08_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_0a_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2492])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_0a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_0a_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_09_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2493])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_09_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_09_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_47_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2505])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_47_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2507])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_47_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_47_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_47_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_47_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_47_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_46_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2520])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_46_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_46_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_46_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_46_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_45_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2538])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_45_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2540])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_45_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_45_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_45_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_45_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_45_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_17_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2564])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_17_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_17_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_cc_03_reg_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2654])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_cc_03_reg_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_cc_03_reg_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_cc_03_reg_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_cc_03_reg_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_cc_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_cc_03_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_cc_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_cc_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_cd_03_reg_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2655])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_cd_03_reg_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_cd_03_reg_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_cd_03_reg_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_cd_03_reg_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_cd_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_cd_03_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_cd_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_cd_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_cb_03_reg_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2656])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_cb_03_reg_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_cb_03_reg_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_cb_03_reg_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_cb_03_reg_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_02_cb_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_cb_03_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_cb_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_cb_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_da_00_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2665])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_da_00_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_da_00_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_da_00_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_da_00_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_da_01_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2666])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_da_01_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_da_01_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_02_da_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_da_01_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_da_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2668])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_da_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_da_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_da_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2669])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_da_03_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_da_03_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_da_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_da_00_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_da_01_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_da_02_w),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_da_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_0f_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2691])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_0f_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_0f_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_0f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_0f_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_02_0e_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2692])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_02_0e_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_0e_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_02_0e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_0e_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_OPCODE g_pVexTable_root_02_opcode = {
			RD_ILUT_OPCODE, {
				reinterpret_cast<const void*>(&g_pVexTable_root_02_00_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_01_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_02_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_03_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_04_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_05_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_06_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_07_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_08_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_09_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_0a_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_0b_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_0c_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_0d_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_0e_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_0f_pp),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_13_pp),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_16_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_17_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_18_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_19_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_1a_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_1c_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_1d_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_1e_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_20_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_21_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_22_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_23_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_24_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_25_pp),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_28_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_29_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_2a_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_2b_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_2c_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_2d_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_2e_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_2f_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_30_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_31_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_32_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_33_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_34_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_35_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_36_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_37_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_38_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_39_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_3a_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_3b_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_3c_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_3d_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_3e_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_3f_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_40_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_41_pp),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_45_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_46_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_47_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_49_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_4b_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_50_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_51_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_52_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_53_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_58_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_59_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5a_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5c_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_5e_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_6c_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_72_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_78_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_79_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_8c_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_8e_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_90_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_91_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_92_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_93_pp),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_96_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_97_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_98_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_99_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9a_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9b_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9c_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9d_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9e_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_9f_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_a6_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_a7_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_a8_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_a9_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_aa_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ab_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ac_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ad_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ae_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_af_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b0_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b1_pp),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b4_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b5_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b6_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b7_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b8_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_b9_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ba_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_bb_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_bc_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_bd_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_be_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_bf_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_cb_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_cc_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_cd_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_cf_pp),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_d2_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_d3_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_da_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_db_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_dc_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_dd_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_de_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_df_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e0_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e1_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e2_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e3_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e4_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e5_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e6_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e7_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e8_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_e9_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ea_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_eb_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ec_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ed_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ee_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_ef_pp),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f2_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f3_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f5_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f6_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_f7_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_ae_03_mem_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[122])
		};

		static const RD_TABLE_MODRM_REG g_pVexTable_root_01_ae_03_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ae_03_mem_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_ae_03_reg_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1315])
		};

		static const RD_TABLE_MODRM_REG g_pVexTable_root_01_ae_03_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ae_03_reg_06_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_ae_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ae_03_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ae_03_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_ae_02_mem_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[123])
		};

		static const RD_TABLE_MODRM_REG g_pVexTable_root_01_ae_02_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ae_02_mem_07_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_ae_02_reg_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[238])
		};

		static const RD_TABLE_MODRM_REG g_pVexTable_root_01_ae_02_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ae_02_reg_06_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_ae_02_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ae_02_mem_modrmreg),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ae_02_reg_modrmreg)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_ae_00_mem_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1882])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_ae_00_mem_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2680])
		};

		static const RD_TABLE_MODRM_REG g_pVexTable_root_01_ae_00_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ae_00_mem_02_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ae_00_mem_03_leaf),
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_ae_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ae_00_mem_modrmreg),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_ae_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ae_00_modrmmod),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ae_02_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ae_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_4a_01_reg_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[515])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_4a_01_reg_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[516])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_4a_01_reg_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_4a_01_reg_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_4a_01_reg_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_4a_01_reg_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_4a_01_reg_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_4a_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_4a_01_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_4a_00_reg_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[517])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_4a_00_reg_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[518])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_4a_00_reg_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_4a_00_reg_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_4a_00_reg_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_4a_00_reg_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_4a_00_reg_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_4a_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_4a_00_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_4a_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_4a_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_4a_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_41_01_reg_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[519])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_41_01_reg_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[520])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_41_01_reg_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_41_01_reg_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_41_01_reg_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_41_01_reg_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_41_01_reg_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_41_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_41_01_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_41_00_reg_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[525])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_41_00_reg_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[526])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_41_00_reg_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_41_00_reg_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_41_00_reg_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_41_00_reg_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_41_00_reg_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_41_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_41_00_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_41_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_41_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_41_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_42_01_reg_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[521])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_42_01_reg_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[522])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_42_01_reg_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_42_01_reg_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_42_01_reg_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_42_01_reg_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_42_01_reg_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_42_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_42_01_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_42_00_reg_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[523])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_42_00_reg_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[524])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_42_00_reg_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_42_00_reg_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_42_00_reg_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_42_00_reg_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_42_00_reg_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_42_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_42_00_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_42_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_42_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_42_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_48_00_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[527])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_48_00_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_48_00_reg_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_48_00_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_48_00_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_48_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_48_00_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_48_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_48_00_modrmmod),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_49_00_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[528])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_49_00_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_49_00_reg_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_49_00_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_49_00_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_49_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_49_00_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_49_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_49_00_modrmmod),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_90_01_mem_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[529])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_90_01_mem_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[534])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_90_01_mem_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_90_01_mem_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_90_01_mem_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_90_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_90_01_mem_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_90_01_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[530])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_90_01_reg_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[535])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_90_01_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_90_01_reg_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_90_01_reg_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_90_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_90_01_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_90_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_90_01_mem_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_90_01_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_90_00_mem_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[539])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_90_00_mem_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[544])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_90_00_mem_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_90_00_mem_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_90_00_mem_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_90_00_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_90_00_mem_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_90_00_reg_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[540])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_90_00_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[545])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_90_00_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_90_00_reg_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_90_00_reg_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_90_00_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_90_00_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_90_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_90_00_mem_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_90_00_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_90_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_90_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_90_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_91_01_mem_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[531])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_91_01_mem_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[536])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_91_01_mem_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_91_01_mem_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_91_01_mem_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_91_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_91_01_mem_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_91_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_91_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_91_00_mem_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[541])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_91_00_mem_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[546])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_91_00_mem_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_91_00_mem_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_91_00_mem_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_91_00_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_91_00_mem_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_91_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_91_00_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_91_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_91_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_91_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_92_01_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[532])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_92_01_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_92_01_reg_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_92_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_92_01_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_92_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_92_01_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_92_03_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[537])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_92_03_reg_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[542])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_92_03_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_92_03_reg_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_92_03_reg_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_92_03_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_92_03_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_92_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_92_03_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_92_00_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[547])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_92_00_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_92_00_reg_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_92_00_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_92_00_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_92_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_92_00_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_92_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_92_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_92_01_modrmmod),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_92_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_93_01_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[533])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_93_01_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_93_01_reg_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_93_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_93_01_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_93_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_93_01_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_93_03_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[538])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_93_03_reg_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[543])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_93_03_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_93_03_reg_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_93_03_reg_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_93_03_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_93_03_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_93_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_93_03_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_93_00_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[548])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_93_00_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_93_00_reg_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_93_00_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_93_00_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_93_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_93_00_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_93_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_93_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_93_01_modrmmod),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_93_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_44_01_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[549])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_44_01_reg_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[550])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_44_01_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_44_01_reg_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_44_01_reg_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_44_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_44_01_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_44_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_44_01_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_44_00_reg_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[551])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_44_00_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[552])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_44_00_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_44_00_reg_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_44_00_reg_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_44_00_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_44_00_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_44_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_44_00_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_44_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_44_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_44_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_45_01_reg_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[553])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_45_01_reg_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[554])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_45_01_reg_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_45_01_reg_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_45_01_reg_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_45_01_reg_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_45_01_reg_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_45_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_45_01_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_45_00_reg_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[555])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_45_00_reg_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[560])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_45_00_reg_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_45_00_reg_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_45_00_reg_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_45_00_reg_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_45_00_reg_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_45_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_45_00_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_45_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_45_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_45_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_98_01_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[556])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_98_01_reg_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[557])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_98_01_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_98_01_reg_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_98_01_reg_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_98_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_98_01_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_98_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_98_01_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_98_00_reg_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[558])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_98_00_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[559])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_98_00_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_98_00_reg_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_98_00_reg_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_98_00_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_98_00_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_98_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_98_00_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_98_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_98_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_98_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_99_01_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[569])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_99_01_reg_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[570])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_99_01_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_99_01_reg_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_99_01_reg_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_99_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_99_01_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_99_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_99_01_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_99_00_reg_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[571])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_99_00_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[572])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_99_00_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_99_00_reg_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_99_00_reg_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_99_00_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_99_00_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_99_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_99_00_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_99_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_99_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_99_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_4b_01_reg_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[573])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_4b_01_reg_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_4b_01_reg_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_4b_01_reg_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_4b_01_reg_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_4b_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_4b_01_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_4b_00_reg_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[574])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_4b_00_reg_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[575])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_4b_00_reg_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_4b_00_reg_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_4b_00_reg_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_4b_00_reg_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_4b_00_reg_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_4b_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_4b_00_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_4b_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_4b_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_4b_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_46_01_reg_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[576])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_46_01_reg_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[577])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_46_01_reg_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_46_01_reg_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_46_01_reg_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_46_01_reg_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_46_01_reg_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_46_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_46_01_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_46_00_reg_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[578])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_46_00_reg_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[579])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_46_00_reg_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_46_00_reg_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_46_00_reg_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_46_00_reg_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_46_00_reg_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_46_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_46_00_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_46_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_46_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_46_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_47_01_reg_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[580])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_47_01_reg_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[581])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_47_01_reg_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_47_01_reg_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_47_01_reg_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_47_01_reg_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_47_01_reg_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_47_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_47_01_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_47_00_reg_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[582])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_47_00_reg_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[583])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_47_00_reg_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_47_00_reg_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_47_00_reg_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_47_00_reg_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_47_00_reg_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_47_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_47_00_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_47_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_47_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_47_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_58_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1405])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_58_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1408])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_58_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1410])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_58_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1413])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_58_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_58_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_58_01_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_58_02_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_58_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_d0_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1414])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_d0_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1415])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_d0_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d0_01_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d0_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_55_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1429])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_55_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1431])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_55_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_55_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_55_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_54_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1433])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_54_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1435])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_54_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_54_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_54_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_c2_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1461])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_c2_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1464])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_c2_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1466])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_c2_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1469])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_c2_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_c2_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_c2_01_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_c2_02_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_c2_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_2f_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1471])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_2f_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1474])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_2f_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_2f_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_2f_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_e6_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1478])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_e6_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1479])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_e6_02_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e6_02_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e6_02_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_e6_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1491])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_e6_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1548])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_e6_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e6_01_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e6_02_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e6_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5b_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1482])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5b_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1511])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5b_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1559])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_5b_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5b_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5b_01_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5b_02_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5a_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1494])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5a_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1495])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_5a_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5a_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5a_01_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5a_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1513])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5a_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1514])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_5a_00_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5a_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5a_00_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5a_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1529])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5a_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1542])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_5a_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5a_00_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5a_01_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5a_02_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5a_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_2d_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1527])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_2d_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1545])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_2d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_2d_02_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_2d_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_2a_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1537])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_2a_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1540])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_2a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_2a_02_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_2a_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_2c_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1564])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_2c_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1569])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_2c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_2c_02_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_2c_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5e_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1585])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5e_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1588])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5e_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1590])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5e_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1593])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_5e_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5e_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5e_01_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5e_02_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5e_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_7c_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1863])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_7c_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1864])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_7c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_7c_01_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_7c_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_7d_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1865])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_7d_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1866])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_7d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_7d_01_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_7d_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_f0_03_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1881])
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_f0_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f0_03_mem_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_f0_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f0_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_f7_01_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1883])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_f7_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f7_01_reg_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_f7_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f7_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_f7_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f7_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5f_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1889])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5f_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1892])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5f_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1894])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5f_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1897])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_5f_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5f_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5f_01_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5f_02_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5f_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5d_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1904])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5d_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1907])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5d_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1909])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5d_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1912])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_5d_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5d_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5d_01_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5d_02_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5d_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_28_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1919])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_28_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1923])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_28_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_28_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_28_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_29_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1920])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_29_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1924])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_29_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_29_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_29_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_6e_01_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1927])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_6e_01_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1984])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_6e_01_00_wi = {
			RD_ILUT_VEX_WI, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_6e_01_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_6e_01_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_6e_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_6e_01_00_wi),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_6e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_6e_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_7e_01_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1928])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_7e_01_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1985])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_01_7e_01_00_wi = {
			RD_ILUT_VEX_WI, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_7e_01_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_7e_01_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_7e_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_7e_01_00_wi),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_7e_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1986])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_7e_02_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_7e_02_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_7e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_7e_01_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_7e_02_l),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_12_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1932])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_12_03_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1933])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_12_03_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_12_03_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_12_03_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_12_00_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1951])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_12_00_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_12_00_reg_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_12_00_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1968])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_12_00_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_12_00_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_12_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_12_00_mem_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_12_00_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_12_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1964])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_12_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_12_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_12_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_12_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_12_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2003])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_12_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_12_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_12_01_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_12_02_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_12_03_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_6f_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1934])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_6f_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1940])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_6f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_6f_01_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_6f_02_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_7f_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1935])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_7f_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1941])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_7f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_7f_01_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_7f_02_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_16_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1954])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_16_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_16_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_16_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_16_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_16_00_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1958])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_16_00_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_16_00_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_16_00_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1961])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_16_00_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_16_00_reg_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_16_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_16_00_mem_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_16_00_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_16_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2001])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_16_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_16_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_16_01_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_16_02_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_17_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1955])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_17_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_17_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_17_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_17_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_17_00_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1959])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_17_00_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_17_00_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_17_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_17_00_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_17_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_17_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_17_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_13_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1965])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_13_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_13_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_13_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_13_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_13_00_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1969])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_13_00_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_13_00_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_13_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_13_00_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_13_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_13_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_13_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_50_01_reg_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1970])
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_50_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_50_01_reg_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_50_00_reg_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1971])
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_50_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_50_00_reg_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_50_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_50_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_50_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_e7_01_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1973])
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_e7_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e7_01_mem_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_e7_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e7_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_2b_01_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1977])
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_2b_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_2b_01_mem_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_2b_00_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1979])
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_2b_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_2b_00_mem_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_2b_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_2b_00_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_2b_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_d6_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1987])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_d6_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d6_01_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_d6_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d6_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_10_03_reg_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1992])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_10_03_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1993])
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_10_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_10_03_mem_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_10_03_reg_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_10_02_reg_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2008])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_10_02_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2009])
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_10_02_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_10_02_mem_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_10_02_reg_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_10_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2014])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_10_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2018])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_10_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_10_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_10_01_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_10_02_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_10_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_11_03_reg_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1994])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_11_03_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1995])
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_11_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_11_03_mem_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_11_03_reg_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_11_02_reg_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2010])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_11_02_mem_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2011])
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_11_02_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_11_02_mem_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_11_02_reg_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_11_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2015])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_11_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2019])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_11_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_11_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_11_01_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_11_02_modrmmod),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_11_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_59_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2032])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_59_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2035])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_59_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2037])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_59_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2040])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_59_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_59_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_59_01_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_59_02_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_59_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_56_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2045])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_56_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2047])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_56_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_56_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_56_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_6b_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2060])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_6b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_6b_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_63_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2062])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_63_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_63_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_67_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2066])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_67_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_67_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_fc_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2068])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_fc_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_fc_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_fe_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2070])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_fe_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_fe_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_d4_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2072])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_d4_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d4_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_ec_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2074])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_ec_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ec_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_ed_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2076])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_ed_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ed_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_dc_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2078])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_dc_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_dc_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_dd_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2080])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_dd_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_dd_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_fd_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2082])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_fd_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_fd_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_db_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2085])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_db_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_db_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_df_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2087])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_df_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_df_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_e0_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2092])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_e0_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e0_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_e3_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2094])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_e3_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e3_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_74_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2123])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_74_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_74_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_76_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2125])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_76_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_76_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_75_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2129])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_75_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_75_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_64_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2133])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_64_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_64_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_66_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2135])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_66_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_66_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_65_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2139])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_65_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_65_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_c5_01_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2241])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_c5_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_c5_01_reg_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_c5_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_c5_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_c5_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_c5_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_c4_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2284])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_c4_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_c4_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_c4_01_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2285])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_c4_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_c4_01_reg_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_c4_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_c4_01_mem_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_c4_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_c4_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_c4_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_f5_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2307])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_f5_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f5_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_ee_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2318])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_ee_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ee_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_de_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2320])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_de_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_de_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_ea_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2332])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_ea_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ea_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_da_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2334])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_da_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_da_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_d7_01_reg_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2348])
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_d7_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d7_01_reg_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_d7_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d7_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_e4_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2408])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_e4_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e4_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_e5_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2410])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_e5_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e5_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_d5_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2415])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_d5_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d5_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_f4_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2418])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_f4_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f4_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_eb_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2423])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_eb_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_eb_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_f6_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2449])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_f6_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f6_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_70_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2486])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_70_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2488])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_70_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2490])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_70_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_70_01_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_70_02_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_70_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_72_01_reg_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2496])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_72_01_reg_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2515])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_72_01_reg_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2529])
		};

		static const RD_TABLE_MODRM_REG g_pVexTable_root_01_72_01_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_72_01_reg_02_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_72_01_reg_04_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_72_01_reg_06_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_72_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_72_01_reg_modrmreg)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_72_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_72_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_f2_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2497])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_f2_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f2_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_73_01_reg_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2499])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_73_01_reg_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2502])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_73_01_reg_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2532])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_73_01_reg_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2535])
		};

		static const RD_TABLE_MODRM_REG g_pVexTable_root_01_73_01_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_73_01_reg_02_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_73_01_reg_03_leaf),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_73_01_reg_06_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_73_01_reg_07_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_73_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_73_01_reg_modrmreg)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_73_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_73_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_f3_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2503])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_f3_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f3_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_71_01_reg_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2511])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_71_01_reg_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2525])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_71_01_reg_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2544])
		};

		static const RD_TABLE_MODRM_REG g_pVexTable_root_01_71_01_reg_modrmreg = {
			RD_ILUT_MODRM_REG, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_71_01_reg_02_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_71_01_reg_04_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_71_01_reg_06_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_01_71_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_71_01_reg_modrmreg)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_71_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_71_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_f1_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2512])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_f1_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f1_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_e2_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2516])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_e2_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e2_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_e1_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2526])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_e1_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e1_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_d2_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2530])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_d2_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d2_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_d3_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2536])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_d3_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d3_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_d1_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2545])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_d1_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d1_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_f8_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2547])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_f8_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f8_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_fa_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2549])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_fa_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_fa_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_fb_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2551])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_fb_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_fb_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_e8_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2553])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_e8_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e8_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_e9_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2555])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_e9_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e9_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_d8_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2557])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_d8_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d8_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_d9_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2559])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_d9_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d9_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_f9_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2561])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_f9_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f9_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_68_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2574])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_68_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_68_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_6a_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2576])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_6a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_6a_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_6d_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2578])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_6d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_6d_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_69_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2580])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_69_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_69_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_60_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2582])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_60_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_60_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_62_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2584])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_62_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_62_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_6c_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2586])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_6c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_6c_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_61_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2588])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_61_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_61_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_ef_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2589])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_ef_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ef_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_53_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2605])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_53_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2607])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_53_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_53_00_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_53_02_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_52_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2633])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_52_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2635])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_52_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_52_00_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_52_02_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_c6_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2662])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_c6_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2664])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_c6_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_c6_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_c6_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_51_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2671])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_51_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2674])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_51_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2676])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_51_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2679])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_51_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_51_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_51_01_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_51_02_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_51_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5c_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2682])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5c_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2685])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5c_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2687])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_5c_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2690])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_5c_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5c_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5c_01_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5c_02_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5c_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_2e_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2694])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_2e_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2697])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_2e_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_2e_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_2e_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_15_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2699])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_15_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2701])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_15_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_15_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_15_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_14_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2703])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_14_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2705])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_14_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_14_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_14_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_57_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2707])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_57_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2709])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_57_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_57_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_57_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_77_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2710])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_01_77_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2711])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_01_77_00_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_77_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_77_00_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_01_77_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pVexTable_root_01_77_00_l),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_OPCODE g_pVexTable_root_01_opcode = {
			RD_ILUT_OPCODE, {
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_10_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_11_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_12_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_13_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_14_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_15_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_16_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_17_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_28_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_29_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_2a_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_2b_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_2c_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_2d_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_2e_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_2f_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_41_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_42_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_44_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_45_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_46_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_47_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_48_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_49_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_4a_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_4b_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_50_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_51_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_52_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_53_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_54_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_55_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_56_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_57_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_58_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_59_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5a_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5b_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5c_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5d_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5e_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_5f_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_60_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_61_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_62_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_63_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_64_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_65_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_66_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_67_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_68_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_69_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_6a_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_6b_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_6c_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_6d_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_6e_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_6f_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_70_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_71_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_72_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_73_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_74_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_75_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_76_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_77_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_7c_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_7d_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_7e_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_7f_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_90_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_91_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_92_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_93_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_98_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_99_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ae_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_c2_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_c4_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_c5_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_c6_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d0_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d1_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d2_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d3_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d4_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d5_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d6_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d7_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d8_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_d9_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_da_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_db_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_dc_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_dd_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_de_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_df_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e0_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e1_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e2_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e3_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e4_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e5_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e6_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e7_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e8_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_e9_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ea_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_eb_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ec_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ed_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ee_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_ef_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f0_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f1_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f2_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f3_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f4_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f5_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f6_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f7_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f8_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_f9_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_fa_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_fb_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_fc_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_fd_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_01_fe_pp),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_32_01_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[561])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_32_01_reg_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[564])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_32_01_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_32_01_reg_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_32_01_reg_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_32_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_32_01_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_03_32_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_32_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_32_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_32_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_33_01_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[562])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_33_01_reg_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[563])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_33_01_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_33_01_reg_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_33_01_reg_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_33_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_33_01_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_03_33_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_33_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_33_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_33_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_30_01_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[565])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_30_01_reg_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[568])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_30_01_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_30_01_reg_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_30_01_reg_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_30_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_30_01_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_03_30_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_30_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_30_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_30_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_31_01_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[566])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_31_01_reg_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[567])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_31_01_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_31_01_reg_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_31_01_reg_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_31_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_31_01_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_03_31_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_31_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_31_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_31_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_f0_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1210])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_f0_03_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_f0_03_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_f0_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_f0_03_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_df_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1425])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_df_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_df_01_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_df_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_df_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_0d_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1440])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_0d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_0d_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_0c_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1441])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_0c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_0c_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_4b_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1442])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_4b_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_4b_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_4b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_4b_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_4a_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1443])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_4a_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_4a_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_4a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_4a_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_1d_01_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1516])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_1d_01_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_1d_01_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_1d_01_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1517])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_1d_01_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_1d_01_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_1d_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_1d_01_00_w),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_1d_01_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_1d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_1d_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_41_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1595])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_41_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_41_01_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_41_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_41_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_40_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1596])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_40_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_40_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_19_01_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1603])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_19_01_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_19_01_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_19_01_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_19_01_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_19_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_19_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_39_01_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1608])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_39_01_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_39_01_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_39_01_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_39_01_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_39_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_39_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_17_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1615])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_17_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_17_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_17_01_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1616])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_17_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_17_01_reg_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_03_17_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_17_01_mem_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_17_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_17_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_17_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_69_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1657])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_69_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1658])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_69_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_69_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_69_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_69_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_69_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_68_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1659])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_68_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1660])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_68_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_68_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_68_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_68_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_68_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_6b_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1661])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_6b_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1662])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_6b_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6b_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6b_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_6b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6b_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_6a_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1663])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_6a_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1664])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_6a_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6a_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6a_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_6a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6a_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_5d_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1680])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_5d_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1681])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_5d_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_5d_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_5d_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_5d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_5d_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_5c_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1682])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_5c_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1683])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_5c_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_5c_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_5c_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_5c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_5c_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_5f_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1729])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_5f_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1730])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_5f_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_5f_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_5f_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_5f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_5f_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_5e_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1731])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_5e_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1732])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_5e_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_5e_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_5e_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_5e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_5e_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_6d_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1733])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_6d_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1734])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_6d_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6d_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6d_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_6d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6d_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_6c_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1735])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_6c_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1736])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_6c_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6c_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6c_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_6c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6c_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_6f_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1737])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_6f_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1738])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_6f_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6f_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6f_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_6f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6f_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_6e_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1739])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_6e_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1740])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_6e_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6e_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6e_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_6e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6e_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_79_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1773])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_79_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1774])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_79_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_79_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_79_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_79_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_79_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_78_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1775])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_78_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1776])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_78_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_78_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_78_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_78_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_78_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_7b_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1777])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_7b_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1778])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_7b_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7b_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7b_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_7b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7b_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_7a_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1779])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_7a_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1780])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_7a_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7a_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7a_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_7a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7a_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_7d_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1811])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_7d_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1812])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_7d_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7d_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7d_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_7d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7d_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_7c_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1813])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_7c_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1814])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_7c_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7c_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7c_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_7c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7c_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_7f_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1815])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_7f_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1816])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_7f_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7f_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7f_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_7f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7f_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_7e_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1817])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_7e_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1818])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_7e_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7e_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7e_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_7e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7e_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_cf_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1858])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_cf_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_cf_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_cf_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_cf_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_ce_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1860])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_ce_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_ce_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_ce_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_ce_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_18_01_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1867])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_18_01_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_18_01_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_18_01_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_18_01_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_18_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_18_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_38_01_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1872])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_38_01_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_38_01_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_38_01_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_38_01_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_38_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_38_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_21_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1879])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_21_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_21_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_21_01_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1880])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_21_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_21_01_reg_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_03_21_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_21_01_mem_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_21_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_21_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_21_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_42_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2024])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_42_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_42_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_0f_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2084])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_0f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_0f_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_02_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2095])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_02_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_02_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_02_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_02_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_4c_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2100])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_4c_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_4c_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_4c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_4c_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_0e_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2101])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_0e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_0e_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_44_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2117])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_44_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_44_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_61_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2130])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_61_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_61_01_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_61_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_61_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_60_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2131])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_60_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_60_01_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_60_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_60_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_63_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2140])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_63_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_63_01_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_63_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_63_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_62_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2141])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_62_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_62_01_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_62_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_62_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_06_01_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2182])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_06_01_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_06_01_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_06_01_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_06_01_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_06_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_06_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_46_01_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2183])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_46_01_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_46_01_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_46_01_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_46_01_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_46_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_46_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_49_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2193])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_49_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2194])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_49_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_49_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_49_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_49_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_49_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_48_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2195])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_48_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2196])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_48_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_48_01_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_48_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_48_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_48_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_05_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2200])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_05_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_05_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_05_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_05_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_04_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2204])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_04_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_04_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_04_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_04_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_01_01_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2208])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_01_01_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_01_01_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_01_01_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_01_01_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_01_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_01_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_00_01_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2214])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_00_01_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_00_01_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_00_01_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_00_01_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_00_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_00_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_14_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2228])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_14_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_14_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_14_01_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2229])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_14_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_14_01_reg_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_03_14_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_14_01_mem_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_14_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_14_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_14_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_16_01_mem_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2232])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_16_01_mem_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2236])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_16_01_mem_00_wi = {
			RD_ILUT_VEX_WI, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_16_01_mem_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_16_01_mem_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_16_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_16_01_mem_00_wi),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_16_01_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2233])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_16_01_reg_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2237])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_16_01_reg_00_wi = {
			RD_ILUT_VEX_WI, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_16_01_reg_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_16_01_reg_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_16_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_16_01_reg_00_wi),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_03_16_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_16_01_mem_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_16_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_16_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_16_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_15_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2242])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_15_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_15_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_15_01_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2243])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_15_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_15_01_reg_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_03_15_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_15_01_mem_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_15_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_15_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_15_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_20_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2276])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_20_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_20_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_20_01_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2277])
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_20_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_20_01_reg_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pVexTable_root_03_20_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_20_01_mem_l),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_20_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_20_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_20_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_22_01_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2279])
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_22_01_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2281])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_22_01_00_wi = {
			RD_ILUT_VEX_WI, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_22_01_00_00_leaf),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_22_01_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_22_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_22_01_00_wi),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_22_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_22_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_09_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2620])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_09_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_09_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_08_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2621])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_08_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_08_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_0b_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2622])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_0b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_0b_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_0a_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2623])
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_0a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_0a_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pVexTable_root_03_de_01_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2667])
		};

		static const RD_TABLE_VEX_W g_pVexTable_root_03_de_01_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_de_01_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pVexTable_root_03_de_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_de_01_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pVexTable_root_03_de_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_de_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_OPCODE g_pVexTable_root_03_opcode = {
			RD_ILUT_OPCODE, {
				reinterpret_cast<const void*>(&g_pVexTable_root_03_00_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_01_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_02_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_04_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_05_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_06_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_08_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_09_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_0a_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_0b_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_0c_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_0d_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_0e_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_0f_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_14_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_15_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_16_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_17_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_18_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_19_pp),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_1d_pp),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_20_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_21_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_22_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_30_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_31_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_32_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_33_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_38_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_39_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_40_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_41_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_42_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_44_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_46_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_48_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_49_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_4a_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_4b_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_4c_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_5c_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_5d_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_5e_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_5f_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_60_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_61_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_62_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_63_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_68_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_69_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6a_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6b_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6c_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6d_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6e_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_6f_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_78_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_79_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7a_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7b_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7c_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7d_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7e_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_7f_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_ce_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_cf_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_de_pp),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_df_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_03_f0_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_MMMMM g_pVexTable_root_mmmmm = {
			RD_ILUT_VEX_MMMMM, {
				nullptr,
				reinterpret_cast<const void*>(&g_pVexTable_root_01_opcode),
				reinterpret_cast<const void*>(&g_pVexTable_root_02_opcode),
				reinterpret_cast<const void*>(&g_pVexTable_root_03_opcode),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		RD_TABLE const* g_pVexTable = reinterpret_cast<RD_TABLE const*>(&g_pVexTable_root_mmmmm);


		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_9a_03_mem_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1400])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_9a_03_mem_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9a_03_mem_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_02_9a_03_mem_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9a_03_mem_02_w),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_9a_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9a_03_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_9a_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1684])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_9a_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1687])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_9a_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9a_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9a_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_9a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9a_01_w),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9a_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_9b_03_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1401])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_9b_03_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9b_03_mem_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_9b_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9b_03_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_9b_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1689])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_9b_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1692])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_9b_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9b_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9b_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_9b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9b_01_w),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9b_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_aa_03_mem_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1402])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_aa_03_mem_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_aa_03_mem_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_02_aa_03_mem_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_aa_03_mem_02_w),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_aa_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_aa_03_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_aa_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1694])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_aa_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1697])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_aa_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_aa_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_aa_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_aa_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_aa_01_w),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_aa_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_ab_03_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1403])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_ab_03_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ab_03_mem_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_ab_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ab_03_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_ab_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1699])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_ab_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1702])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_ab_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ab_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ab_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_ab_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ab_01_w),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ab_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_de_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1416])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_de_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_de_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_df_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1418])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_df_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_df_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_dc_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1420])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_dc_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_dc_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_dd_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1422])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_dd_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_dd_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_65_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1438])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_65_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1439])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_65_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_65_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_65_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_65_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_65_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_19_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1445])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_19_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1456])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_19_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_19_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_19_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_19_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_19_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_1a_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1446])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_1a_01_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1448])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_1a_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_1a_01_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_1a_01_mem_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_1a_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_1a_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_1a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_1a_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_1b_01_mem_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1447])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_1b_01_mem_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1449])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_1b_01_mem_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_1b_01_mem_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_1b_01_mem_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_02_1b_01_mem_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_1b_01_mem_02_w),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_1b_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_1b_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_1b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_1b_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_59_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1451])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_59_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2110])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_59_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_59_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_59_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_59_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_59_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_5a_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1452])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_5a_01_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1454])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_5a_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_5a_01_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_5a_01_mem_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_5a_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_5a_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_5a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_5a_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_5b_01_mem_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1453])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_5b_01_mem_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1455])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_5b_01_mem_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_5b_01_mem_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_5b_01_mem_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_02_5b_01_mem_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_5b_01_mem_02_w),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_5b_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_5b_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_5b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_5b_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_18_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1458])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_18_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_18_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_18_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_18_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_8a_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1475])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_8a_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1476])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_8a_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_8a_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_8a_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_8a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_8a_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_72_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1483])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_72_03_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_72_03_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_72_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1488])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_72_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_72_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_72_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2480])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_72_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_72_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_72_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_72_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_72_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_72_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_13_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1501])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_13_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_13_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_13_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2378])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_13_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_13_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_13_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_13_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_13_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_52_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1594])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_52_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_52_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_52_03_mem_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2050])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_52_03_mem_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_52_03_mem_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_02_52_03_mem_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_52_03_mem_02_w),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_52_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_52_03_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_52_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2172])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_52_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_52_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_52_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_52_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_52_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_52_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_c8_01_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1599])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_c8_01_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1600])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_c8_01_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c8_01_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c8_01_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_02_c8_01_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c8_01_02_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_c8_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c8_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_88_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1601])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_88_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1602])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_88_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_88_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_88_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_88_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_88_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_98_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1625])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_98_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1628])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_98_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_98_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_98_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_98_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_98_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_99_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1630])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_99_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1633])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_99_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_99_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_99_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_99_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_99_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_a8_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1635])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_a8_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1638])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_a8_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a8_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a8_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_a8_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a8_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_a9_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1640])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_a9_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1643])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_a9_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a9_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a9_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_a9_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a9_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_b8_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1645])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_b8_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1648])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_b8_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b8_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b8_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_b8_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b8_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_b9_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1650])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_b9_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1653])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_b9_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b9_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b9_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_b9_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b9_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_96_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1665])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_96_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1668])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_96_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_96_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_96_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_96_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_96_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_a6_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1670])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_a6_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1673])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_a6_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a6_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a6_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_a6_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a6_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_b6_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1675])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_b6_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1678])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_b6_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b6_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b6_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_b6_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b6_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_ba_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1704])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_ba_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1707])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_ba_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ba_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ba_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_ba_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ba_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_bb_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1709])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_bb_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1712])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_bb_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_bb_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_bb_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_bb_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_bb_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_97_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1714])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_97_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1717])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_97_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_97_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_97_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_97_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_97_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_a7_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1719])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_a7_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1722])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_a7_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a7_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a7_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_a7_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a7_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_b7_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1724])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_b7_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1727])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_b7_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b7_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b7_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_b7_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b7_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_9c_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1743])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_9c_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1746])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_9c_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9c_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9c_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_9c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9c_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_9d_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1748])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_9d_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1751])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_9d_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9d_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9d_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_9d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9d_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_ac_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1753])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_ac_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1756])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_ac_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ac_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ac_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_ac_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ac_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_ad_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1758])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_ad_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1761])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_ad_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ad_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ad_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_ad_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ad_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_bc_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1763])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_bc_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1766])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_bc_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_bc_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_bc_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_bc_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_bc_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_bd_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1768])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_bd_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1771])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_bd_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_bd_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_bd_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_bd_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_bd_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_9e_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1781])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_9e_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1784])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_9e_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9e_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9e_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_9e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9e_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_9f_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1786])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_9f_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1789])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_9f_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9f_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9f_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_9f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9f_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_ae_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1791])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_ae_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1794])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_ae_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ae_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ae_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_ae_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ae_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_af_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1796])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_af_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1799])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_af_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_af_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_af_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_af_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_af_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_be_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1801])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_be_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1804])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_be_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_be_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_be_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_be_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_be_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_bf_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1806])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_bf_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1809])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_bf_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_bf_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_bf_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_bf_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_bf_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_92_01_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1829])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_92_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1831])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_92_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_92_01_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_92_01_mem_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_92_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_92_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_92_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_92_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_c6_01_mem_01_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1833])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_c6_01_mem_01_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1834])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_c6_01_mem_01_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c6_01_mem_01_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c6_01_mem_01_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_02_c6_01_mem_01_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c6_01_mem_01_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_c6_01_mem_02_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1837])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_c6_01_mem_02_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1838])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_c6_01_mem_02_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c6_01_mem_02_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c6_01_mem_02_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_02_c6_01_mem_02_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c6_01_mem_02_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_c6_01_mem_05_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2644])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_c6_01_mem_05_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2645])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_c6_01_mem_05_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c6_01_mem_05_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c6_01_mem_05_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_02_c6_01_mem_05_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c6_01_mem_05_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_c6_01_mem_06_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2648])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_c6_01_mem_06_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2649])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_c6_01_mem_06_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c6_01_mem_06_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c6_01_mem_06_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_02_c6_01_mem_06_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c6_01_mem_06_02_w),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_REG g_pEvexTable_root_02_c6_01_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c6_01_mem_01_l),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c6_01_mem_02_l),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c6_01_mem_05_l),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c6_01_mem_06_l),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_c6_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c6_01_mem_modrmreg),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_c6_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c6_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_c7_01_mem_01_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1835])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_c7_01_mem_01_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1836])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_c7_01_mem_01_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c7_01_mem_01_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c7_01_mem_01_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_02_c7_01_mem_01_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c7_01_mem_01_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_c7_01_mem_02_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1839])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_c7_01_mem_02_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1840])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_c7_01_mem_02_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c7_01_mem_02_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c7_01_mem_02_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_02_c7_01_mem_02_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c7_01_mem_02_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_c7_01_mem_05_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2646])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_c7_01_mem_05_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2647])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_c7_01_mem_05_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c7_01_mem_05_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c7_01_mem_05_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_02_c7_01_mem_05_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c7_01_mem_05_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_c7_01_mem_06_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2650])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_c7_01_mem_06_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2651])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_c7_01_mem_06_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c7_01_mem_06_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c7_01_mem_06_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_02_c7_01_mem_06_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c7_01_mem_06_02_w),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_REG g_pEvexTable_root_02_c7_01_mem_modrmreg = {
			RD_ILUT_MODRM_REG, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c7_01_mem_01_l),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c7_01_mem_02_l),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c7_01_mem_05_l),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c7_01_mem_06_l),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_c7_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c7_01_mem_modrmreg),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_c7_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c7_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_93_01_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1841])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_93_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1843])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_93_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_93_01_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_93_01_mem_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_93_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_93_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_93_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_93_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_42_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1845])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_42_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1847])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_42_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_42_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_42_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_42_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_42_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_43_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1848])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_43_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1850])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_43_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_43_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_43_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_43_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_43_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_cf_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1861])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_cf_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_cf_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_cf_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_cf_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_2a_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1974])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_2a_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_2a_01_mem_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_2a_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_2a_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_2a_02_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2108])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_2a_02_reg_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_2a_02_reg_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_2a_02_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_2a_02_reg_w)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_2a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_2a_01_modrmmod),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_2a_02_modrmmod),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_68_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2048])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_68_03_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2049])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_68_03_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_68_03_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_68_03_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_68_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_68_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_53_03_mem_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2051])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_53_03_mem_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_53_03_mem_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_02_53_03_mem_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_53_03_mem_02_w),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_53_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_53_03_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_53_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2174])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_53_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_53_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_53_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_53_01_w),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_53_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_1c_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2052])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_1c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_1c_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_1e_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2054])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_1e_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_1e_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_1e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_1e_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_1f_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2056])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_1f_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_1f_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_1f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_1f_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_1d_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2057])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_1d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_1d_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_2b_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2063])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_2b_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_2b_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_2b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_2b_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_66_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2096])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_66_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2099])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_66_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_66_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_66_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_66_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_66_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_64_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2097])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_64_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2098])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_64_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_64_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_64_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_64_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_64_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_78_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2102])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_78_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_78_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_78_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_78_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_7a_01_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2103])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_7a_01_reg_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7a_01_reg_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_7a_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7a_01_reg_w)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_7a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7a_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_58_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2105])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_58_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_58_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_58_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_58_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_7c_01_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2106])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_7c_01_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2111])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_7c_01_reg_wi = {
			RD_ILUT_VEX_WI, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7c_01_reg_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7c_01_reg_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_7c_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7c_01_reg_wi)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_7c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7c_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_3a_02_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2109])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_3a_02_reg_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_3a_02_reg_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_3a_02_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_3a_02_reg_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_3a_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2338])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_3a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_3a_01_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_3a_02_modrmmod),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_79_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2113])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_79_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_79_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_79_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_79_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_7b_01_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2114])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_7b_01_reg_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7b_01_reg_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_7b_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7b_01_reg_w)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_7b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7b_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_29_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2126])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_29_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_29_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_29_02_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2340])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_29_02_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2383])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_29_02_reg_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_29_02_reg_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_29_02_reg_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_29_02_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_29_02_reg_w)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_29_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_29_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_29_02_modrmmod),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_37_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2136])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_37_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_37_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_37_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_37_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_63_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2150])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_63_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2153])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_63_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_63_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_63_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_63_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_63_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_8b_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2151])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_8b_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2152])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_8b_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_8b_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_8b_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_8b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_8b_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_c4_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2160])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_c4_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2161])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_c4_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c4_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c4_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_c4_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c4_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_50_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2166])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_50_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_50_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_50_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_50_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_51_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2168])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_51_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_51_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_51_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_51_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_8d_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2184])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_8d_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2221])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_8d_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_8d_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_8d_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_8d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_8d_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_36_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2185])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_36_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2212])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_36_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_36_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_36_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_36_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_36_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_75_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2187])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_75_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2192])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_75_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_75_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_75_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_75_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_75_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_76_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2188])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_76_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2191])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_76_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_76_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_76_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_76_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_76_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_77_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2189])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_77_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2190])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_77_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_77_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_77_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_77_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_77_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_0d_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2197])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_0d_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_0d_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_0d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_0d_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_0c_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2201])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_0c_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_0c_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_0c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_0c_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_16_01_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2205])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_16_01_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2209])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_16_01_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_16_01_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_16_01_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_16_01_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2206])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_16_01_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2210])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_16_01_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_16_01_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_16_01_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_02_16_01_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_16_01_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_16_01_02_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_16_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_16_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_7d_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2215])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_7d_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2220])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_7d_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7d_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7d_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_7d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7d_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_7e_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2216])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_7e_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2219])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_7e_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7e_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7e_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_7e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7e_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_7f_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2217])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_7f_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2218])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_7f_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7f_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7f_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_7f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7f_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_62_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2222])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_62_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2225])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_62_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_62_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_62_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_62_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_62_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_89_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2223])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_89_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2224])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_89_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_89_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_89_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_89_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_89_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_90_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2244])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_90_01_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2246])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_90_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_90_01_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_90_01_mem_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_90_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_90_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_90_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_90_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_91_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2248])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_91_01_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2250])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_91_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_91_01_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_91_01_mem_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_91_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_91_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_91_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_91_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_44_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2286])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_44_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2287])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_44_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_44_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_44_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_44_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_44_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_b5_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2300])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_b5_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b5_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_b5_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b5_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_b4_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2302])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_b4_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b4_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_b4_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b4_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_04_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2304])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_04_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_04_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_3c_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2312])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_3c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_3c_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_3d_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2314])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_3d_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2316])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_3d_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_3d_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_3d_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_3d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_3d_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_3f_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2321])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_3f_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2323])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_3f_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_3f_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_3f_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_3f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_3f_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_3e_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2324])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_3e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_3e_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_38_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2326])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_38_02_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2345])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_38_02_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2346])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_38_02_reg_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_38_02_reg_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_38_02_reg_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_38_02_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_38_02_reg_w)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_38_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_38_01_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_38_02_modrmmod),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_39_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2328])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_39_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2330])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_39_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_39_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_39_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_39_02_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2341])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_39_02_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2349])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_39_02_reg_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_39_02_reg_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_39_02_reg_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_39_02_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_39_02_reg_w)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_39_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_39_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_39_02_modrmmod),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_3b_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2335])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_3b_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2337])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_3b_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_3b_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_3b_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_3b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_3b_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_31_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2342])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_31_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_31_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_31_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2385])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_31_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_31_01_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_31_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_33_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2343])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_33_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_33_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_33_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2397])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_33_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_33_01_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_33_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_28_02_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2344])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_28_02_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2347])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_28_02_reg_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_28_02_reg_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_28_02_reg_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_28_02_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_28_02_reg_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_28_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2403])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_28_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_28_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_28_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_28_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_28_02_modrmmod),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_32_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2350])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_32_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_32_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_32_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2388])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_32_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_32_01_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_32_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_35_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2351])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_35_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_35_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_35_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2394])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_35_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_35_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_35_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_35_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_35_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_34_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2352])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_34_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_34_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_34_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2400])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_34_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_34_01_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_34_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_21_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2353])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_21_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_21_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_21_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2359])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_21_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_21_01_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_21_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_23_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2354])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_23_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_23_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_23_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2371])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_23_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_23_01_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_23_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_22_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2355])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_22_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_22_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_22_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2362])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_22_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_22_01_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_22_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_25_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2356])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_25_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_25_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_25_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2368])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_25_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_25_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_25_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_25_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_25_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_24_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2357])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_24_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_24_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_24_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2374])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_24_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_24_01_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_24_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_20_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2358])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_20_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_20_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_20_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2365])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_20_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_20_01_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_20_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_11_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2377])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_11_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_11_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_11_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2522])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_11_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_11_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_11_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_11_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_11_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_12_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2379])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_12_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_12_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_12_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2508])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_12_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_12_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_12_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_12_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_12_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_15_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2380])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_15_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_15_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_15_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2430])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_15_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2431])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_15_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_15_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_15_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_15_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_15_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_15_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_14_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2381])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_14_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_14_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_14_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2434])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_14_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2435])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_14_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_14_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_14_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_14_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_14_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_14_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_10_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2382])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_10_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_10_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_10_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2541])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_10_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_10_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_10_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_10_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_10_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_30_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2384])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_30_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_30_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_30_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2391])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_30_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_30_01_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_30_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_0b_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2405])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_0b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_0b_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_40_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2411])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_40_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2413])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_40_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_40_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_40_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_40_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_40_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_83_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2416])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_83_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_83_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_83_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_83_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_54_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2419])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_54_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2422])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_54_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_54_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_54_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_54_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_54_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_55_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2420])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_55_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2421])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_55_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_55_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_55_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_55_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_55_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_a0_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2450])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_a0_01_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2451])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_a0_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a0_01_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a0_01_mem_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_a0_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a0_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_a0_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a0_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_a1_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2452])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_a1_01_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2453])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_a1_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a1_01_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a1_01_mem_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_a1_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a1_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_a1_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a1_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_71_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2469])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_71_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2470])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_71_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_71_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_71_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_71_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_71_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_70_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2471])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_70_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_70_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_70_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_70_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_73_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2478])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_73_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2479])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_73_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_73_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_73_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_73_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_73_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2482])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_00_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_00_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_8f_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2484])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_8f_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_8f_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_8f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_8f_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_47_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2504])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_47_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2506])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_47_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_47_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_47_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_47_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_47_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_46_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2519])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_46_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2521])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_46_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_46_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_46_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_46_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_46_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_45_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2537])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_45_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2539])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_45_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_45_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_45_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_45_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_45_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_26_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2565])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_26_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2568])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_26_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_26_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_26_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_26_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2569])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_26_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2572])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_26_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_26_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_26_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_26_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_26_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_26_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_27_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2566])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_27_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2567])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_27_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_27_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_27_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_27_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2570])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_27_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2571])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_27_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_27_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_27_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_27_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_27_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_27_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_4c_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2596])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_4c_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2597])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_4c_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_4c_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_4c_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_4c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_4c_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_4d_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2598])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_4d_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2599])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_4d_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_4d_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_4d_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_4d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_4d_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_ca_01_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2600])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_ca_01_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2601])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_ca_01_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ca_01_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ca_01_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_02_ca_01_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ca_01_02_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_ca_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ca_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_cb_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2602])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_cb_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2603])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_cb_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_cb_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_cb_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_cb_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_cb_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_4e_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2624])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_4e_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2625])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_4e_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_4e_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_4e_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_4e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_4e_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_4f_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2626])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_4f_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2627])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_4f_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_4f_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_4f_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_4f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_4f_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_cc_01_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2628])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_cc_01_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2629])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_cc_01_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_cc_01_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_cc_01_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_02_cc_01_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_cc_01_02_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_cc_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_cc_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_cd_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2630])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_cd_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2631])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_cd_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_cd_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_cd_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_cd_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_cd_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_2c_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2636])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_2c_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2638])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_2c_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_2c_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_2c_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_2c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_2c_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_2d_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2639])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_2d_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2641])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_2d_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_2d_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_2d_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_2d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_2d_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_a2_01_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2642])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_a2_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2643])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_a2_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a2_01_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a2_01_mem_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_a2_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a2_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_a2_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a2_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_a3_01_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2652])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_02_a3_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2653])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_02_a3_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a3_01_mem_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a3_01_mem_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_02_a3_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a3_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_02_a3_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a3_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_OPCODE g_pEvexTable_root_02_opcode = {
			RD_ILUT_OPCODE, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_00_pp),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_04_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_0b_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_0c_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_0d_pp),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_10_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_11_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_12_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_13_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_14_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_15_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_16_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_18_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_19_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_1a_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_1b_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_1c_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_1d_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_1e_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_1f_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_20_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_21_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_22_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_23_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_24_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_25_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_26_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_27_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_28_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_29_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_2a_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_2b_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_2c_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_2d_pp),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_30_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_31_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_32_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_33_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_34_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_35_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_36_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_37_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_38_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_39_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_3a_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_3b_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_3c_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_3d_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_3e_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_3f_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_40_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_42_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_43_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_44_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_45_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_46_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_47_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_4c_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_4d_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_4e_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_4f_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_50_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_51_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_52_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_53_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_54_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_55_pp),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_58_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_59_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_5a_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_5b_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_62_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_63_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_64_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_65_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_66_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_68_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_70_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_71_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_72_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_73_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_75_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_76_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_77_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_78_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_79_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7a_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7b_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7c_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7d_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7e_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_7f_pp),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_83_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_88_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_89_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_8a_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_8b_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_8d_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_8f_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_90_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_91_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_92_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_93_pp),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_96_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_97_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_98_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_99_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9a_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9b_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9c_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9d_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9e_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_9f_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a0_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a1_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a2_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a3_pp),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a6_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a7_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a8_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_a9_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_aa_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ab_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ac_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ad_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ae_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_af_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b4_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b5_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b6_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b7_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b8_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_b9_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ba_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_bb_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_bc_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_bd_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_be_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_bf_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c4_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c6_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c7_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_c8_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_ca_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_cb_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_cc_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_cd_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_cf_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_dc_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_dd_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_de_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_df_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_58_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1404])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_58_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_58_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_58_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1407])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_58_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_58_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_58_03_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1409])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_58_03_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_58_03_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_58_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1412])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_58_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_58_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_58_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_58_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_58_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_58_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_58_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_55_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1428])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_55_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_55_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_55_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1430])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_55_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_55_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_55_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_55_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_55_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_54_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1432])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_54_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_54_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_54_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1434])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_54_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_54_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_54_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_54_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_54_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_c2_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1460])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_c2_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c2_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_c2_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1463])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_c2_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c2_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_c2_03_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1465])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_c2_03_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c2_03_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_c2_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1468])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_c2_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c2_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_c2_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c2_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c2_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c2_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c2_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_2f_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1470])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_2f_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2f_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_2f_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1473])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_2f_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2f_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_2f_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2f_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2f_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_e6_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1477])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_e6_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1522])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_e6_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e6_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e6_02_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_e6_03_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1490])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_e6_03_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e6_03_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_e6_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1547])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_e6_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e6_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_e6_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e6_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e6_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e6_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5b_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1481])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5b_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1524])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5b_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5b_00_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5b_00_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5b_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1510])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5b_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5b_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5b_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1558])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5b_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5b_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_5b_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5b_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5b_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5b_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5a_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1493])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5a_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5a_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5a_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1512])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5a_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5a_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5a_03_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1528])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5a_03_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5a_03_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5a_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1541])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5a_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5a_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_5a_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5a_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5a_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5a_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5a_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_7b_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1496])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_7b_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1519])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_7b_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7b_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7b_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_7b_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1577])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_7b_03_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1578])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_7b_03_wi = {
			RD_ILUT_VEX_WI, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7b_03_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7b_03_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_7b_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1580])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_7b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7b_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7b_02_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7b_03_wi)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_79_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1497])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_79_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1520])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_79_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_79_00_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_79_00_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_79_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1498])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_79_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1521])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_79_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_79_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_79_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_79_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1530])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_79_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1546])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_79_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_79_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_79_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_79_02_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_79_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_2d_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1526])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_2d_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1544])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_2d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2d_02_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2d_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_2a_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1535])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_2a_03_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1536])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_2a_03_wi = {
			RD_ILUT_VEX_WI, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2a_03_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2a_03_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_2a_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1539])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_2a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2a_02_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2a_03_wi)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_7a_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1549])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_7a_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1560])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_7a_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7a_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7a_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_7a_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1571])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_7a_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1574])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_7a_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7a_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7a_02_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_7a_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1573])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_7a_03_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1576])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_7a_03_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7a_03_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7a_03_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_7a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7a_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7a_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7a_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_78_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1550])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_78_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1561])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_78_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_78_00_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_78_00_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_78_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1551])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_78_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1562])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_78_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_78_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_78_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_78_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1565])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_78_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1570])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_78_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_78_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_78_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_78_02_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_78_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_2c_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1563])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_2c_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1568])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_2c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2c_02_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2c_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5e_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1584])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5e_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5e_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5e_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1587])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5e_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5e_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5e_03_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1589])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5e_03_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5e_03_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5e_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1592])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5e_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5e_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_5e_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5e_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5e_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5e_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5e_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5f_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1888])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5f_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5f_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5f_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1891])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5f_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5f_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5f_03_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1893])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5f_03_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5f_03_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5f_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1896])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5f_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5f_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_5f_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5f_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5f_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5f_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5f_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5d_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1903])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5d_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5d_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5d_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1906])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5d_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5d_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5d_03_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1908])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5d_03_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5d_03_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5d_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1911])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5d_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5d_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_5d_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5d_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5d_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5d_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5d_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_28_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1917])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_28_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_28_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_28_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1921])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_28_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_28_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_28_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_28_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_28_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_29_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1918])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_29_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_29_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_29_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1922])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_29_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_29_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_29_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_29_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_29_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_6e_01_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1925])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_6e_01_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1980])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_6e_01_00_wi = {
			RD_ILUT_VEX_WI, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6e_01_00_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6e_01_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_01_6e_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6e_01_00_wi),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_6e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6e_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_7e_01_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1926])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_7e_01_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1981])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_7e_01_00_wi = {
			RD_ILUT_VEX_WI, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7e_01_00_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7e_01_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_01_7e_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7e_01_00_wi),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_7e_02_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1982])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_7e_02_00_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7e_02_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_01_7e_02_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7e_02_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_7e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7e_01_l),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7e_02_l),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_12_03_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1929])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_12_03_00_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_12_03_00_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_12_03_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1930])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_12_03_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_12_03_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_12_03_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1931])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_12_03_02_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_12_03_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_01_12_03_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_12_03_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_12_03_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_12_03_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_12_00_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1950])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_12_00_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_12_00_reg_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_01_12_00_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_12_00_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_12_00_mem_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1966])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_12_00_mem_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_12_00_mem_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_01_12_00_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_12_00_mem_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_01_12_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_12_00_mem_l),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_12_00_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_12_01_mem_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1962])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_12_01_mem_00_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_12_01_mem_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_01_12_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_12_01_mem_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_01_12_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_12_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_12_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2002])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_12_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_12_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_12_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_12_00_modrmmod),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_12_01_modrmmod),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_12_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_12_03_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_6f_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1936])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_6f_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1938])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_6f_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6f_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6f_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_6f_03_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1942])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_6f_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1948])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_6f_03_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6f_03_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6f_03_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_6f_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1944])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_6f_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1946])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_6f_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6f_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6f_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_6f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6f_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6f_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6f_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_7f_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1937])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_7f_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1939])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_7f_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7f_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7f_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_7f_03_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1943])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_7f_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1949])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_7f_03_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7f_03_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7f_03_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_7f_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1945])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_7f_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1947])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_7f_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7f_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7f_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_7f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7f_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7f_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7f_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_16_01_mem_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1952])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_16_01_mem_00_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_16_01_mem_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_01_16_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_16_01_mem_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_01_16_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_16_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_16_00_mem_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1956])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_16_00_mem_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_16_00_mem_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_01_16_00_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_16_00_mem_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_16_00_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1960])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_16_00_reg_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_16_00_reg_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_01_16_00_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_16_00_reg_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_01_16_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_16_00_mem_l),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_16_00_reg_l)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_16_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2000])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_16_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_16_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_16_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_16_00_modrmmod),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_16_01_modrmmod),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_16_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_17_01_mem_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1953])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_17_01_mem_00_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_17_01_mem_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_01_17_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_17_01_mem_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_01_17_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_17_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_17_00_mem_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1957])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_17_00_mem_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_17_00_mem_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_01_17_00_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_17_00_mem_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_01_17_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_17_00_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_17_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_17_00_modrmmod),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_17_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_13_01_mem_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1963])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_13_01_mem_00_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_13_01_mem_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_01_13_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_13_01_mem_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_01_13_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_13_01_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_13_00_mem_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1967])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_13_00_mem_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_13_00_mem_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_01_13_00_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_13_00_mem_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_01_13_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_13_00_mem_l),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_13_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_13_00_modrmmod),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_13_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_e7_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1972])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_e7_01_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e7_01_mem_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_01_e7_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e7_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_e7_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e7_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_2b_01_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1976])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_2b_01_mem_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2b_01_mem_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_01_2b_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2b_01_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_2b_00_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1978])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_2b_00_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2b_00_mem_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_01_2b_00_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2b_00_mem_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_2b_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2b_00_modrmmod),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2b_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_d6_01_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1983])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_d6_01_00_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_d6_01_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_01_d6_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_d6_01_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_d6_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_d6_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_10_03_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1988])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_10_03_mem_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_10_03_mem_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_10_03_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1989])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_10_03_reg_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_10_03_reg_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_01_10_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_10_03_mem_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_10_03_reg_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_10_02_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2004])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_10_02_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_10_02_mem_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_10_02_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2005])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_10_02_reg_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_10_02_reg_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_01_10_02_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_10_02_mem_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_10_02_reg_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_10_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2012])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_10_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_10_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_10_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2016])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_10_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_10_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_10_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_10_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_10_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_10_02_modrmmod),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_10_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_11_03_mem_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1990])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_11_03_mem_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_11_03_mem_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_11_03_reg_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1991])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_11_03_reg_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_11_03_reg_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_01_11_03_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_11_03_mem_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_11_03_reg_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_11_02_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2006])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_11_02_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_11_02_mem_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_11_02_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2007])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_11_02_reg_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_11_02_reg_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_01_11_02_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_11_02_mem_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_11_02_reg_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_11_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2013])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_11_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_11_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_11_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2017])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_11_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_11_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_11_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_11_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_11_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_11_02_modrmmod),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_11_03_modrmmod)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_59_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2031])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_59_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_59_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_59_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2034])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_59_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_59_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_59_03_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2036])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_59_03_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_59_03_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_59_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2039])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_59_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_59_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_59_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_59_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_59_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_59_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_59_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_56_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2044])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_56_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_56_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_56_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2046])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_56_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_56_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_56_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_56_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_56_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_6b_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2059])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_6b_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6b_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_6b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6b_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_63_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2061])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_63_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_63_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_67_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2065])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_67_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_67_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_fc_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2067])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_fc_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_fc_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_fe_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2069])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_fe_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_fe_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_fe_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_fe_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_d4_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2071])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_d4_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_d4_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_d4_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_d4_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_ec_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2073])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_ec_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_ec_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_ed_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2075])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_ed_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_ed_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_dc_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2077])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_dc_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_dc_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_dd_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2079])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_dd_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_dd_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_fd_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2081])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_fd_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_fd_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_db_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2086])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_db_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2090])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_db_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_db_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_db_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_db_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_db_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_df_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2088])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_df_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2089])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_df_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_df_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_df_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_df_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_df_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_e0_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2091])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_e0_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e0_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_e3_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2093])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_e3_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e3_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_74_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2122])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_74_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_74_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_76_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2124])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_76_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_76_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_75_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2128])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_75_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_75_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_64_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2132])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_64_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_64_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_66_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2134])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_66_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_66_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_66_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_66_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_65_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2138])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_65_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_65_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_c5_01_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2238])
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_01_c5_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c5_01_reg_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_01_c5_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c5_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_c5_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c5_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_c4_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2282])
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_01_c4_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c4_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_c4_01_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2283])
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_01_c4_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c4_01_reg_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_01_c4_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c4_01_mem_l),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c4_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_c4_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c4_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_f5_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2306])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_f5_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_f5_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_ee_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2317])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_ee_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_ee_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_de_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2319])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_de_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_de_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_ea_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2331])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_ea_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_ea_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_da_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2333])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_da_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_da_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_e4_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2407])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_e4_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e4_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_e5_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2409])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_e5_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e5_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_d5_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2414])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_d5_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_d5_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_f4_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2417])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_f4_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_f4_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_f4_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_f4_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_eb_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2424])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_eb_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2425])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_eb_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_eb_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_eb_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_eb_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_eb_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_72_01_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2428])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_72_01_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2429])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_72_01_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_72_01_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_72_01_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_72_01_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2432])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_72_01_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2433])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_72_01_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_72_01_00_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_72_01_00_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_72_01_06_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2494])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_72_01_06_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_72_01_06_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_72_01_04_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2513])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_72_01_04_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2517])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_72_01_04_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_72_01_04_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_72_01_04_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_72_01_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2527])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_72_01_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_72_01_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_REG g_pEvexTable_root_01_72_01_modrmreg = {
			RD_ILUT_MODRM_REG, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_72_01_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_72_01_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_72_01_02_w),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_72_01_04_w),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_72_01_06_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_72_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_72_01_modrmreg),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_f6_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2448])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_f6_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_f6_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_70_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2485])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_70_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_70_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_70_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2487])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_70_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2489])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_70_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_70_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_70_02_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_70_03_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_f2_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2495])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_f2_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_f2_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_f2_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_f2_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_73_01_07_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2498])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_73_01_06_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2500])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_73_01_06_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_73_01_06_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_73_01_03_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2531])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_73_01_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2533])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_73_01_02_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_73_01_02_01_leaf)
			}
		};

		static const RD_TABLE_MODRM_REG g_pEvexTable_root_01_73_01_modrmreg = {
			RD_ILUT_MODRM_REG, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_73_01_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_73_01_03_leaf),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_73_01_06_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_73_01_07_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_73_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_73_01_modrmreg),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_f3_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2501])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_f3_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_f3_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_f3_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_f3_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_71_01_06_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2509])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_71_01_04_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2523])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_71_01_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2542])
		};

		static const RD_TABLE_MODRM_REG g_pEvexTable_root_01_71_01_modrmreg = {
			RD_ILUT_MODRM_REG, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_71_01_02_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_71_01_04_leaf),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_71_01_06_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_71_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_71_01_modrmreg),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_f1_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2510])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_f1_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_f1_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_e2_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2514])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_e2_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2518])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_e2_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e2_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e2_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_e2_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e2_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_e1_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2524])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_e1_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e1_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_d2_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2528])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_d2_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_d2_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_d2_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_d2_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_d3_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2534])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_d3_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_d3_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_d3_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_d3_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_d1_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2543])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_d1_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_d1_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_f8_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2546])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_f8_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_f8_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_fa_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2548])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_fa_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_fa_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_fa_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_fa_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_fb_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2550])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_fb_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_fb_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_fb_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_fb_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_e8_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2552])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_e8_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e8_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_e9_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2554])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_e9_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e9_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_d8_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2556])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_d8_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_d8_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_d9_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2558])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_d9_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_d9_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_f9_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2560])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_f9_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_f9_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_68_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2573])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_68_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_68_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_6a_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2575])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_6a_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6a_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_6a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6a_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_6d_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2577])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_6d_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6d_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_6d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6d_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_69_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2579])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_69_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_69_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_60_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2581])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_60_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_60_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_62_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2583])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_62_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_62_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_62_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_62_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_6c_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2585])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_6c_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6c_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_6c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6c_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_61_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2587])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_61_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_61_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_ef_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2590])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_ef_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2591])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_ef_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_ef_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_ef_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_ef_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_ef_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_c6_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2661])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_c6_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c6_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_c6_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2663])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_c6_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c6_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_c6_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c6_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c6_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_51_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2670])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_51_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_51_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_51_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2673])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_51_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_51_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_51_03_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2675])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_51_03_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_51_03_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_51_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2678])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_51_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_51_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_51_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_51_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_51_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_51_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_51_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5c_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2681])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5c_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5c_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5c_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2684])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5c_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5c_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5c_03_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2686])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5c_03_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5c_03_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_5c_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2689])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_5c_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5c_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_5c_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5c_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5c_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5c_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5c_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_2e_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2693])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_2e_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2e_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_2e_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2696])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_2e_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2e_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_2e_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2e_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2e_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_15_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2698])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_15_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_15_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_15_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2700])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_15_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_15_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_15_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_15_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_15_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_14_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2702])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_14_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_14_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_14_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2704])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_14_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_14_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_14_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_14_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_14_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_57_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2706])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_57_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_57_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_01_57_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2708])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_01_57_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_57_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_01_57_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_57_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_57_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_OPCODE g_pEvexTable_root_01_opcode = {
			RD_ILUT_OPCODE, {
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_10_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_11_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_12_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_13_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_14_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_15_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_16_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_17_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_28_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_29_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2a_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2b_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2c_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2d_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2e_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_2f_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_51_pp),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_54_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_55_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_56_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_57_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_58_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_59_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5a_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5b_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5c_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5d_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5e_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_5f_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_60_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_61_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_62_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_63_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_64_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_65_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_66_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_67_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_68_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_69_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6a_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6b_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6c_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6d_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6e_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_6f_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_70_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_71_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_72_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_73_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_74_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_75_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_76_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_78_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_79_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7a_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7b_pp),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7e_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_7f_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c2_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c4_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c5_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_c6_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_d1_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_d2_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_d3_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_d4_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_d5_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_d6_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_d8_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_d9_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_da_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_db_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_dc_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_dd_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_de_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_df_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e0_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e1_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e2_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e3_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e4_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e5_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e6_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e7_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e8_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_e9_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_ea_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_eb_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_ec_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_ed_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_ee_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_ef_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_f1_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_f2_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_f3_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_f4_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_f5_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_f6_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_f8_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_f9_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_fa_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_fb_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_fc_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_fd_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_fe_pp),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_58_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1406])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_58_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_58_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_58_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1411])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_58_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_58_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_58_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_58_00_w),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_58_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_2f_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1472])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_2f_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_2f_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_2f_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_2f_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_5b_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1480])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_5b_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1523])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_5b_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5b_00_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5b_00_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_5b_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1499])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_5b_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5b_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_5b_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1552])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_5b_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5b_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_5b_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5b_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5b_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5b_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_5a_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1492])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_5a_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5a_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_5a_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1500])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_5a_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5a_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_5a_03_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1525])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_5a_03_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5a_03_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_5a_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1531])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_5a_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5a_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_5a_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5a_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5a_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5a_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5a_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_7b_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1505])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_7b_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7b_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_7b_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1579])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_7b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7b_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7b_02_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_79_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1506])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_79_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_79_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_79_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1507])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_79_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_79_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_79_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1534])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_79_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_79_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_79_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_79_02_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_7d_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1508])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_7d_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7d_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_7d_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1509])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_7d_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7d_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_7d_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1581])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_7d_03_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7d_03_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_7d_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1582])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_7d_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7d_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_7d_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7d_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7d_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7d_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7d_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_1d_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1518])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_1d_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_1d_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_1d_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1543])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_1d_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_1d_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_1d_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_1d_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_1d_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_2d_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1532])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_2d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_2d_02_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_2a_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1538])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_2a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_2a_02_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_7a_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1553])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_7a_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7a_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_7a_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1572])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_7a_03_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1575])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_7a_03_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7a_03_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7a_03_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_7a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7a_01_w),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7a_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_78_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1554])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_78_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_78_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_78_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1555])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_78_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_78_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_78_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1567])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_78_02_wi = {
			RD_ILUT_VEX_WI, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_78_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_78_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_78_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_78_01_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_78_02_wi),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_7c_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1556])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_7c_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7c_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_7c_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1557])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_7c_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7c_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_7c_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7c_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7c_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_2c_02_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1566])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_2c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_2c_02_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_5e_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1586])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_5e_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5e_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_5e_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1591])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_5e_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5e_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_5e_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5e_00_w),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5e_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_5f_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1890])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_5f_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5f_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_5f_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1895])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_5f_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5f_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_5f_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5f_00_w),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5f_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_5d_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1905])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_5d_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5d_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_5d_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1910])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_5d_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5d_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_5d_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5d_00_w),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5d_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_10_02_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1996])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_10_02_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_10_02_mem_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_10_02_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1997])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_10_02_reg_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_10_02_reg_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_05_10_02_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_10_02_mem_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_10_02_reg_w)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_10_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_10_02_modrmmod),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_11_02_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1998])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_11_02_mem_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_11_02_mem_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_11_02_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1999])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_11_02_reg_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_11_02_reg_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_05_11_02_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_11_02_mem_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_11_02_reg_w)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_11_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_11_02_modrmmod),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_6e_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2020])
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_05_6e_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_6e_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_6e_01_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2021])
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_05_6e_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_6e_01_reg_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_05_6e_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_6e_01_mem_l),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_6e_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_6e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_6e_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_7e_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2022])
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_05_7e_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7e_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_7e_01_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2023])
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_05_7e_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7e_01_reg_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_05_7e_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7e_01_mem_l),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7e_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_7e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7e_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_59_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2033])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_59_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_59_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_59_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2038])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_59_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_59_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_59_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_59_00_w),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_59_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_51_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2672])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_51_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_51_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_51_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2677])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_51_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_51_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_51_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_51_00_w),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_51_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_5c_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2683])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_5c_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5c_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_5c_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2688])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_5c_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5c_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_5c_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5c_00_w),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5c_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_05_2e_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2695])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_05_2e_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_2e_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_05_2e_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_2e_00_w),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_OPCODE g_pEvexTable_root_05_opcode = {
			RD_ILUT_OPCODE, {
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_10_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_11_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_1d_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_2a_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_2c_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_2d_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_2e_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_2f_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_51_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_58_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_59_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5a_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5b_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5c_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5d_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5e_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_5f_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_6e_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_78_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_79_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7a_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7b_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7c_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7d_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_7e_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_03_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1426])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_03_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1427])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_03_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_03_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_03_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_03_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_03_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_c2_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1462])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_c2_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_c2_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_c2_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1467])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_c2_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_c2_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_c2_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_c2_00_w),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_c2_02_w),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_1d_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1515])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_1d_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_1d_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_1d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_1d_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_42_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1583])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_42_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_42_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_42_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_42_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_19_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1604])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_19_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1606])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_19_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_19_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_19_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_19_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_19_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_1b_01_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1605])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_1b_01_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1607])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_1b_01_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_1b_01_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_1b_01_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_03_1b_01_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_1b_01_02_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_1b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_1b_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_39_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1609])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_39_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1611])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_39_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_39_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_39_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_39_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_39_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_3b_01_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1610])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_3b_01_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1612])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_3b_01_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_3b_01_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_3b_01_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_03_3b_01_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_3b_01_02_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_3b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_3b_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_17_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1613])
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_03_17_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_17_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_17_01_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1614])
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_03_17_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_17_01_reg_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_03_17_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_17_01_mem_l),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_17_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_17_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_17_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_54_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1621])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_54_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1622])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_54_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_54_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_54_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_54_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_54_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_55_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1623])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_55_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1624])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_55_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_55_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_55_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_55_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_55_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_66_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1819])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_66_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1821])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_66_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_66_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_66_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_66_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1820])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_66_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_66_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_66_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_66_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_66_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_67_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1822])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_67_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1824])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_67_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_67_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_67_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_67_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1823])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_67_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_67_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_67_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_67_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_67_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_26_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1851])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_26_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1853])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_26_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_26_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_26_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_26_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1852])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_26_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_26_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_26_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_26_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_26_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_27_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1854])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_27_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1856])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_27_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_27_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_27_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_27_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1855])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_27_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_27_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_27_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_27_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_27_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_cf_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1857])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_cf_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_cf_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_cf_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_cf_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_ce_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1859])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_ce_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_ce_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_ce_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_ce_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_18_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1868])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_18_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1870])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_18_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_18_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_18_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_18_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_18_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_1a_01_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1869])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_1a_01_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1871])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_1a_01_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_1a_01_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_1a_01_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_03_1a_01_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_1a_01_02_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_1a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_1a_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_38_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1873])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_38_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1875])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_38_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_38_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_38_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_38_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_38_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_3a_01_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1874])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_3a_01_02_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1876])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_3a_01_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_3a_01_02_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_3a_01_02_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_03_3a_01_l = {
			RD_ILUT_VEX_L, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_3a_01_02_w),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_3a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_3a_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_21_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1877])
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_03_21_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_21_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_21_01_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1878])
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_03_21_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_21_01_reg_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_03_21_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_21_01_mem_l),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_21_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_21_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_21_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_0f_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2083])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_0f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_0f_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_44_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2116])
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_44_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_44_01_leaf),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_3f_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2120])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_3f_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2147])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_3f_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_3f_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_3f_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_3f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_3f_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_1f_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2121])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_1f_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2142])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_1f_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_1f_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_1f_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_1f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_1f_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_3e_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2143])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_3e_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2146])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_3e_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_3e_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_3e_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_3e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_3e_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_1e_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2144])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_1e_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2145])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_1e_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_1e_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_1e_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_1e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_1e_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_05_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2198])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_05_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_05_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_05_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_05_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_04_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2202])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_04_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_04_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_04_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_04_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_01_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2207])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_01_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_01_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_01_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_01_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_00_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2213])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_00_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_00_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_00_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_00_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_14_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2226])
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_03_14_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_14_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_14_01_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2227])
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_03_14_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_14_01_reg_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_03_14_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_14_01_mem_l),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_14_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_14_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_14_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_16_01_mem_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2230])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_16_01_mem_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2234])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_16_01_mem_00_wi = {
			RD_ILUT_VEX_WI, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_16_01_mem_00_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_16_01_mem_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_03_16_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_16_01_mem_00_wi),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_16_01_reg_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2231])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_16_01_reg_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2235])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_16_01_reg_00_wi = {
			RD_ILUT_VEX_WI, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_16_01_reg_00_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_16_01_reg_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_03_16_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_16_01_reg_00_wi),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_03_16_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_16_01_mem_l),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_16_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_16_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_16_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_15_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2239])
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_03_15_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_15_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_15_01_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2240])
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_03_15_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_15_01_reg_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_03_15_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_15_01_mem_l),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_15_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_15_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_15_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_20_01_mem_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2274])
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_03_20_01_mem_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_20_01_mem_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_20_01_reg_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2275])
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_03_20_01_reg_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_20_01_reg_00_leaf),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_MODRM_MOD g_pEvexTable_root_03_20_01_modrmmod = {
			RD_ILUT_MODRM_MOD, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_20_01_mem_l),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_20_01_reg_l)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_20_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_20_01_modrmmod),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_22_01_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2278])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_22_01_00_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2280])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_22_01_00_wi = {
			RD_ILUT_VEX_WI, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_22_01_00_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_22_01_00_01_leaf)
			}
		};

		static const RD_TABLE_VEX_L g_pEvexTable_root_03_22_01_l = {
			RD_ILUT_VEX_L, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_22_01_00_wi),
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_22_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_22_01_l),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_71_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2467])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_71_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2468])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_71_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_71_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_71_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_71_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_71_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_70_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2472])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_70_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_70_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_70_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_70_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_73_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2476])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_73_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2477])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_73_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_73_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_73_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_73_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_73_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_72_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2481])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_72_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_72_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_72_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_72_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_25_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2562])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_25_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2563])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_25_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_25_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_25_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_25_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_25_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_50_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2592])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_50_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2593])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_50_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_50_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_50_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_50_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_50_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_51_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2594])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_51_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2595])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_51_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_51_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_51_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_51_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_51_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_56_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2608])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_56_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2610])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_56_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_56_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_56_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_56_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2609])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_56_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_56_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_56_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_56_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_56_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_57_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2611])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_57_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2613])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_57_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_57_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_57_01_01_leaf)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_57_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2612])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_57_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_57_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_57_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_57_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_57_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_09_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2614])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_09_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_09_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_09_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_09_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_08_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2615])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_08_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_08_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_08_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2616])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_08_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_08_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_08_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_08_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_08_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_0b_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2617])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_0b_01_w = {
			RD_ILUT_VEX_W, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_0b_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_0b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_0b_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_0a_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2618])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_0a_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_0a_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_0a_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2619])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_0a_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_0a_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_0a_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_0a_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_0a_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_23_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2657])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_23_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2658])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_23_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_23_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_23_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_23_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_23_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_43_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2659])
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_03_43_01_01_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2660])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_03_43_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_43_01_00_leaf),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_43_01_01_leaf)
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_03_43_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_43_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_OPCODE g_pEvexTable_root_03_opcode = {
			RD_ILUT_OPCODE, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_00_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_01_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_03_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_04_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_05_pp),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_08_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_09_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_0a_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_0b_pp),
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_0f_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_14_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_15_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_16_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_17_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_18_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_19_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_1a_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_1b_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_1d_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_1e_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_1f_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_20_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_21_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_22_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_23_pp),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_25_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_26_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_27_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_38_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_39_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_3a_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_3b_pp),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_3e_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_3f_pp),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_42_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_43_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_44_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_50_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_51_pp),
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_54_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_55_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_56_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_57_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_66_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_67_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_70_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_71_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_72_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_73_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_c2_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_ce_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_cf_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_13_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1504])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_13_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_13_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_13_00_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1533])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_13_00_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_13_00_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_13_pp = {
			RD_ILUT_VEX_PP, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_13_00_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_13_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_56_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1617])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_56_03_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_56_03_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_56_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1655])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_56_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_56_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_56_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_56_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_56_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_57_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1618])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_57_03_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_57_03_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_57_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1656])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_57_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_57_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_57_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_57_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_57_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_d6_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1619])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_d6_03_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_d6_03_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_d6_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1741])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_d6_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_d6_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_d6_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_d6_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_d6_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_d7_03_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1620])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_d7_03_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_d7_03_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_d7_02_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1742])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_d7_02_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_d7_02_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_d7_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_d7_02_w),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_d7_03_w)
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_98_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1627])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_98_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_98_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_98_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_98_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_99_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1632])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_99_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_99_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_99_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_99_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_a8_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1637])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_a8_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_a8_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_a8_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_a8_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_a9_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1642])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_a9_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_a9_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_a9_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_a9_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_b8_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1647])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_b8_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_b8_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_b8_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_b8_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_b9_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1652])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_b9_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_b9_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_b9_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_b9_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_96_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1667])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_96_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_96_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_96_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_96_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_a6_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1672])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_a6_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_a6_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_a6_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_a6_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_b6_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1677])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_b6_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_b6_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_b6_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_b6_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_9a_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1686])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_9a_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_9a_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_9a_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_9a_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_9b_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1691])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_9b_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_9b_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_9b_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_9b_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_aa_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1696])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_aa_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_aa_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_aa_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_aa_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_ab_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1701])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_ab_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_ab_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_ab_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_ab_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_ba_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1706])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_ba_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_ba_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_ba_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_ba_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_bb_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1711])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_bb_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_bb_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_bb_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_bb_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_97_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1716])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_97_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_97_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_97_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_97_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_a7_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1721])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_a7_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_a7_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_a7_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_a7_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_b7_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1726])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_b7_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_b7_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_b7_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_b7_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_9c_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1745])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_9c_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_9c_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_9c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_9c_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_9d_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1750])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_9d_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_9d_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_9d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_9d_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_ac_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1755])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_ac_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_ac_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_ac_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_ac_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_ad_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1760])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_ad_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_ad_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_ad_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_ad_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_bc_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1765])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_bc_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_bc_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_bc_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_bc_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_bd_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1770])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_bd_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_bd_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_bd_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_bd_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_9e_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1783])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_9e_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_9e_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_9e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_9e_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_9f_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1788])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_9f_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_9f_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_9f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_9f_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_ae_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1793])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_ae_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_ae_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_ae_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_ae_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_af_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1798])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_af_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_af_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_af_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_af_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_be_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1803])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_be_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_be_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_be_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_be_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_bf_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1808])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_bf_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_bf_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_bf_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_bf_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_42_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1846])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_42_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_42_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_42_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_42_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_43_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[1849])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_43_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_43_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_43_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_43_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_4c_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2604])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_4c_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_4c_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_4c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_4c_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_4d_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2606])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_4d_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_4d_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_4d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_4d_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_4e_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2632])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_4e_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_4e_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_4e_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_4e_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_4f_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2634])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_4f_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_4f_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_4f_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_4f_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_2c_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2637])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_2c_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_2c_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_2c_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_2c_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_INSTRUCTION g_pEvexTable_root_06_2d_01_00_leaf = {
			RD_ILUT_INSTRUCTION, reinterpret_cast<const void*>(&g_pInstructions[2640])
		};

		static const RD_TABLE_VEX_W g_pEvexTable_root_06_2d_01_w = {
			RD_ILUT_VEX_W, {
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_2d_01_00_leaf),
				nullptr
			}
		};

		static const RD_TABLE_VEX_PP g_pEvexTable_root_06_2d_pp = {
			RD_ILUT_VEX_PP, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_2d_01_w),
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_OPCODE g_pEvexTable_root_06_opcode = {
			RD_ILUT_OPCODE, {
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_13_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_2c_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_2d_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_42_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_43_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_4c_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_4d_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_4e_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_4f_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_56_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_57_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_96_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_97_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_98_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_99_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_9a_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_9b_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_9c_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_9d_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_9e_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_9f_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_a6_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_a7_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_a8_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_a9_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_aa_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_ab_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_ac_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_ad_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_ae_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_af_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_b6_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_b7_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_b8_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_b9_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_ba_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_bb_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_bc_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_bd_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_be_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_bf_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_d6_pp),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_d7_pp),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		static const RD_TABLE_VEX_MMMMM g_pEvexTable_root_mmmmm = {
			RD_ILUT_VEX_MMMMM, {
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_01_opcode),
				reinterpret_cast<const void*>(&g_pEvexTable_root_02_opcode),
				reinterpret_cast<const void*>(&g_pEvexTable_root_03_opcode),
				nullptr,
				reinterpret_cast<const void*>(&g_pEvexTable_root_05_opcode),
				reinterpret_cast<const void*>(&g_pEvexTable_root_06_opcode),
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr,
				nullptr
			}
		};

		RD_TABLE const* g_pEvexTable = reinterpret_cast<RD_TABLE const*>(&g_pEvexTable_root_mmmmm);

		const char* g_pMnemonics[1751] = {
			"AAA",
			"AAD",
			"AADD",
			"AAM",
			"AAND",
			"AAS",
			"ADC",
			"ADCX",
			"ADD",
			"ADDPD",
			"ADDPS",
			"ADDSD",
			"ADDSS",
			"ADDSUBPD",
			"ADDSUBPS",
			"ADOX",
			"AESDEC",
			"AESDEC128KL",
			"AESDEC256KL",
			"AESDECLAST",
			"AESDECWIDE128KL",
			"AESDECWIDE256KL",
			"AESENC",
			"AESENC128KL",
			"AESENC256KL",
			"AESENCLAST",
			"AESENCWIDE128KL",
			"AESENCWIDE256KL",
			"AESIMC",
			"AESKEYGENASSIST",
			"ALTINST",
			"AND",
			"ANDN",
			"ANDNPD",
			"ANDNPS",
			"ANDPD",
			"ANDPS",
			"AOR",
			"ARPL",
			"AXOR",
			"BEXTR",
			"BLCFILL",
			"BLCI",
			"BLCIC",
			"BLCMSK",
			"BLCS",
			"BLENDPD",
			"BLENDPS",
			"BLENDVPD",
			"BLENDVPS",
			"BLSFILL",
			"BLSI",
			"BLSIC",
			"BLSMSK",
			"BLSR",
			"BNDCL",
			"BNDCN",
			"BNDCU",
			"BNDLDX",
			"BNDMK",
			"BNDMOV",
			"BNDSTX",
			"BOUND",
			"BSF",
			"BSR",
			"BSWAP",
			"BT",
			"BTC",
			"BTR",
			"BTS",
			"BZHI",
			"CALL",
			"CALLF",
			"CBW",
			"CDQ",
			"CDQE",
			"CLAC",
			"CLC",
			"CLD",
			"CLDEMOTE",
			"CLEVICT0",
			"CLEVICT1",
			"CLFLUSH",
			"CLFLUSHOPT",
			"CLGI",
			"CLI",
			"CLRSSBSY",
			"CLTS",
			"CLUI",
			"CLWB",
			"CLZERO",
			"CMC",
			"CMOVBE",
			"CMOVC",
			"CMOVL",
			"CMOVLE",
			"CMOVNBE",
			"CMOVNC",
			"CMOVNL",
			"CMOVNLE",
			"CMOVNO",
			"CMOVNP",
			"CMOVNS",
			"CMOVNZ",
			"CMOVO",
			"CMOVP",
			"CMOVS",
			"CMOVZ",
			"CMP",
			"CMPBEXADD",
			"CMPCXADD",
			"CMPLEXADD",
			"CMPLXADD",
			"CMPNBEXADD",
			"CMPNCXADD",
			"CMPNLEXADD",
			"CMPNLXADD",
			"CMPNOXADD",
			"CMPNPXADD",
			"CMPNSXADD",
			"CMPNZXADD",
			"CMPOXADD",
			"CMPPD",
			"CMPPS",
			"CMPPXADD",
			"CMPSB",
			"CMPSD",
			"CMPSQ",
			"CMPSS",
			"CMPSW",
			"CMPSXADD",
			"CMPXCHG",
			"CMPXCHG16B",
			"CMPXCHG8B",
			"CMPZXADD",
			"COMISD",
			"COMISS",
			"CPUID",
			"CPU_READ",
			"CPU_WRITE",
			"CQO",
			"CRC32",
			"CVTDQ2PD",
			"CVTDQ2PS",
			"CVTPD2DQ",
			"CVTPD2PI",
			"CVTPD2PS",
			"CVTPI2PD",
			"CVTPI2PS",
			"CVTPS2DQ",
			"CVTPS2PD",
			"CVTPS2PI",
			"CVTSD2SI",
			"CVTSD2SS",
			"CVTSI2SD",
			"CVTSI2SS",
			"CVTSS2SD",
			"CVTSS2SI",
			"CVTTPD2DQ",
			"CVTTPD2PI",
			"CVTTPS2DQ",
			"CVTTPS2PI",
			"CVTTSD2SI",
			"CVTTSS2SI",
			"CWD",
			"CWDE",
			"DAA",
			"DAS",
			"DEC",
			"DELAY",
			"DIV",
			"DIVPD",
			"DIVPS",
			"DIVSD",
			"DIVSS",
			"DMINT",
			"DPPD",
			"DPPS",
			"EMMS",
			"ENCLS",
			"ENCLU",
			"ENCLV",
			"ENCODEKEY128",
			"ENCODEKEY256",
			"ENDBR32",
			"ENDBR64",
			"ENQCMD",
			"ENQCMDS",
			"ENTER",
			"ERETS",
			"ERETU",
			"EXTRACTPS",
			"EXTRQ",
			"F2XM1",
			"FABS",
			"FADD",
			"FADDP",
			"FBLD",
			"FBSTP",
			"FCHS",
			"FCMOVB",
			"FCMOVBE",
			"FCMOVE",
			"FCMOVNB",
			"FCMOVNBE",
			"FCMOVNE",
			"FCMOVNU",
			"FCMOVU",
			"FCOM",
			"FCOMI",
			"FCOMIP",
			"FCOMP",
			"FCOMPP",
			"FCOS",
			"FDECSTP",
			"FDIV",
			"FDIVP",
			"FDIVR",
			"FDIVRP",
			"FEMMS",
			"FFREE",
			"FFREEP",
			"FIADD",
			"FICOM",
			"FICOMP",
			"FIDIV",
			"FIDIVR",
			"FILD",
			"FIMUL",
			"FINCSTP",
			"FIST",
			"FISTP",
			"FISTTP",
			"FISUB",
			"FISUBR",
			"FLD",
			"FLD1",
			"FLDCW",
			"FLDENV",
			"FLDL2E",
			"FLDL2T",
			"FLDLG2",
			"FLDLN2",
			"FLDPI",
			"FLDZ",
			"FMUL",
			"FMULP",
			"FNCLEX",
			"FNDISI",
			"FNINIT",
			"FNOP",
			"FNSAVE",
			"FNSTCW",
			"FNSTENV",
			"FNSTSW",
			"FPATAN",
			"FPREM",
			"FPREM1",
			"FPTAN",
			"FRINEAR",
			"FRNDINT",
			"FRSTOR",
			"FSCALE",
			"FSIN",
			"FSINCOS",
			"FSQRT",
			"FST",
			"FSTDW",
			"FSTP",
			"FSTPNCE",
			"FSTSG",
			"FSUB",
			"FSUBP",
			"FSUBR",
			"FSUBRP",
			"FTST",
			"FUCOM",
			"FUCOMI",
			"FUCOMIP",
			"FUCOMP",
			"FUCOMPP",
			"FXAM",
			"FXCH",
			"FXRSTOR",
			"FXRSTOR64",
			"FXSAVE",
			"FXSAVE64",
			"FXTRACT",
			"FYL2X",
			"FYL2XP1",
			"GETSEC",
			"GF2P8AFFINEINVQB",
			"GF2P8AFFINEQB",
			"GF2P8MULB",
			"HADDPD",
			"HADDPS",
			"HLT",
			"HRESET",
			"HSUBPD",
			"HSUBPS",
			"IDIV",
			"IMUL",
			"IN",
			"INC",
			"INCSSPD",
			"INCSSPQ",
			"INSB",
			"INSD",
			"INSERTPS",
			"INSERTQ",
			"INSW",
			"INT",
			"INT1",
			"INT3",
			"INTO",
			"INVD",
			"INVEPT",
			"INVLPG",
			"INVLPGA",
			"INVLPGB",
			"INVPCID",
			"INVVPID",
			"IRETD",
			"IRETQ",
			"IRETW",
			"JBE",
			"JC",
			"JCXZ",
			"JECXZ",
			"JL",
			"JLE",
			"JMP",
			"JMPE",
			"JMPF",
			"JNBE",
			"JNC",
			"JNL",
			"JNLE",
			"JNO",
			"JNP",
			"JNS",
			"JNZ",
			"JO",
			"JP",
			"JRCXZ",
			"JS",
			"JZ",
			"KADDB",
			"KADDD",
			"KADDQ",
			"KADDW",
			"KANDB",
			"KANDD",
			"KANDNB",
			"KANDND",
			"KANDNQ",
			"KANDNW",
			"KANDQ",
			"KANDW",
			"KMERGE2L1H",
			"KMERGE2L1L",
			"KMOVB",
			"KMOVD",
			"KMOVQ",
			"KMOVW",
			"KNOTB",
			"KNOTD",
			"KNOTQ",
			"KNOTW",
			"KORB",
			"KORD",
			"KORQ",
			"KORTESTB",
			"KORTESTD",
			"KORTESTQ",
			"KORTESTW",
			"KORW",
			"KSHIFTLB",
			"KSHIFTLD",
			"KSHIFTLQ",
			"KSHIFTLW",
			"KSHIFTRB",
			"KSHIFTRD",
			"KSHIFTRQ",
			"KSHIFTRW",
			"KTESTB",
			"KTESTD",
			"KTESTQ",
			"KTESTW",
			"KUNPCKBW",
			"KUNPCKDQ",
			"KUNPCKWD",
			"KXNORB",
			"KXNORD",
			"KXNORQ",
			"KXNORW",
			"KXORB",
			"KXORD",
			"KXORQ",
			"KXORW",
			"LAHF",
			"LAR",
			"LDDQU",
			"LDMXCSR",
			"LDS",
			"LDTILECFG",
			"LEA",
			"LEAVE",
			"LES",
			"LFENCE",
			"LFS",
			"LGDT",
			"LGS",
			"LIDT",
			"LKGS",
			"LLDT",
			"LLWPCB",
			"LMSW",
			"LOADIWKEY",
			"LODSB",
			"LODSD",
			"LODSQ",
			"LODSW",
			"LOOP",
			"LOOPNZ",
			"LOOPZ",
			"LSL",
			"LSS",
			"LTR",
			"LWPINS",
			"LWPVAL",
			"LZCNT",
			"MASKMOVDQU",
			"MASKMOVQ",
			"MAXPD",
			"MAXPS",
			"MAXSD",
			"MAXSS",
			"MCOMMIT",
			"MFENCE",
			"MINPD",
			"MINPS",
			"MINSD",
			"MINSS",
			"MONITOR",
			"MONITORX",
			"MONTMUL",
			"MOV",
			"MOVAPD",
			"MOVAPS",
			"MOVBE",
			"MOVD",
			"MOVDDUP",
			"MOVDIR64B",
			"MOVDIRI",
			"MOVDQ2Q",
			"MOVDQA",
			"MOVDQU",
			"MOVHLPS",
			"MOVHPD",
			"MOVHPS",
			"MOVLHPS",
			"MOVLPD",
			"MOVLPS",
			"MOVMSKPD",
			"MOVMSKPS",
			"MOVNTDQ",
			"MOVNTDQA",
			"MOVNTI",
			"MOVNTPD",
			"MOVNTPS",
			"MOVNTQ",
			"MOVNTSD",
			"MOVNTSS",
			"MOVQ",
			"MOVQ2DQ",
			"MOVSB",
			"MOVSD",
			"MOVSHDUP",
			"MOVSLDUP",
			"MOVSQ",
			"MOVSS",
			"MOVSW",
			"MOVSX",
			"MOVSXD",
			"MOVUPD",
			"MOVUPS",
			"MOVZX",
			"MPSADBW",
			"MUL",
			"MULPD",
			"MULPS",
			"MULSD",
			"MULSS",
			"MULX",
			"MWAIT",
			"MWAITX",
			"NEG",
			"NOP",
			"NOT",
			"OR",
			"ORPD",
			"ORPS",
			"OUT",
			"OUTSB",
			"OUTSD",
			"OUTSW",
			"PABSB",
			"PABSD",
			"PABSW",
			"PACKSSDW",
			"PACKSSWB",
			"PACKUSDW",
			"PACKUSWB",
			"PADDB",
			"PADDD",
			"PADDQ",
			"PADDSB",
			"PADDSW",
			"PADDUSB",
			"PADDUSW",
			"PADDW",
			"PALIGNR",
			"PAND",
			"PANDN",
			"PAUSE",
			"PAVGB",
			"PAVGUSB",
			"PAVGW",
			"PBLENDVB",
			"PBLENDW",
			"PBNDKB",
			"PCLMULQDQ",
			"PCMPEQB",
			"PCMPEQD",
			"PCMPEQQ",
			"PCMPEQW",
			"PCMPESTRI",
			"PCMPESTRM",
			"PCMPGTB",
			"PCMPGTD",
			"PCMPGTQ",
			"PCMPGTW",
			"PCMPISTRI",
			"PCMPISTRM",
			"PCONFIG",
			"PDEP",
			"PEXT",
			"PEXTRB",
			"PEXTRD",
			"PEXTRQ",
			"PEXTRW",
			"PF2ID",
			"PF2IW",
			"PFACC",
			"PFADD",
			"PFCMPEQ",
			"PFCMPGE",
			"PFCMPGT",
			"PFMAX",
			"PFMIN",
			"PFMUL",
			"PFNACC",
			"PFPNACC",
			"PFRCP",
			"PFRCPIT1",
			"PFRCPIT2",
			"PFRCPV",
			"PFRSQIT1",
			"PFRSQRT",
			"PFRSQRTV",
			"PFSUB",
			"PFSUBR",
			"PHADDD",
			"PHADDSW",
			"PHADDW",
			"PHMINPOSUW",
			"PHSUBD",
			"PHSUBSW",
			"PHSUBW",
			"PI2FD",
			"PI2FW",
			"PINSRB",
			"PINSRD",
			"PINSRQ",
			"PINSRW",
			"PMADDUBSW",
			"PMADDWD",
			"PMAXSB",
			"PMAXSD",
			"PMAXSW",
			"PMAXUB",
			"PMAXUD",
			"PMAXUW",
			"PMINSB",
			"PMINSD",
			"PMINSW",
			"PMINUB",
			"PMINUD",
			"PMINUW",
			"PMOVMSKB",
			"PMOVSXBD",
			"PMOVSXBQ",
			"PMOVSXBW",
			"PMOVSXDQ",
			"PMOVSXWD",
			"PMOVSXWQ",
			"PMOVZXBD",
			"PMOVZXBQ",
			"PMOVZXBW",
			"PMOVZXDQ",
			"PMOVZXWD",
			"PMOVZXWQ",
			"PMULDQ",
			"PMULHRSW",
			"PMULHRW",
			"PMULHUW",
			"PMULHW",
			"PMULLD",
			"PMULLW",
			"PMULUDQ",
			"POP",
			"POPA",
			"POPAD",
			"POPCNT",
			"POPFD",
			"POPFQ",
			"POPFW",
			"POR",
			"PREFETCH",
			"PREFETCHE",
			"PREFETCHIT0",
			"PREFETCHIT1",
			"PREFETCHM",
			"PREFETCHNTA",
			"PREFETCHT0",
			"PREFETCHT1",
			"PREFETCHT2",
			"PREFETCHW",
			"PREFETCHWT1",
			"PSADBW",
			"PSHUFB",
			"PSHUFD",
			"PSHUFHW",
			"PSHUFLW",
			"PSHUFW",
			"PSIGNB",
			"PSIGND",
			"PSIGNW",
			"PSLLD",
			"PSLLDQ",
			"PSLLQ",
			"PSLLW",
			"PSMASH",
			"PSRAD",
			"PSRAW",
			"PSRLD",
			"PSRLDQ",
			"PSRLQ",
			"PSRLW",
			"PSUBB",
			"PSUBD",
			"PSUBQ",
			"PSUBSB",
			"PSUBSW",
			"PSUBUSB",
			"PSUBUSW",
			"PSUBW",
			"PSWAPD",
			"PTEST",
			"PTWRITE",
			"PUNPCKHBW",
			"PUNPCKHDQ",
			"PUNPCKHQDQ",
			"PUNPCKHWD",
			"PUNPCKLBW",
			"PUNPCKLDQ",
			"PUNPCKLQDQ",
			"PUNPCKLWD",
			"PUSH",
			"PUSHA",
			"PUSHAD",
			"PUSHFD",
			"PUSHFQ",
			"PUSHFW",
			"PVALIDATE",
			"PXOR",
			"RCL",
			"RCPPS",
			"RCPSS",
			"RCR",
			"RDFSBASE",
			"RDGSBASE",
			"RDMSR",
			"RDMSRLIST",
			"RDPID",
			"RDPKRU",
			"RDPMC",
			"RDPRU",
			"RDRAND",
			"RDSEED",
			"RDSHR",
			"RDSSPD",
			"RDSSPQ",
			"RDTSC",
			"RDTSCP",
			"RETF",
			"RETN",
			"RMPADJUST",
			"RMPQUERY",
			"RMPUPDATE",
			"ROL",
			"ROR",
			"RORX",
			"ROUNDPD",
			"ROUNDPS",
			"ROUNDSD",
			"ROUNDSS",
			"RSDC",
			"RSLDT",
			"RSM",
			"RSQRTPS",
			"RSQRTSS",
			"RSTORSSP",
			"RSTS",
			"SAHF",
			"SAL",
			"SALC",
			"SAR",
			"SARX",
			"SAVEPREVSSP",
			"SBB",
			"SCASB",
			"SCASD",
			"SCASQ",
			"SCASW",
			"SEAMCALL",
			"SEAMOPS",
			"SEAMRET",
			"SENDUIPI",
			"SERIALIZE",
			"SETBE",
			"SETC",
			"SETL",
			"SETLE",
			"SETNBE",
			"SETNC",
			"SETNL",
			"SETNLE",
			"SETNO",
			"SETNP",
			"SETNS",
			"SETNZ",
			"SETO",
			"SETP",
			"SETS",
			"SETSSBSY",
			"SETZ",
			"SFENCE",
			"SGDT",
			"SHA1MSG1",
			"SHA1MSG2",
			"SHA1NEXTE",
			"SHA1RNDS4",
			"SHA256MSG1",
			"SHA256MSG2",
			"SHA256RNDS2",
			"SHL",
			"SHLD",
			"SHLX",
			"SHR",
			"SHRD",
			"SHRX",
			"SHUFPD",
			"SHUFPS",
			"SIDT",
			"SKINIT",
			"SLDT",
			"SLWPCB",
			"SMINT",
			"SMSW",
			"SPFLT",
			"SQRTPD",
			"SQRTPS",
			"SQRTSD",
			"SQRTSS",
			"STAC",
			"STC",
			"STD",
			"STGI",
			"STI",
			"STMXCSR",
			"STOSB",
			"STOSD",
			"STOSQ",
			"STOSW",
			"STR",
			"STTILECFG",
			"STUI",
			"SUB",
			"SUBPD",
			"SUBPS",
			"SUBSD",
			"SUBSS",
			"SVDC",
			"SVLDT",
			"SVTS",
			"SWAPGS",
			"SYSCALL",
			"SYSENTER",
			"SYSEXIT",
			"SYSRET",
			"T1MSKC",
			"TCMMIMFP16PS",
			"TCMMRLFP16PS",
			"TDCALL",
			"TDPBF16PS",
			"TDPBSSD",
			"TDPBSUD",
			"TDPBUSD",
			"TDPBUUD",
			"TDPFP16PS",
			"TEST",
			"TESTUI",
			"TILELOADD",
			"TILELOADDT1",
			"TILERELEASE",
			"TILESTORED",
			"TILEZERO",
			"TLBSYNC",
			"TPAUSE",
			"TZCNT",
			"TZMSK",
			"UCOMISD",
			"UCOMISS",
			"UD0",
			"UD1",
			"UD2",
			"UIRET",
			"UMONITOR",
			"UMWAIT",
			"UNPCKHPD",
			"UNPCKHPS",
			"UNPCKLPD",
			"UNPCKLPS",
			"V4FMADDPS",
			"V4FMADDSS",
			"V4FNMADDPS",
			"V4FNMADDSS",
			"VADDPD",
			"VADDPH",
			"VADDPS",
			"VADDSD",
			"VADDSH",
			"VADDSS",
			"VADDSUBPD",
			"VADDSUBPS",
			"VAESDEC",
			"VAESDECLAST",
			"VAESENC",
			"VAESENCLAST",
			"VAESIMC",
			"VAESKEYGENASSIST",
			"VALIGND",
			"VALIGNQ",
			"VANDNPD",
			"VANDNPS",
			"VANDPD",
			"VANDPS",
			"VBCSTNEBF162PS",
			"VBCSTNESH2PS",
			"VBLENDMPD",
			"VBLENDMPS",
			"VBLENDPD",
			"VBLENDPS",
			"VBLENDVPD",
			"VBLENDVPS",
			"VBROADCASTF128",
			"VBROADCASTF32X2",
			"VBROADCASTF32X4",
			"VBROADCASTF32X8",
			"VBROADCASTF64X2",
			"VBROADCASTF64X4",
			"VBROADCASTI128",
			"VBROADCASTI32X2",
			"VBROADCASTI32X4",
			"VBROADCASTI32X8",
			"VBROADCASTI64X2",
			"VBROADCASTI64X4",
			"VBROADCASTSD",
			"VBROADCASTSS",
			"VCMPPD",
			"VCMPPH",
			"VCMPPS",
			"VCMPSD",
			"VCMPSH",
			"VCMPSS",
			"VCOMISD",
			"VCOMISH",
			"VCOMISS",
			"VCOMPRESSPD",
			"VCOMPRESSPS",
			"VCVTDQ2PD",
			"VCVTDQ2PH",
			"VCVTDQ2PS",
			"VCVTNE2PS2BF16",
			"VCVTNEEBF162PS",
			"VCVTNEEPH2PS",
			"VCVTNEOBF162PS",
			"VCVTNEOPH2PS",
			"VCVTNEPS2BF16",
			"VCVTPD2DQ",
			"VCVTPD2PH",
			"VCVTPD2PS",
			"VCVTPD2QQ",
			"VCVTPD2UDQ",
			"VCVTPD2UQQ",
			"VCVTPH2DQ",
			"VCVTPH2PD",
			"VCVTPH2PS",
			"VCVTPH2PSX",
			"VCVTPH2QQ",
			"VCVTPH2UDQ",
			"VCVTPH2UQQ",
			"VCVTPH2UW",
			"VCVTPH2W",
			"VCVTPS2DQ",
			"VCVTPS2PD",
			"VCVTPS2PH",
			"VCVTPS2PHX",
			"VCVTPS2QQ",
			"VCVTPS2UDQ",
			"VCVTPS2UQQ",
			"VCVTQQ2PD",
			"VCVTQQ2PH",
			"VCVTQQ2PS",
			"VCVTSD2SH",
			"VCVTSD2SI",
			"VCVTSD2SS",
			"VCVTSD2USI",
			"VCVTSH2SD",
			"VCVTSH2SI",
			"VCVTSH2SS",
			"VCVTSH2USI",
			"VCVTSI2SD",
			"VCVTSI2SH",
			"VCVTSI2SS",
			"VCVTSS2SD",
			"VCVTSS2SH",
			"VCVTSS2SI",
			"VCVTSS2USI",
			"VCVTTPD2DQ",
			"VCVTTPD2QQ",
			"VCVTTPD2UDQ",
			"VCVTTPD2UQQ",
			"VCVTTPH2DQ",
			"VCVTTPH2QQ",
			"VCVTTPH2UDQ",
			"VCVTTPH2UQQ",
			"VCVTTPH2UW",
			"VCVTTPH2W",
			"VCVTTPS2DQ",
			"VCVTTPS2QQ",
			"VCVTTPS2UDQ",
			"VCVTTPS2UQQ",
			"VCVTTSD2SI",
			"VCVTTSD2USI",
			"VCVTTSH2SI",
			"VCVTTSH2USI",
			"VCVTTSS2SI",
			"VCVTTSS2USI",
			"VCVTUDQ2PD",
			"VCVTUDQ2PH",
			"VCVTUDQ2PS",
			"VCVTUQQ2PD",
			"VCVTUQQ2PH",
			"VCVTUQQ2PS",
			"VCVTUSI2SD",
			"VCVTUSI2SH",
			"VCVTUSI2SS",
			"VCVTUW2PH",
			"VCVTW2PH",
			"VDBPSADBW",
			"VDIVPD",
			"VDIVPH",
			"VDIVPS",
			"VDIVSD",
			"VDIVSH",
			"VDIVSS",
			"VDPBF16PS",
			"VDPPD",
			"VDPPS",
			"VERR",
			"VERW",
			"VEXP2PD",
			"VEXP2PS",
			"VEXPANDPD",
			"VEXPANDPS",
			"VEXTRACTF128",
			"VEXTRACTF32X4",
			"VEXTRACTF32X8",
			"VEXTRACTF64X2",
			"VEXTRACTF64X4",
			"VEXTRACTI128",
			"VEXTRACTI32X4",
			"VEXTRACTI32X8",
			"VEXTRACTI64X2",
			"VEXTRACTI64X4",
			"VEXTRACTPS",
			"VFCMADDCPH",
			"VFCMADDCSH",
			"VFCMULCPH",
			"VFCMULCSH",
			"VFIXUPIMMPD",
			"VFIXUPIMMPS",
			"VFIXUPIMMSD",
			"VFIXUPIMMSS",
			"VFMADD132PD",
			"VFMADD132PH",
			"VFMADD132PS",
			"VFMADD132SD",
			"VFMADD132SH",
			"VFMADD132SS",
			"VFMADD213PD",
			"VFMADD213PH",
			"VFMADD213PS",
			"VFMADD213SD",
			"VFMADD213SH",
			"VFMADD213SS",
			"VFMADD231PD",
			"VFMADD231PH",
			"VFMADD231PS",
			"VFMADD231SD",
			"VFMADD231SH",
			"VFMADD231SS",
			"VFMADDCPH",
			"VFMADDCSH",
			"VFMADDPD",
			"VFMADDPS",
			"VFMADDSD",
			"VFMADDSS",
			"VFMADDSUB132PD",
			"VFMADDSUB132PH",
			"VFMADDSUB132PS",
			"VFMADDSUB213PD",
			"VFMADDSUB213PH",
			"VFMADDSUB213PS",
			"VFMADDSUB231PD",
			"VFMADDSUB231PH",
			"VFMADDSUB231PS",
			"VFMADDSUBPD",
			"VFMADDSUBPS",
			"VFMSUB132PD",
			"VFMSUB132PH",
			"VFMSUB132PS",
			"VFMSUB132SD",
			"VFMSUB132SH",
			"VFMSUB132SS",
			"VFMSUB213PD",
			"VFMSUB213PH",
			"VFMSUB213PS",
			"VFMSUB213SD",
			"VFMSUB213SH",
			"VFMSUB213SS",
			"VFMSUB231PD",
			"VFMSUB231PH",
			"VFMSUB231PS",
			"VFMSUB231SD",
			"VFMSUB231SH",
			"VFMSUB231SS",
			"VFMSUBADD132PD",
			"VFMSUBADD132PH",
			"VFMSUBADD132PS",
			"VFMSUBADD213PD",
			"VFMSUBADD213PH",
			"VFMSUBADD213PS",
			"VFMSUBADD231PD",
			"VFMSUBADD231PH",
			"VFMSUBADD231PS",
			"VFMSUBADDPD",
			"VFMSUBADDPS",
			"VFMSUBPD",
			"VFMSUBPS",
			"VFMSUBSD",
			"VFMSUBSS",
			"VFMULCPH",
			"VFMULCSH",
			"VFNMADD132PD",
			"VFNMADD132PH",
			"VFNMADD132PS",
			"VFNMADD132SD",
			"VFNMADD132SH",
			"VFNMADD132SS",
			"VFNMADD213PD",
			"VFNMADD213PH",
			"VFNMADD213PS",
			"VFNMADD213SD",
			"VFNMADD213SH",
			"VFNMADD213SS",
			"VFNMADD231PD",
			"VFNMADD231PH",
			"VFNMADD231PS",
			"VFNMADD231SD",
			"VFNMADD231SH",
			"VFNMADD231SS",
			"VFNMADDPD",
			"VFNMADDPS",
			"VFNMADDSD",
			"VFNMADDSS",
			"VFNMSUB132PD",
			"VFNMSUB132PH",
			"VFNMSUB132PS",
			"VFNMSUB132SD",
			"VFNMSUB132SH",
			"VFNMSUB132SS",
			"VFNMSUB213PD",
			"VFNMSUB213PH",
			"VFNMSUB213PS",
			"VFNMSUB213SD",
			"VFNMSUB213SH",
			"VFNMSUB213SS",
			"VFNMSUB231PD",
			"VFNMSUB231PH",
			"VFNMSUB231PS",
			"VFNMSUB231SD",
			"VFNMSUB231SH",
			"VFNMSUB231SS",
			"VFNMSUBPD",
			"VFNMSUBPS",
			"VFNMSUBSD",
			"VFNMSUBSS",
			"VFPCLASSPD",
			"VFPCLASSPH",
			"VFPCLASSPS",
			"VFPCLASSSD",
			"VFPCLASSSH",
			"VFPCLASSSS",
			"VFRCZPD",
			"VFRCZPS",
			"VFRCZSD",
			"VFRCZSS",
			"VGATHERDPD",
			"VGATHERDPS",
			"VGATHERPF0DPD",
			"VGATHERPF0DPS",
			"VGATHERPF0QPD",
			"VGATHERPF0QPS",
			"VGATHERPF1DPD",
			"VGATHERPF1DPS",
			"VGATHERPF1QPD",
			"VGATHERPF1QPS",
			"VGATHERQPD",
			"VGATHERQPS",
			"VGETEXPPD",
			"VGETEXPPH",
			"VGETEXPPS",
			"VGETEXPSD",
			"VGETEXPSH",
			"VGETEXPSS",
			"VGETMANTPD",
			"VGETMANTPH",
			"VGETMANTPS",
			"VGETMANTSD",
			"VGETMANTSH",
			"VGETMANTSS",
			"VGF2P8AFFINEINVQB",
			"VGF2P8AFFINEQB",
			"VGF2P8MULB",
			"VHADDPD",
			"VHADDPS",
			"VHSUBPD",
			"VHSUBPS",
			"VINSERTF128",
			"VINSERTF32X4",
			"VINSERTF32X8",
			"VINSERTF64X2",
			"VINSERTF64X4",
			"VINSERTI128",
			"VINSERTI32X4",
			"VINSERTI32X8",
			"VINSERTI64X2",
			"VINSERTI64X4",
			"VINSERTPS",
			"VLDDQU",
			"VLDMXCSR",
			"VMASKMOVDQU",
			"VMASKMOVPD",
			"VMASKMOVPS",
			"VMAXPD",
			"VMAXPH",
			"VMAXPS",
			"VMAXSD",
			"VMAXSH",
			"VMAXSS",
			"VMCALL",
			"VMCLEAR",
			"VMFUNC",
			"VMGEXIT",
			"VMINPD",
			"VMINPH",
			"VMINPS",
			"VMINSD",
			"VMINSH",
			"VMINSS",
			"VMLAUNCH",
			"VMLOAD",
			"VMMCALL",
			"VMOVAPD",
			"VMOVAPS",
			"VMOVD",
			"VMOVDDUP",
			"VMOVDQA",
			"VMOVDQA32",
			"VMOVDQA64",
			"VMOVDQU",
			"VMOVDQU16",
			"VMOVDQU32",
			"VMOVDQU64",
			"VMOVDQU8",
			"VMOVHLPS",
			"VMOVHPD",
			"VMOVHPS",
			"VMOVLHPS",
			"VMOVLPD",
			"VMOVLPS",
			"VMOVMSKPD",
			"VMOVMSKPS",
			"VMOVNTDQ",
			"VMOVNTDQA",
			"VMOVNTPD",
			"VMOVNTPS",
			"VMOVQ",
			"VMOVSD",
			"VMOVSH",
			"VMOVSHDUP",
			"VMOVSLDUP",
			"VMOVSS",
			"VMOVUPD",
			"VMOVUPS",
			"VMOVW",
			"VMPSADBW",
			"VMPTRLD",
			"VMPTRST",
			"VMREAD",
			"VMRESUME",
			"VMRUN",
			"VMSAVE",
			"VMULPD",
			"VMULPH",
			"VMULPS",
			"VMULSD",
			"VMULSH",
			"VMULSS",
			"VMWRITE",
			"VMXOFF",
			"VMXON",
			"VORPD",
			"VORPS",
			"VP2INTERSECTD",
			"VP2INTERSECTQ",
			"VP4DPWSSD",
			"VP4DPWSSDS",
			"VPABSB",
			"VPABSD",
			"VPABSQ",
			"VPABSW",
			"VPACKSSDW",
			"VPACKSSWB",
			"VPACKUSDW",
			"VPACKUSWB",
			"VPADDB",
			"VPADDD",
			"VPADDQ",
			"VPADDSB",
			"VPADDSW",
			"VPADDUSB",
			"VPADDUSW",
			"VPADDW",
			"VPALIGNR",
			"VPAND",
			"VPANDD",
			"VPANDN",
			"VPANDND",
			"VPANDNQ",
			"VPANDQ",
			"VPAVGB",
			"VPAVGW",
			"VPBLENDD",
			"VPBLENDMB",
			"VPBLENDMD",
			"VPBLENDMQ",
			"VPBLENDMW",
			"VPBLENDVB",
			"VPBLENDW",
			"VPBROADCASTB",
			"VPBROADCASTD",
			"VPBROADCASTMB2Q",
			"VPBROADCASTMW2D",
			"VPBROADCASTQ",
			"VPBROADCASTW",
			"VPCLMULQDQ",
			"VPCMOV",
			"VPCMPB",
			"VPCMPD",
			"VPCMPEQB",
			"VPCMPEQD",
			"VPCMPEQQ",
			"VPCMPEQW",
			"VPCMPESTRI",
			"VPCMPESTRM",
			"VPCMPGTB",
			"VPCMPGTD",
			"VPCMPGTQ",
			"VPCMPGTW",
			"VPCMPISTRI",
			"VPCMPISTRM",
			"VPCMPQ",
			"VPCMPUB",
			"VPCMPUD",
			"VPCMPUQ",
			"VPCMPUW",
			"VPCMPW",
			"VPCOMB",
			"VPCOMD",
			"VPCOMPRESSB",
			"VPCOMPRESSD",
			"VPCOMPRESSQ",
			"VPCOMPRESSW",
			"VPCOMQ",
			"VPCOMUB",
			"VPCOMUD",
			"VPCOMUQ",
			"VPCOMUW",
			"VPCOMW",
			"VPCONFLICTD",
			"VPCONFLICTQ",
			"VPDPBSSD",
			"VPDPBSSDS",
			"VPDPBSUD",
			"VPDPBSUDS",
			"VPDPBUSD",
			"VPDPBUSDS",
			"VPDPBUUD",
			"VPDPBUUDS",
			"VPDPWSSD",
			"VPDPWSSDS",
			"VPDPWSUD",
			"VPDPWSUDS",
			"VPDPWUSD",
			"VPDPWUSDS",
			"VPDPWUUD",
			"VPDPWUUDS",
			"VPERM2F128",
			"VPERM2I128",
			"VPERMB",
			"VPERMD",
			"VPERMI2B",
			"VPERMI2D",
			"VPERMI2PD",
			"VPERMI2PS",
			"VPERMI2Q",
			"VPERMI2W",
			"VPERMIL2PD",
			"VPERMIL2PS",
			"VPERMILPD",
			"VPERMILPS",
			"VPERMPD",
			"VPERMPS",
			"VPERMQ",
			"VPERMT2B",
			"VPERMT2D",
			"VPERMT2PD",
			"VPERMT2PS",
			"VPERMT2Q",
			"VPERMT2W",
			"VPERMW",
			"VPEXPANDB",
			"VPEXPANDD",
			"VPEXPANDQ",
			"VPEXPANDW",
			"VPEXTRB",
			"VPEXTRD",
			"VPEXTRQ",
			"VPEXTRW",
			"VPGATHERDD",
			"VPGATHERDQ",
			"VPGATHERQD",
			"VPGATHERQQ",
			"VPHADDBD",
			"VPHADDBQ",
			"VPHADDBW",
			"VPHADDD",
			"VPHADDDQ",
			"VPHADDSW",
			"VPHADDUBD",
			"VPHADDUBQ",
			"VPHADDUBW",
			"VPHADDUDQ",
			"VPHADDUWD",
			"VPHADDUWQ",
			"VPHADDW",
			"VPHADDWD",
			"VPHADDWQ",
			"VPHMINPOSUW",
			"VPHSUBBW",
			"VPHSUBD",
			"VPHSUBDQ",
			"VPHSUBSW",
			"VPHSUBW",
			"VPHSUBWD",
			"VPINSRB",
			"VPINSRD",
			"VPINSRQ",
			"VPINSRW",
			"VPLZCNTD",
			"VPLZCNTQ",
			"VPMACSDD",
			"VPMACSDQH",
			"VPMACSDQL",
			"VPMACSSDD",
			"VPMACSSDQH",
			"VPMACSSDQL",
			"VPMACSSWD",
			"VPMACSSWW",
			"VPMACSWD",
			"VPMACSWW",
			"VPMADCSSWD",
			"VPMADCSWD",
			"VPMADD52HUQ",
			"VPMADD52LUQ",
			"VPMADDUBSW",
			"VPMADDWD",
			"VPMASKMOVD",
			"VPMASKMOVQ",
			"VPMAXSB",
			"VPMAXSD",
			"VPMAXSQ",
			"VPMAXSW",
			"VPMAXUB",
			"VPMAXUD",
			"VPMAXUQ",
			"VPMAXUW",
			"VPMINSB",
			"VPMINSD",
			"VPMINSQ",
			"VPMINSW",
			"VPMINUB",
			"VPMINUD",
			"VPMINUQ",
			"VPMINUW",
			"VPMOVB2M",
			"VPMOVD2M",
			"VPMOVDB",
			"VPMOVDW",
			"VPMOVM2B",
			"VPMOVM2D",
			"VPMOVM2Q",
			"VPMOVM2W",
			"VPMOVMSKB",
			"VPMOVQ2M",
			"VPMOVQB",
			"VPMOVQD",
			"VPMOVQW",
			"VPMOVSDB",
			"VPMOVSDW",
			"VPMOVSQB",
			"VPMOVSQD",
			"VPMOVSQW",
			"VPMOVSWB",
			"VPMOVSXBD",
			"VPMOVSXBQ",
			"VPMOVSXBW",
			"VPMOVSXDQ",
			"VPMOVSXWD",
			"VPMOVSXWQ",
			"VPMOVUSDB",
			"VPMOVUSDW",
			"VPMOVUSQB",
			"VPMOVUSQD",
			"VPMOVUSQW",
			"VPMOVUSWB",
			"VPMOVW2M",
			"VPMOVWB",
			"VPMOVZXBD",
			"VPMOVZXBQ",
			"VPMOVZXBW",
			"VPMOVZXDQ",
			"VPMOVZXWD",
			"VPMOVZXWQ",
			"VPMULDQ",
			"VPMULHRSW",
			"VPMULHUW",
			"VPMULHW",
			"VPMULLD",
			"VPMULLQ",
			"VPMULLW",
			"VPMULTISHIFTQB",
			"VPMULUDQ",
			"VPOPCNTB",
			"VPOPCNTD",
			"VPOPCNTQ",
			"VPOPCNTW",
			"VPOR",
			"VPORD",
			"VPORQ",
			"VPPERM",
			"VPROLD",
			"VPROLQ",
			"VPROLVD",
			"VPROLVQ",
			"VPRORD",
			"VPRORQ",
			"VPRORVD",
			"VPRORVQ",
			"VPROTB",
			"VPROTD",
			"VPROTQ",
			"VPROTW",
			"VPSADBW",
			"VPSCATTERDD",
			"VPSCATTERDQ",
			"VPSCATTERQD",
			"VPSCATTERQQ",
			"VPSHAB",
			"VPSHAD",
			"VPSHAQ",
			"VPSHAW",
			"VPSHLB",
			"VPSHLD",
			"VPSHLDD",
			"VPSHLDQ",
			"VPSHLDVD",
			"VPSHLDVQ",
			"VPSHLDVW",
			"VPSHLDW",
			"VPSHLQ",
			"VPSHLW",
			"VPSHRDD",
			"VPSHRDQ",
			"VPSHRDVD",
			"VPSHRDVQ",
			"VPSHRDVW",
			"VPSHRDW",
			"VPSHUFB",
			"VPSHUFBITQMB",
			"VPSHUFD",
			"VPSHUFHW",
			"VPSHUFLW",
			"VPSIGNB",
			"VPSIGND",
			"VPSIGNW",
			"VPSLLD",
			"VPSLLDQ",
			"VPSLLQ",
			"VPSLLVD",
			"VPSLLVQ",
			"VPSLLVW",
			"VPSLLW",
			"VPSRAD",
			"VPSRAQ",
			"VPSRAVD",
			"VPSRAVQ",
			"VPSRAVW",
			"VPSRAW",
			"VPSRLD",
			"VPSRLDQ",
			"VPSRLQ",
			"VPSRLVD",
			"VPSRLVQ",
			"VPSRLVW",
			"VPSRLW",
			"VPSUBB",
			"VPSUBD",
			"VPSUBQ",
			"VPSUBSB",
			"VPSUBSW",
			"VPSUBUSB",
			"VPSUBUSW",
			"VPSUBW",
			"VPTERNLOGD",
			"VPTERNLOGQ",
			"VPTEST",
			"VPTESTMB",
			"VPTESTMD",
			"VPTESTMQ",
			"VPTESTMW",
			"VPTESTNMB",
			"VPTESTNMD",
			"VPTESTNMQ",
			"VPTESTNMW",
			"VPUNPCKHBW",
			"VPUNPCKHDQ",
			"VPUNPCKHQDQ",
			"VPUNPCKHWD",
			"VPUNPCKLBW",
			"VPUNPCKLDQ",
			"VPUNPCKLQDQ",
			"VPUNPCKLWD",
			"VPXOR",
			"VPXORD",
			"VPXORQ",
			"VRANGEPD",
			"VRANGEPS",
			"VRANGESD",
			"VRANGESS",
			"VRCP14PD",
			"VRCP14PS",
			"VRCP14SD",
			"VRCP14SS",
			"VRCP28PD",
			"VRCP28PS",
			"VRCP28SD",
			"VRCP28SS",
			"VRCPPH",
			"VRCPPS",
			"VRCPSH",
			"VRCPSS",
			"VREDUCEPD",
			"VREDUCEPH",
			"VREDUCEPS",
			"VREDUCESD",
			"VREDUCESH",
			"VREDUCESS",
			"VRNDSCALEPD",
			"VRNDSCALEPH",
			"VRNDSCALEPS",
			"VRNDSCALESD",
			"VRNDSCALESH",
			"VRNDSCALESS",
			"VROUNDPD",
			"VROUNDPS",
			"VROUNDSD",
			"VROUNDSS",
			"VRSQRT14PD",
			"VRSQRT14PS",
			"VRSQRT14SD",
			"VRSQRT14SS",
			"VRSQRT28PD",
			"VRSQRT28PS",
			"VRSQRT28SD",
			"VRSQRT28SS",
			"VRSQRTPH",
			"VRSQRTPS",
			"VRSQRTSH",
			"VRSQRTSS",
			"VSCALEFPD",
			"VSCALEFPH",
			"VSCALEFPS",
			"VSCALEFSD",
			"VSCALEFSH",
			"VSCALEFSS",
			"VSCATTERDPD",
			"VSCATTERDPS",
			"VSCATTERPF0DPD",
			"VSCATTERPF0DPS",
			"VSCATTERPF0QPD",
			"VSCATTERPF0QPS",
			"VSCATTERPF1DPD",
			"VSCATTERPF1DPS",
			"VSCATTERPF1QPD",
			"VSCATTERPF1QPS",
			"VSCATTERQPD",
			"VSCATTERQPS",
			"VSHA512MSG1",
			"VSHA512MSG2",
			"VSHA512RNDS2",
			"VSHUFF32X4",
			"VSHUFF64X2",
			"VSHUFI32X4",
			"VSHUFI64X2",
			"VSHUFPD",
			"VSHUFPS",
			"VSM3MSG1",
			"VSM3MSG2",
			"VSM3RNDS2",
			"VSM4KEY4",
			"VSM4RNDS4",
			"VSQRTPD",
			"VSQRTPH",
			"VSQRTPS",
			"VSQRTSD",
			"VSQRTSH",
			"VSQRTSS",
			"VSTMXCSR",
			"VSUBPD",
			"VSUBPH",
			"VSUBPS",
			"VSUBSD",
			"VSUBSH",
			"VSUBSS",
			"VTESTPD",
			"VTESTPS",
			"VUCOMISD",
			"VUCOMISH",
			"VUCOMISS",
			"VUNPCKHPD",
			"VUNPCKHPS",
			"VUNPCKLPD",
			"VUNPCKLPS",
			"VXORPD",
			"VXORPS",
			"VZEROALL",
			"VZEROUPPER",
			"WAIT",
			"WBINVD",
			"WBNOINVD",
			"WRFSBASE",
			"WRGSBASE",
			"WRMSR",
			"WRMSRLIST",
			"WRMSRNS",
			"WRPKRU",
			"WRSHR",
			"WRSSD",
			"WRSSQ",
			"WRUSSD",
			"WRUSSQ",
			"XABORT",
			"XADD",
			"XBEGIN",
			"XCHG",
			"XCRYPTCBC",
			"XCRYPTCFB",
			"XCRYPTCTR",
			"XCRYPTECB",
			"XCRYPTOFB",
			"XEND",
			"XGETBV",
			"XLATB",
			"XOR",
			"XORPD",
			"XORPS",
			"XRESLDTRK",
			"XRSTOR",
			"XRSTOR64",
			"XRSTORS",
			"XRSTORS64",
			"XSAVE",
			"XSAVE64",
			"XSAVEC",
			"XSAVEC64",
			"XSAVEOPT",
			"XSAVEOPT64",
			"XSAVES",
			"XSAVES64",
			"XSETBV",
			"XSHA1",
			"XSHA256",
			"XSTORE",
			"XSUSLDTRK",
			"XTEST"
		};

		static const unsigned short g_pOperandMap[105] = {
			RD_OPE_D,
			RD_OPE_V,
			RD_OPE_R,
			RD_OPE_R,
			RD_OPE_M,
			RD_OPE_S,
			RD_OPE_R,
			RD_OPE_V,
			RD_OPE_I,
			RD_OPE_D,
			RD_OPE_S,
			RD_OPE_L,
			RD_OPE_M,
			RD_OPE_M,
			RD_OPE_D,
			RD_OPE_R,
			RD_OPE_M,
			RD_OPE_M,
			RD_OPE_R,
			RD_OPE_R,
			RD_OPE_M,
			RD_OPE_R,
			RD_OPE_M,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_O,
			RD_OPE_R,
			RD_OPE_M,
			RD_OPE_R,
			RD_OPE_V,
			RD_OPE_M,
			RD_OPE_A,
			RD_OPE_R,
			RD_OPE_M,
			RD_OPE_R,
			RD_OPE_M,
			RD_OPE_V,
			RD_OPE_1,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_M,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_L,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_E,
			RD_OPE_E,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S,
			RD_OPE_S
		};

		static const unsigned char g_pDispSizeMap16[4][8] = {
			{ 0, 0, 0, 0, 0, 0, 2, 0 },
			{ 1, 1, 1, 1, 1, 1, 1, 1 },
			{ 2, 2, 2, 2, 2, 2, 2, 2 },
			{ 0, 0, 0, 0, 0, 0, 0, 0 }
		};

		static const unsigned char g_pDispSizeMap[4][8] = {
			{ 0, 0, 0, 0, 0, 4, 0, 0 },
			{ 1, 1, 1, 1, 1, 1, 1, 1 },
			{ 4, 4, 4, 4, 4, 4, 4, 4 },
			{ 0, 0, 0, 0, 0, 0, 0, 0 }
		};

		static unsigned int RdFetchXop(PINSTRUCTION pInstruction, unsigned char* pCode, unsigned char unOffset, size_t unSize) {
			RET_GT(static_cast<size_t>(unOffset) + 2, unSize, RD_STATUS_BUFFER_TOO_SMALL);

			if ((pCode[unOffset + 1] & 0x1F) >= 8) {
				RET_GT(static_cast<size_t>(unOffset) + 3, unSize, RD_STATUS_BUFFER_TOO_SMALL);

				if (pInstruction->HasOpSize || pInstruction->HasRepnzXacquireBnd || pInstruction->HasRepRepzXrelease || pInstruction->HasRex) {
					return RD_STATUS_XOP_WITH_PREFIX;
				}

				pInstruction->HasXop = true;
				pInstruction->EncMode = RD_ENCM_XOP;

				pInstruction->Xop.Xop[0] = pCode[unOffset];
				pInstruction->Xop.Xop[1] = pCode[unOffset + 1];
				pInstruction->Xop.Xop[2] = pCode[unOffset + 2];

				pInstruction->Exs.w = pInstruction->Xop.w;
				pInstruction->Exs.r = ~pInstruction->Xop.r;
				pInstruction->Exs.x = ~pInstruction->Xop.x;
				pInstruction->Exs.b = ~pInstruction->Xop.b;
				pInstruction->Exs.l = pInstruction->Xop.l;
				pInstruction->Exs.v = ~pInstruction->Xop.v;
				pInstruction->Exs.m = pInstruction->Xop.m;
				pInstruction->Exs.p = pInstruction->Xop.p;

				if (pInstruction->DefCode != RD_CODE_64) {
					if ((pInstruction->Exs.r | pInstruction->Exs.x) == 1) {
						return RD_STATUS_INVALID_ENCODING_IN_MODE;
					}

					if ((pInstruction->Exs.v & 0x8) == 0x8) {
						return RD_STATUS_INVALID_ENCODING_IN_MODE;
					}

					pInstruction->Exs.b = 0;
				}

				pInstruction->Length += 3;
				if (pInstruction->Length > RD_MAX_INSTRUCTION_LENGTH) {
					return RD_STATUS_INSTRUCTION_TOO_LONG;
				}
			}

			return RD_STATUS_SUCCESS;
		}

		static unsigned int RdFetchVex2(PINSTRUCTION pInstruction, unsigned char* pCode, unsigned char unOffset, size_t unSize) {
			RET_GT(static_cast<size_t>(unOffset) + 2, unSize, RD_STATUS_BUFFER_TOO_SMALL);

			if ((pInstruction->DefCode == RD_CODE_64) || ((pCode[unOffset + 1] & 0xC0) == 0xC0)) {
				if (pInstruction->HasOpSize || pInstruction->HasRepnzXacquireBnd || pInstruction->HasRepRepzXrelease || pInstruction->HasRex || pInstruction->HasLock) {
					return RD_STATUS_VEX_WITH_PREFIX;
				}

				pInstruction->VexMode = RD_VEXM_2B;
				pInstruction->HasVex = true;
				pInstruction->EncMode = RD_ENCM_VEX;

				pInstruction->Vex2.Vex[0] = pCode[unOffset];
				pInstruction->Vex2.Vex[1] = pCode[unOffset + 1];

				pInstruction->Exs.m = 1;
				pInstruction->Exs.r = ~pInstruction->Vex2.r;
				pInstruction->Exs.v = ~pInstruction->Vex2.v;
				pInstruction->Exs.l = pInstruction->Vex2.l;
				pInstruction->Exs.p = pInstruction->Vex2.p;

				pInstruction->Length += 2;
				if (pInstruction->Length > RD_MAX_INSTRUCTION_LENGTH) {
					return RD_STATUS_INSTRUCTION_TOO_LONG;
				}
			}

			return RD_STATUS_SUCCESS;
		}

		static unsigned int RdFetchVex3(PINSTRUCTION pInstruction, unsigned char* pCode, unsigned char unOffset, size_t unSize) {
			RET_GT(static_cast<size_t>(unOffset) + 2, unSize, RD_STATUS_BUFFER_TOO_SMALL);

			if ((pInstruction->DefCode == RD_CODE_64) || ((pCode[unOffset + 1] & 0xC0) == 0xC0)) {
				RET_GT(static_cast<size_t>(unOffset) + 3, unSize, RD_STATUS_BUFFER_TOO_SMALL);

				if (pInstruction->HasOpSize || pInstruction->HasRepnzXacquireBnd || pInstruction->HasRepRepzXrelease || pInstruction->HasRex || pInstruction->HasLock) {
					return RD_STATUS_VEX_WITH_PREFIX;
				}

				pInstruction->VexMode = RD_VEXM_3B;
				pInstruction->HasVex = true;
				pInstruction->EncMode = RD_ENCM_VEX;

				pInstruction->Vex3.Vex[0] = pCode[unOffset];
				pInstruction->Vex3.Vex[1] = pCode[unOffset + 1];
				pInstruction->Vex3.Vex[2] = pCode[unOffset + 2];

				pInstruction->Exs.r = ~pInstruction->Vex3.r;
				pInstruction->Exs.x = ~pInstruction->Vex3.x;
				pInstruction->Exs.b = ~pInstruction->Vex3.b;
				pInstruction->Exs.m = pInstruction->Vex3.m;
				pInstruction->Exs.w = pInstruction->Vex3.w;
				pInstruction->Exs.v = ~pInstruction->Vex3.v;
				pInstruction->Exs.l = pInstruction->Vex3.l;
				pInstruction->Exs.p = pInstruction->Vex3.p;

				if (pInstruction->DefCode != RD_CODE_64) {
					pInstruction->Exs.v &= 7;
					pInstruction->Exs.b = 0;
				}

				pInstruction->Length += 3;
				if (pInstruction->Length > RD_MAX_INSTRUCTION_LENGTH) {
					return RD_STATUS_INSTRUCTION_TOO_LONG;
				}
			}

			return RD_STATUS_SUCCESS;
		}

		static unsigned int RdFetchEvex(PINSTRUCTION pInstruction, unsigned char* pCode, unsigned char unOffset, size_t unSize) {
			RET_GT(static_cast<size_t>(unOffset) + 2, unSize, RD_STATUS_BUFFER_TOO_SMALL);

			if ((pInstruction->DefCode != RD_CODE_64) && ((pCode[unOffset + 1] & 0xC0) != 0xC0)) {
				return RD_STATUS_SUCCESS;
			}

			RET_GT(static_cast<size_t>(unOffset) + 4, unSize, RD_STATUS_BUFFER_TOO_SMALL);

			pInstruction->HasEvex = true;
			pInstruction->EncMode = RD_ENCM_EVEX;

			pInstruction->Evex.Evex[0] = pCode[unOffset];
			pInstruction->Evex.Evex[1] = pCode[unOffset + 1];
			pInstruction->Evex.Evex[2] = pCode[unOffset + 2];
			pInstruction->Evex.Evex[3] = pCode[unOffset + 3];

			if (pInstruction->HasOpSize || pInstruction->HasRepnzXacquireBnd || pInstruction->HasRepRepzXrelease || pInstruction->HasRex) {
				return RD_STATUS_EVEX_WITH_PREFIX;
			}

			if ((pInstruction->Evex.zero != 0) || (pInstruction->Evex.one != 1) || (pInstruction->Evex.m == 0)) {
				return RD_STATUS_INVALID_ENCODING;
			}

			pInstruction->Exs.r = ~pInstruction->Evex.r;
			pInstruction->Exs.x = ~pInstruction->Evex.x;
			pInstruction->Exs.b = ~pInstruction->Evex.b;
			pInstruction->Exs.rp = ~pInstruction->Evex.rp;
			pInstruction->Exs.m = pInstruction->Evex.m;
			pInstruction->Exs.w = pInstruction->Evex.w;
			pInstruction->Exs.v = ~pInstruction->Evex.v;
			pInstruction->Exs.vp = ~pInstruction->Evex.vp;
			pInstruction->Exs.p = pInstruction->Evex.p;
			pInstruction->Exs.z = pInstruction->Evex.z;
			pInstruction->Exs.l = pInstruction->Evex.l;
			pInstruction->Exs.bm = pInstruction->Evex.bm;
			pInstruction->Exs.k = pInstruction->Evex.a;

			if (pInstruction->DefCode != RD_CODE_64) {
				pInstruction->Exs.r = 0;
				pInstruction->Exs.x = 0;
				pInstruction->Exs.b = 0;
				pInstruction->Exs.rp = 0;
				pInstruction->Exs.v &= 0x7;

				//if (pInstruction->Exs.vp == 1) {
				//	return RD_STATUS_BAD_EVEX_V_PRIME;
				//}
			}

			pInstruction->Length += 4;
			if (pInstruction->Length > RD_MAX_INSTRUCTION_LENGTH) {
				return RD_STATUS_INSTRUCTION_TOO_LONG;
			}

			return RD_STATUS_SUCCESS;
		}

		static unsigned int RdFetchPrefixes(PINSTRUCTION pInstruction, unsigned char* pCode, unsigned char unOffset, size_t unSize) {
			unsigned int unStatus = RD_STATUS_SUCCESS;
			bool bMorePrefixes = true;
			while (bMorePrefixes) {
				bMorePrefixes = false;

				RET_GT(static_cast<size_t>(unOffset) + 1, unSize, RD_STATUS_BUFFER_TOO_SMALL);

				const unsigned char unPrefix = pCode[unOffset];

				if (g_pPrefixesMap[unPrefix] == RD_PREF_CODE_NONE) {
					goto DonePrefixes;
				}

				if (g_pPrefixesMap[unPrefix] == RD_PREF_CODE_STANDARD) {
					switch (unPrefix) {
						case RD_PREFIX_G0_LOCK:
							pInstruction->HasLock = true;
							bMorePrefixes = true;
							break;
						case RD_PREFIX_G1_REPE_REPZ:
							pInstruction->Rep = RD_PREFIX_G1_REPE_REPZ;
							pInstruction->HasRepRepzXrelease = true;
							bMorePrefixes = true;
							break;
						case RD_PREFIX_G1_REPNE_REPNZ:
							pInstruction->Rep = RD_PREFIX_G1_REPNE_REPNZ;
							pInstruction->HasRepnzXacquireBnd = true;
							bMorePrefixes = true;
							break;
						case RD_PREFIX_G2_SEG_CS:
						case RD_PREFIX_G2_SEG_SS:
						case RD_PREFIX_G2_SEG_DS:
						case RD_PREFIX_G2_SEG_ES:
						case RD_PREFIX_G2_SEG_FS:
						case RD_PREFIX_G2_SEG_GS:
							if (pInstruction->DefCode == RD_CODE_64) {
								if ((unPrefix == RD_PREFIX_G2_SEG_FS) || (unPrefix == RD_PREFIX_G2_SEG_GS)) {
									pInstruction->Seg = unPrefix;
									pInstruction->HasSeg = true;
								} else if ((unPrefix == RD_PREFIX_G2_NO_TRACK) && (pInstruction->Seg != RD_PREFIX_G2_SEG_FS) && (pInstruction->Seg != RD_PREFIX_G2_SEG_GS)) {
									pInstruction->Seg = unPrefix;
									pInstruction->HasSeg = true;
								} else if ((pInstruction->Seg != RD_PREFIX_G2_SEG_FS) && (pInstruction->Seg != RD_PREFIX_G2_SEG_GS) && (pInstruction->Seg != RD_PREFIX_G2_NO_TRACK)) {
									pInstruction->Seg = unPrefix;
									pInstruction->HasSeg = true;
								}
							} else {
								pInstruction->Seg = unPrefix;
								pInstruction->HasSeg = true;
							}
							bMorePrefixes = true;
							break;
						case RD_PREFIX_G3_OPERARD_SIZE:
							pInstruction->HasOpSize = true;
							bMorePrefixes = true;
							break;
						case RD_PREFIX_G4_ADDR_SIZE:
							pInstruction->HasAddrSize = true;
							bMorePrefixes = true;
							break;
						default:
							break;
					}
				}

				if (bMorePrefixes && pInstruction->HasRex) {
					pInstruction->HasRex = false;
					pInstruction->Rex.Rex = 0;

					pInstruction->Exs.w = 0;
					pInstruction->Exs.r = 0;
					pInstruction->Exs.x = 0;
					pInstruction->Exs.b = 0;
				}

				if ((pInstruction->DefCode == RD_CODE_64) && (g_pPrefixesMap[unPrefix] == RD_PREF_CODE_REX)) {
					pInstruction->HasRex = true;
					pInstruction->Rex.Rex = unPrefix;

					pInstruction->Exs.w = pInstruction->Rex.w;
					pInstruction->Exs.r = pInstruction->Rex.r;
					pInstruction->Exs.x = pInstruction->Rex.x;
					pInstruction->Exs.b = pInstruction->Rex.b;
					bMorePrefixes = true;
				}

				if (bMorePrefixes) {
					++unOffset;
					++pInstruction->Length;
					if (pInstruction->Length > RD_MAX_INSTRUCTION_LENGTH) {
						return RD_STATUS_INSTRUCTION_TOO_LONG;
					}
				}
			}

			RET_GT(static_cast<size_t>(unOffset) + 1, unSize, RD_STATUS_BUFFER_TOO_SMALL);

			if (g_pPrefixesMap[pCode[unOffset]] == RD_PREF_CODE_EX) {
				if (pCode[unOffset] == RD_PREFIX_XOP) {
					unStatus = RdFetchXop(pInstruction, pCode, unOffset, unSize);
					if (!RD_SUCCESS(unStatus)) {
						return unStatus;
					}
				} else if (pCode[unOffset] == RD_PREFIX_VEX_2B) {
					unStatus = RdFetchVex2(pInstruction, pCode, unOffset, unSize);
					if (!RD_SUCCESS(unStatus)) {
						return unStatus;
					}
				} else if (pCode[unOffset] == RD_PREFIX_VEX_3B) {
					unStatus = RdFetchVex3(pInstruction, pCode, unOffset, unSize);
					if (!RD_SUCCESS(unStatus)) {
						return unStatus;
					}
				} else if (pCode[unOffset] == RD_PREFIX_EVEX) {
					unStatus = RdFetchEvex(pInstruction, pCode, unOffset, unSize);
					if (!RD_SUCCESS(unStatus)) {
						return unStatus;
					}
				} else {
					return RD_STATUS_INVALID_INSTRUX;
				}
			} else {
				pInstruction->EncMode = RD_ENCM_LEGACY;
			}

		DonePrefixes:
			pInstruction->PrefLength = pInstruction->OpOffset = pInstruction->Length;
			return RD_STATUS_SUCCESS;
		}

		static unsigned int RdGetAddrAndOpMode(PINSTRUCTION pInstruction) {
			switch (pInstruction->DefCode) {
				case RD_CODE_16:
					pInstruction->AddrMode = pInstruction->HasAddrSize ? RD_ADDR_32 : RD_ADDR_16;
					pInstruction->OpMode = pInstruction->HasOpSize ? RD_OPSZ_32 : RD_OPSZ_16;
					break;
				case RD_CODE_32:
					pInstruction->AddrMode = pInstruction->HasAddrSize ? RD_ADDR_16 : RD_ADDR_32;
					pInstruction->OpMode = pInstruction->HasOpSize ? RD_OPSZ_16 : RD_OPSZ_32;
					break;
				case RD_CODE_64:
					pInstruction->AddrMode = pInstruction->HasAddrSize ? RD_ADDR_32 : RD_ADDR_64;
					pInstruction->OpMode = pInstruction->Exs.w ? RD_OPSZ_64 : (pInstruction->HasOpSize ? RD_OPSZ_16 : RD_OPSZ_32);
					break;
				default:
					return RD_STATUS_INVALID_INSTRUX;
			}

			return RD_STATUS_SUCCESS;
		}

		static unsigned int RdFetchOpcode(PINSTRUCTION pInstruction, unsigned char* pCode, unsigned char unOffset, size_t unSize) {
			RET_GT(static_cast<size_t>(unOffset) + 1, unSize, RD_STATUS_BUFFER_TOO_SMALL);

			pInstruction->OpCodeBytes[pInstruction->OpLength++] = pCode[unOffset];

			++pInstruction->Length;
			if (pInstruction->Length > RD_MAX_INSTRUCTION_LENGTH) {
				return RD_STATUS_INSTRUCTION_TOO_LONG;
			}

			return RD_STATUS_SUCCESS;
		}

		static unsigned int RdFetchModrmAndSib(PINSTRUCTION pInstruction, unsigned char* pCode, unsigned char unOffset, size_t unSize) {
			RET_GT(static_cast<size_t>(unOffset) + 1, unSize, RD_STATUS_BUFFER_TOO_SMALL);

			pInstruction->HasModRm = true;

			pInstruction->ModRm.ModRm = pCode[unOffset];
			pInstruction->ModRmOffset = unOffset;

			++unOffset;
			++pInstruction->Length;
			if (pInstruction->Length > RD_MAX_INSTRUCTION_LENGTH) {
				return RD_STATUS_INSTRUCTION_TOO_LONG;
			}

			if ((pInstruction->ModRm.rm == RDR_RSP) && (pInstruction->ModRm.mod != 3) && (pInstruction->AddrMode != RD_ADDR_16)) {
				RET_GT(static_cast<size_t>(unOffset) + 1, unSize, RD_STATUS_BUFFER_TOO_SMALL);

				pInstruction->HasSib = true;

				pInstruction->Sib.Sib = pCode[unOffset];

				++pInstruction->Length;
				if (pInstruction->Length > RD_MAX_INSTRUCTION_LENGTH) {
					return RD_STATUS_INSTRUCTION_TOO_LONG;
				}
			}

			return RD_STATUS_SUCCESS;
		}

		static unsigned long long RdFetchData(unsigned char* pBuffer, unsigned char unSize) {
			return (4 == unSize) ? RD_FETCH_32(pBuffer)
				 : (1 == unSize) ? RD_FETCH_8(pBuffer)
				 : (8 == unSize) ? RD_FETCH_64(pBuffer)
				 : (2 == unSize) ? RD_FETCH_16(pBuffer)
								 : 0;
		}

		static unsigned int RdFetchDisplacement(PINSTRUCTION pInstruction, unsigned char* pCode, unsigned char unOffset, size_t unSize) {
			unsigned char unDispSize = 0;

			if (pInstruction->AddrMode == RD_ADDR_16) {
				unDispSize = g_pDispSizeMap16[pInstruction->ModRm.mod][pInstruction->ModRm.rm];
			} else {
				unDispSize = g_pDispSizeMap[pInstruction->ModRm.mod][pInstruction->HasSib ? pInstruction->Sib.base : pInstruction->ModRm.rm];
			}

			if (unDispSize) {
				static const unsigned int pSignMask[4] = { 0x80, 0x8000, 0, 0x80000000 };

				RET_GT(static_cast<size_t>(unOffset) + unDispSize, unSize, RD_STATUS_BUFFER_TOO_SMALL);

				pInstruction->HasDisp = true;

				pInstruction->Displacement = static_cast<unsigned int>(RdFetchData(pCode + unOffset, unDispSize) & 0xFFFFFFFF);
				pInstruction->SignDisp = (pInstruction->Displacement & pSignMask[unDispSize - 1]) ? true : false;

				pInstruction->DispLength = unDispSize;
				pInstruction->DispOffset = unOffset;

				pInstruction->Length += unDispSize;
				if (pInstruction->Length > RD_MAX_INSTRUCTION_LENGTH) {
					return RD_STATUS_INSTRUCTION_TOO_LONG;
				}
			}

			return RD_STATUS_SUCCESS;
		}

		static unsigned int RdFetchModrm(PINSTRUCTION pInstruction, unsigned char* pCode, unsigned char unOffset, size_t unSize) {
			RET_GT(static_cast<size_t>(unOffset) + 1, unSize, RD_STATUS_BUFFER_TOO_SMALL);

			pInstruction->HasModRm = true;
			pInstruction->ModRm.ModRm = pCode[unOffset];
			pInstruction->ModRmOffset = unOffset;

			++unOffset;
			++pInstruction->Length;
			if (pInstruction->Length > RD_MAX_INSTRUCTION_LENGTH) {
				return RD_STATUS_INSTRUCTION_TOO_LONG;
			}

			return RD_STATUS_SUCCESS;
		}

		static unsigned int RdFindInstruction(PINSTRUCTION pInstruction, unsigned char* pCode, size_t unSize, RD_INSTRUCTION** pInsDef) {
			const RD_TABLE* pTable = nullptr;
			switch (pInstruction->EncMode) {
				case RD_ENCM_LEGACY:
					pTable = g_pRootTable;
					break;
				case RD_ENCM_XOP:
					pTable = g_pXopTable;
					break;
				case RD_ENCM_VEX:
					pTable = g_pVexTable;
					break;
				case RD_ENCM_EVEX:
					pTable = g_pEvexTable;
					break;
			}

			PRD_INSTRUCTION pIns = nullptr;

			bool bF2 = false;
			bool bF3 = false;
			unsigned int unNextOpcode = 0;
			unsigned int unNextIndex = 0;

			unsigned int unStatus = RD_STATUS_SUCCESS;

			bool bStop = false;
			while (!bStop && pTable) {
				switch (pTable->m_unType) {
					case RD_ILUT_INSTRUCTION:
						pIns = const_cast<PRD_INSTRUCTION>(reinterpret_cast<const RD_INSTRUCTION*>(reinterpret_cast<const RD_TABLE_INSTRUCTION*>(pTable)->m_pInstruction));
						bStop = true;
						break;
					case RD_ILUT_OPCODE:
						unStatus = RdFetchOpcode(pInstruction, pCode, pInstruction->Length, unSize);
						if (!RD_SUCCESS(unStatus)) {
							bStop = true;
							break;
						}

						pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[pInstruction->OpCodeBytes[unNextOpcode++]]);
						break;
					case RD_ILUT_OPCODE_3DNOW:
						if (!pInstruction->HasModRm) {
							unStatus = RdFetchModrmAndSib(pInstruction, pCode, pInstruction->Length, unSize);
							if (!RD_SUCCESS(unStatus)) {
								bStop = true;
								break;
							}

							unStatus = RdFetchDisplacement(pInstruction, pCode, pInstruction->Length, unSize);
							if (!RD_SUCCESS(unStatus)) {
								bStop = true;
								break;
							}
						}

						unStatus = RdFetchOpcode(pInstruction, pCode, pInstruction->Length, unSize);
						if (!RD_SUCCESS(unStatus)) {
							bStop = true;
							break;
						}

						pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[pInstruction->OpCodeBytes[unNextOpcode++]]);
						break;
					case RD_ILUT_MODRM_MOD:
						if (!pInstruction->HasModRm) {
							unStatus = RdFetchModrmAndSib(pInstruction, pCode, pInstruction->Length, unSize);
							if (!RD_SUCCESS(unStatus)) {
								bStop = true;
								break;
							}

							unStatus = RdFetchDisplacement(pInstruction, pCode, pInstruction->Length, unSize);
							if (!RD_SUCCESS(unStatus)) {
								bStop = true;
								break;
							}
						}

						pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[(pInstruction->ModRm.mod == 3) ? 1 : 0]);
						break;
					case RD_ILUT_MODRM_REG:
						if (!pInstruction->HasModRm) {
							unStatus = RdFetchModrmAndSib(pInstruction, pCode, pInstruction->Length, unSize);
							if (!RD_SUCCESS(unStatus)) {
								bStop = true;
								break;
							}

							unStatus = RdFetchDisplacement(pInstruction, pCode, pInstruction->Length, unSize);
							if (!RD_SUCCESS(unStatus)) {
								bStop = true;
								break;
							}
						}

						pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[pInstruction->ModRm.reg]);
						break;
					case RD_ILUT_MODRM_RM:
						if (!pInstruction->HasModRm) {
							unStatus = RdFetchModrmAndSib(pInstruction, pCode, pInstruction->Length, unSize);
							if (!RD_SUCCESS(unStatus)) {
								bStop = true;
								break;
							}

							unStatus = RdFetchDisplacement(pInstruction, pCode, pInstruction->Length, unSize);
							if (!RD_SUCCESS(unStatus)) {
								bStop = true;
								break;
							}
						}

						pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[pInstruction->ModRm.rm]);
						break;
					case RD_ILUT_MAN_PREFIX:
						if ((pInstruction->Rep == 0xF2) && !bF2) {
							bF2 = true;
							unNextIndex = RD_ILUT_INDEX_MAN_PREF_F2;
							pInstruction->HasMandatoryF2 = true;
						} else if ((pInstruction->Rep == 0xF3) && !bF3) {
							bF3 = true;
							unNextIndex = RD_ILUT_INDEX_MAN_PREF_F3;
							pInstruction->HasMandatoryF3 = true;
						} else if (pInstruction->HasOpSize) {
							unNextIndex = RD_ILUT_INDEX_MAN_PREF_66;
							pInstruction->HasMandatory66 = true;
						} else {
							unNextIndex = RD_ILUT_INDEX_MAN_PREF_NONE;
						}

						pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[unNextIndex]);
						break;
					case RD_ILUT_MODE: {
							static const unsigned char pIndexes[3] = { RD_ILUT_INDEX_MODE_16, RD_ILUT_INDEX_MODE_32, RD_ILUT_INDEX_MODE_64 };

							unNextIndex = RD_ILUT_INDEX_MODE_NONE;

							if (pTable->m_pTable[pIndexes[pInstruction->DefCode]]) {
								unNextIndex = pIndexes[pInstruction->DefCode];
							}

							pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[unNextIndex]);
						}
						break;
					case RD_ILUT_DSIZE: {
							static const unsigned char pIndexes[3] = { RD_ILUT_INDEX_DSIZE_16, RD_ILUT_INDEX_DSIZE_32, RD_ILUT_INDEX_DSIZE_64 };

							unNextIndex = RD_ILUT_INDEX_DSIZE_NONE;

							if (pTable->m_pTable[pIndexes[pInstruction->OpMode]]) {
								unNextIndex = pIndexes[pInstruction->OpMode];
							}

							if (pInstruction->DefCode == RD_CODE_64) {
								if (pTable->m_pTable[4] && (!pInstruction->HasOpSize || pInstruction->Exs.w)) {
									unNextIndex = 4;
								}
								else if (pTable->m_pTable[5]) {
									unNextIndex = 5;
								}
							}

							pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[unNextIndex]);
						}
						break;
					case RD_ILUT_ASIZE: {
							static const unsigned char pIndexes[3] = { RD_ILUT_INDEX_ASIZE_16, RD_ILUT_INDEX_ASIZE_32, RD_ILUT_INDEX_ASIZE_64 };

							unNextIndex = RD_ILUT_INDEX_ASIZE_NONE;

							if (pTable->m_pTable[pIndexes[pInstruction->AddrMode]]) {
								unNextIndex = pIndexes[pInstruction->AddrMode];
							}

							pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[unNextIndex]);
						}
						break;
					case RD_ILUT_AUXILIARY:
						if (pInstruction->HasRex && pInstruction->Rex.b && pTable->m_pTable[RD_ILUT_INDEX_AUX_REXB]) {
							unNextIndex = RD_ILUT_INDEX_AUX_REXB;
						} else if (pInstruction->HasRex && pInstruction->Rex.w && pTable->m_pTable[RD_ILUT_INDEX_AUX_REXW]) {
							unNextIndex = RD_ILUT_INDEX_AUX_REXW;
						} else if ((pInstruction->DefCode == RD_CODE_64) && pTable->m_pTable[RD_ILUT_INDEX_AUX_O64]) {
							unNextIndex = RD_ILUT_INDEX_AUX_O64;
						} else if ((pInstruction->Rep == RD_PREFIX_G1_REPE_REPZ) && pTable->m_pTable[RD_ILUT_INDEX_AUX_F3]) {
							unNextIndex = RD_ILUT_INDEX_AUX_F3;
						} else if (pInstruction->Rep && pTable->m_pTable[RD_ILUT_INDEX_AUX_REP]) {
							unNextIndex = RD_ILUT_INDEX_AUX_REP;
						} else if ((pInstruction->DefCode == RD_CODE_64) && pInstruction->HasModRm && (pInstruction->ModRm.mod == 0) && (pInstruction->ModRm.rm == RDR_RBP) && pTable->m_pTable[RD_ILUT_INDEX_AUX_RIPREL]) {
							unNextIndex = RD_ILUT_INDEX_AUX_RIPREL;
						} else {
							unNextIndex = RD_ILUT_INDEX_AUX_NONE;
						}

						pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[unNextIndex]);
						break;
					case RD_ILUT_VENDOR:
						if (pTable->m_pTable[pInstruction->VendMode]) {
							pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[pInstruction->VendMode]);
						} else {
							pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[RD_VERD_ANY]);
						}
						break;
					case RD_ILUT_FEATURE:
						if (pTable->m_pTable[RD_ILUT_FEATURE_MPX] && (pInstruction->FeatMode & RD_FEAT_MPX)) {
							pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[RD_ILUT_FEATURE_MPX]);
						} else if (pTable->m_pTable[RD_ILUT_FEATURE_CET] && (pInstruction->FeatMode & RD_FEAT_CET)) {
							pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[RD_ILUT_FEATURE_CET]);
						} else if (pTable->m_pTable[RD_ILUT_FEATURE_CLDEMOTE] && (pInstruction->FeatMode & RD_FEAT_CLDEMOTE)) {
							pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[RD_ILUT_FEATURE_CLDEMOTE]);
						} else if (pTable->m_pTable[RD_ILUT_FEATURE_PITI] && (pInstruction->FeatMode & RD_FEAT_PITI)) {
							pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[RD_ILUT_FEATURE_PITI]);
						} else {
							pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[RD_ILUT_FEATURE_NONE]);
						}
						break;
					case RD_ILUT_VEX_MMMMM:
						pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[pInstruction->Exs.m]);
						break;
					case RD_ILUT_VEX_PP:
						pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[pInstruction->Exs.p]);
						break;
					case RD_ILUT_VEX_L:
						if (pInstruction->HasEvex && pInstruction->Exs.bm) {
							if (!pInstruction->HasModRm) {
								unStatus = RdFetchModrmAndSib(pInstruction, pCode, pInstruction->Length, unSize);
								if (!RD_SUCCESS(unStatus)) {
									bStop = true;
									break;
								}

								unStatus = RdFetchDisplacement(pInstruction, pCode, pInstruction->Length, unSize);
								if (!RD_SUCCESS(unStatus)) {
									bStop = true;
									break;
								}
							}

							if (pInstruction->ModRm.mod == 3) {
								if (pTable->m_pTable[2]) {
									pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[2]);
								} else if (pTable->m_pTable[1]) {
									pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[1]);
								} else {
									pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[0]);
								}
							} else {
								pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[pInstruction->Exs.l]);
							}
						} else {
							pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[pInstruction->Exs.l]);
						}
						break;
					case RD_ILUT_VEX_W:
						pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[pInstruction->Exs.w]);
						break;
					case RD_ILUT_VEX_WI:
						pTable = reinterpret_cast<const RD_TABLE*>(pTable->m_pTable[(pInstruction->DefCode == RD_CODE_64) ? pInstruction->Exs.w : 0]);
						break;
					default:
						unStatus = RD_STATUS_INTERNAL_ERROR;
						bStop = true;
						break;
				}
			}

			if (!RD_SUCCESS(unStatus)) {
				goto CLEANUP;
			}

			if (pIns) {
				if ((pIns->m_unAttributes & RD_FLAG_MODRM) && !pInstruction->HasModRm) {
					if (!(pIns->m_unAttributes & RD_FLAG_MFR)) {
						unStatus = RdFetchModrmAndSib(pInstruction, pCode, pInstruction->Length, unSize);
						if (!RD_SUCCESS(unStatus)) {
							goto CLEANUP;
						}

						unStatus = RdFetchDisplacement(pInstruction, pCode, pInstruction->Length, unSize);
						if (!RD_SUCCESS(unStatus)) {
							goto CLEANUP;
						}
					} else {
						unStatus = RdFetchModrm(pInstruction, pCode, pInstruction->Length, unSize);
						if (!RD_SUCCESS(unStatus)) {
							goto CLEANUP;
						}
					}
				}

				pInstruction->PrimaryOpCode = pInstruction->OpCodeBytes[pInstruction->OpLength - 1];
				pInstruction->MainOpOffset = RD_IS_3DNOW(pInstruction) ? pInstruction->Length - 1 : pInstruction->OpOffset + pInstruction->OpLength - 1;

				if ((pInstruction->DefCode == RD_CODE_64) && (pIns->m_unAttributes & RD_FLAG_I64)) {
					unStatus = RD_STATUS_INVALID_ENCODING_IN_MODE;
				}

				if ((pInstruction->DefCode != RD_CODE_64) && (pIns->m_unAttributes & RD_FLAG_O64)) {
					unStatus = RD_STATUS_INVALID_ENCODING_IN_MODE;
				}
			}
			else {
				unStatus = RD_STATUS_INVALID_ENCODING;
			}

		CLEANUP:
			*pInsDef = pIns;

			return unStatus;
		}

		static unsigned int RdGetEffectiveOpMode(PINSTRUCTION pInstruction) {
			static const unsigned char pLut[3] = { RD_SIZE_16BIT, RD_SIZE_32BIT, RD_SIZE_64BIT };

			if ((pInstruction->DefCode == RD_CODE_64) && (pInstruction->Attributes & RD_FLAG_IWO64)) {
				pInstruction->Exs.w = 0;
			}

			bool bWidth = pInstruction->Exs.w && !(pInstruction->Attributes & RD_FLAG_WIG);
			bool bF64 = (pInstruction->Attributes & RD_FLAG_F64) && (pInstruction->VendMode != RD_VERD_AMD);
			bool bD64 = (pInstruction->Attributes & RD_FLAG_D64) || ((pInstruction->Attributes & RD_FLAG_F64) && (pInstruction->VendMode == RD_VERD_AMD));
			bool bHas66 = pInstruction->HasOpSize && (!pInstruction->HasMandatory66 || (pInstruction->Attributes & RD_FLAG_S66));

			switch (pInstruction->DefCode) {
			case RD_CODE_16:
				pInstruction->EfOpMode = bHas66 ? RD_OPSZ_32 : RD_OPSZ_16;
				break;
			case RD_CODE_32:
				pInstruction->EfOpMode = bHas66 ? RD_OPSZ_16 : RD_OPSZ_32;
				break;
			case RD_CODE_64:
				pInstruction->EfOpMode = (bWidth || bF64 || (bD64 && !bHas66)) ? RD_OPSZ_64 : (bHas66 ? RD_OPSZ_16 : RD_OPSZ_32);
				pInstruction->AddrMode = (pInstruction->Attributes & RD_FLAG_I67) ? RD_ADDR_64 : pInstruction->AddrMode;
				break;
			default:
				return RD_STATUS_INVALID_INSTRUX;
			}

			pInstruction->WordLength = pLut[pInstruction->EfOpMode];

			return RD_STATUS_SUCCESS;
		}

		static unsigned int RdPostProcessEvex(PINSTRUCTION pInstruction) {
			if (pInstruction->Exs.bm == 1) {
				if (pInstruction->ModRm.mod == 3) {
					if (pInstruction->ValidDecorators.Er) {
						pInstruction->HasEr = 1;
						pInstruction->HasSae = 1;
						pInstruction->RoundingMode = static_cast<unsigned char>(pInstruction->Exs.l & 0xFF);
					} else if (pInstruction->ValidDecorators.Sae) {
						pInstruction->HasSae = 1;
					} else if (pInstruction->Attributes & RD_FLAG_IER) {
						pInstruction->HasIgnEr = 1;
					} else {
						return RD_STATUS_ER_SAE_NOT_SUPPORTED;
					}
				} else {
					if (pInstruction->ValidDecorators.Broadcast) {
						pInstruction->HasBroadcast = 1;
					} else {
						return RD_STATUS_BROADCAST_NOT_SUPPORTED;
					}
				}
			}

			if (pInstruction->Exs.k) {
				if (pInstruction->ValidDecorators.Mask) {
					pInstruction->HasMask = 1;
				} else {
					return RD_STATUS_MASK_NOT_SUPPORTED;
				}
			} else {
				if (pInstruction->Attributes & RD_FLAG_MMASK) {
					return RD_STATUS_MASK_REQUIRED;
				}
			}

			if (pInstruction->Exs.z) {
				if (pInstruction->ValidDecorators.Zero) {
					if (pInstruction->HasMask) {
						pInstruction->HasZero = 1;
					} else {
						return RD_STATUS_ZEROING_NO_MASK;
					}
				} else {
					return RD_STATUS_ZEROING_NOT_SUPPORTED;
				}
			}

			if (pInstruction->HasDisp && (pInstruction->DispLength == 1)) {
				pInstruction->HasCompDisp = true;
			}

			return RD_STATUS_SUCCESS;
		}

		static unsigned int RdGetVectorLength(PINSTRUCTION pInstruction) {
			if (pInstruction->HasEr || pInstruction->HasSae || pInstruction->HasIgnEr) {
				if ((pInstruction->TupleType == RD_TUPLE_T1S) || (pInstruction->TupleType == RD_TUPLE_T1S8) || (pInstruction->TupleType == RD_TUPLE_T1S16) || (pInstruction->TupleType == RD_TUPLE_T1F)) {
					pInstruction->VecMode = pInstruction->EfVecMode = RD_VECM_128;
				} else {
					pInstruction->VecMode = pInstruction->EfVecMode = RD_VECM_512;
				}

				return RD_STATUS_SUCCESS;
			}

			switch (pInstruction->Exs.l) {
				case 0:
					pInstruction->VecMode = RD_VECM_128;
					pInstruction->EfVecMode = RD_VECM_128;
					break;
				case 1:
					pInstruction->VecMode = RD_VECM_256;
					pInstruction->EfVecMode = (pInstruction->Attributes & RD_FLAG_LIG) ? RD_VECM_128 : RD_VECM_256;
					break;
				case 2:
					pInstruction->VecMode = RD_VECM_512;
					pInstruction->EfVecMode = (pInstruction->Attributes & RD_FLAG_LIG) ? RD_VECM_128 : RD_VECM_512;
					break;
				default:
					return RD_STATUS_BAD_EVEX_LL;
			}

			if ((pInstruction->EfVecMode == RD_VECM_128) && (pInstruction->Attributes & RD_FLAG_NOL0)) {
				return RD_STATUS_INVALID_ENCODING;
			}

			return RD_STATUS_SUCCESS;
		}

		static unsigned int RdFetchAddress(PINSTRUCTION pInstruction, unsigned char* pCode, unsigned char unOffset, size_t unSize, unsigned char unAddressSize) {
			RET_GT(static_cast<size_t>(unOffset) + unAddressSize, unSize, RD_STATUS_BUFFER_TOO_SMALL);

			pInstruction->HasAddr = true;
			pInstruction->AddrLength = unAddressSize;
			pInstruction->AddrOffset = unOffset;

			pInstruction->Address.Ip = static_cast<unsigned int>(RdFetchData(pCode + unOffset, pInstruction->AddrLength - 2) & 0xFFFFFFFF);
			pInstruction->Address.Cs = static_cast<unsigned short>(RdFetchData(pCode + unOffset + pInstruction->AddrLength - 2, 2) & 0xFFFF);

			pInstruction->Length += pInstruction->AddrLength;
			if (pInstruction->Length > RD_MAX_INSTRUCTION_LENGTH) {
				return RD_STATUS_INSTRUCTION_TOO_LONG;
			}

			return RD_STATUS_SUCCESS;
		}

		static unsigned int RdFetchImmediate(PINSTRUCTION pInstruction, unsigned char* pCode, unsigned char unOffset, size_t unSize, unsigned char unImmediateSize) {
			RET_GT(static_cast<size_t>(unOffset) + unImmediateSize, unSize, RD_STATUS_BUFFER_TOO_SMALL);

			const unsigned long long unImm = RdFetchData(pCode + unOffset, unImmediateSize);

			if (pInstruction->HasImm2) {
				pInstruction->HasImm3 = true;
				pInstruction->Imm3Length = unImmediateSize;
				pInstruction->Imm3Offset = unOffset;
				pInstruction->Immediate3 = static_cast<unsigned char>(unImm & 0xFF);
			} else if (pInstruction->HasImm1) {
				pInstruction->HasImm2 = true;
				pInstruction->Imm2Length = unImmediateSize;
				pInstruction->Imm2Offset = unOffset;
				pInstruction->Immediate2 = static_cast<unsigned char>(unImm & 0xFF);
			} else {
				pInstruction->HasImm1 = true;
				pInstruction->Imm1Length = unImmediateSize;
				pInstruction->Imm1Offset = unOffset;
				pInstruction->Immediate1 = unImm;
			}

			pInstruction->Length += unImmediateSize;
			if (pInstruction->Length > RD_MAX_INSTRUCTION_LENGTH) {
				return RD_STATUS_INSTRUCTION_TOO_LONG;
			}

			return RD_STATUS_SUCCESS;
		}

		static unsigned int RdFetchRelativeOffset(PINSTRUCTION pInstruction, unsigned char* pCode, unsigned char unOffset, size_t unSize, unsigned char unRelOffsetSize) {
			RET_GT(static_cast<size_t>(unOffset) + unRelOffsetSize, unSize, RD_STATUS_BUFFER_TOO_SMALL);

			pInstruction->HasRelOffs = true;
			pInstruction->RelOffsLength = unRelOffsetSize;
			pInstruction->RelOffsOffset = unOffset;

			pInstruction->RelativeOffset = static_cast<unsigned int>(RdFetchData(pCode + unOffset, unRelOffsetSize) & 0xFFFFFFFF);

			pInstruction->Length += unRelOffsetSize;
			if (pInstruction->Length > RD_MAX_INSTRUCTION_LENGTH) {
				return RD_STATUS_INSTRUCTION_TOO_LONG;
			}

			return RD_STATUS_SUCCESS;
		}

		static unsigned int RdFetchMoffset(PINSTRUCTION pInstruction, unsigned char* pCode, unsigned char unOffset, size_t unSize, unsigned char unMoffsetSize) {
			RET_GT(static_cast<size_t>(unOffset) + unMoffsetSize, unSize, RD_STATUS_BUFFER_TOO_SMALL);

			pInstruction->HasMoffset = true;
			pInstruction->MoffsetLength = unMoffsetSize;
			pInstruction->MoffsetOffset = unOffset;

			pInstruction->Moffset = RdFetchData(pCode + unOffset, unMoffsetSize);

			pInstruction->Length += unMoffsetSize;
			if (pInstruction->Length > RD_MAX_INSTRUCTION_LENGTH) {
				return RD_STATUS_INSTRUCTION_TOO_LONG;
			}

			return RD_STATUS_SUCCESS;
		}

		static unsigned char RdGetSegOverride(PINSTRUCTION pInstruction, unsigned char unDefaultSeg) {
			if ((pInstruction->DefCode == RD_CODE_64) && (pInstruction->Seg != RD_PREFIX_G2_SEG_FS) && (pInstruction->Seg != RD_PREFIX_G2_SEG_GS)) {
				return unDefaultSeg;
			}

			switch (pInstruction->Seg) {
				case RD_PREFIX_G2_SEG_CS:
					return RDR_CS;
				case RD_PREFIX_G2_SEG_DS:
					return RDR_DS;
				case RD_PREFIX_G2_SEG_ES:
					return RDR_ES;
				case RD_PREFIX_G2_SEG_SS:
					return RDR_SS;
				case RD_PREFIX_G2_SEG_FS:
					return RDR_FS;
				case RD_PREFIX_G2_SEG_GS:
					return RDR_GS;
				default:
					return unDefaultSeg;
			}
		}

		static unsigned char RdGetCompDispSize(PINSTRUCTION pInstruction, unsigned int unMemSize) {
			static const unsigned char fvpLut[4] = { 16, 32, 64, 0 };
			static const unsigned char hvpLut[4] = { 8, 16, 32, 0 };
			static const unsigned char qvpLut[4] = { 4, 8, 16, 0 };
			static const unsigned char duppLut[4] = { 8, 32, 64, 0 };
			static const unsigned char fvmpLut[4] = { 16, 32, 64, 0 };
			static const unsigned char hvmpLut[4] = { 8, 16, 32, 0 };
			static const unsigned char qvmpLut[4] = { 4, 8, 16, 0 };
			static const unsigned char ovmpLut[4] = { 2, 4, 8, 0 };

			if (pInstruction->HasBroadcast) {
				return static_cast<unsigned char>(unMemSize & 0xFF);
			}

			switch (pInstruction->TupleType) {
				case RD_TUPLE_FV:
					return fvpLut[pInstruction->Exs.l];
				case RD_TUPLE_HV:
					return hvpLut[pInstruction->Exs.l];
				case RD_TUPLE_QV:
					return qvpLut[pInstruction->Exs.l];
				case RD_TUPLE_DUP:
					return duppLut[pInstruction->Exs.l];
				case RD_TUPLE_FVM:
					return fvmpLut[pInstruction->Exs.l];
				case RD_TUPLE_HVM:
					return hvmpLut[pInstruction->Exs.l];
				case RD_TUPLE_QVM:
					return qvmpLut[pInstruction->Exs.l];
				case RD_TUPLE_OVM:
					return ovmpLut[pInstruction->Exs.l];
				case RD_TUPLE_M128:
					return 16;
				case RD_TUPLE_T1S8:
					return 1;
				case RD_TUPLE_T1S16:
					return 2;
				case RD_TUPLE_T1S:
					return (pInstruction->Attributes & RD_FLAG_WIG) ? 4 : (pInstruction->Exs.w ? 8 : 4);
				case RD_TUPLE_T1F:
					return static_cast<unsigned char>(unMemSize & 0xFF);
				case RD_TUPLE_T2:
					return pInstruction->Exs.w ? 16 : 8;
				case RD_TUPLE_T4:
					return pInstruction->Exs.w ? 32 : 16;
				case RD_TUPLE_T8:
					return 32;
				case RD_TUPLE_T1_4X:
					return 16;
				default:
					return 1;
			}
		}

		static unsigned int RdFetchSseImmediate(PINSTRUCTION pInstruction, unsigned char* pCode, unsigned char unOffset, size_t unSize, unsigned char unSseImmSize) {
			RET_GT(static_cast<size_t>(unOffset) + unSseImmSize, unSize, RD_STATUS_BUFFER_TOO_SMALL);

			pInstruction->HasSseImm = true;
			pInstruction->SseImmOffset = unOffset;
			pInstruction->SseImmediate = pCode[unOffset];

			pInstruction->Length += unSseImmSize;
			if (pInstruction->Length > RD_MAX_INSTRUCTION_LENGTH) {
				return RD_STATUS_INSTRUCTION_TOO_LONG;
			}

			return RD_STATUS_SUCCESS;
		}

		static unsigned int RdParseOperand(PINSTRUCTION pInstruction, unsigned char* pCode, unsigned char unOffset, size_t unSize, unsigned int unIndex, unsigned long long unSpecifier) {
			unsigned int unDispSize = 0;

			unsigned char unVSibIndexSize = 0;
			unsigned char unVSibIndexCount = 0;
			unsigned int unVSibRegSize = 0;

			bool bWidth = pInstruction->Exs.w && !(pInstruction->Attributes & RD_FLAG_WIG);

			unsigned char unOPT = RD_OP_TYPE(unSpecifier);
			unsigned char unOPS = RD_OP_SIZE(unSpecifier);
			unsigned char unOPF = RD_OP_FLAGS(unSpecifier);
			unsigned char unOPA = RD_OP_ACCESS(unSpecifier);
			unsigned char unOPD = RD_OP_DECORATORS(unSpecifier);
			unsigned char unOPB = RD_OP_BLOCK(unSpecifier);

			unsigned int unBroadcastSize = 0;

			PRD_OPERAND pOperand = &pInstruction->Operands[unIndex];

			pOperand->Flags.Flags = unOPF;
			pOperand->Access.Access = unOPA;

			switch (unOPS) {
				case RD_OPS_asz:
					unDispSize = 2 << pInstruction->AddrMode;
					break;
				case RD_OPS_ssz:
					unDispSize = 2 << pInstruction->DefStack;
					break;
				case RD_OPS_0:
					unDispSize = 0;
					break;
				case RD_OPS_b:
					unDispSize = RD_SIZE_8BIT;
					break;
				case RD_OPS_w:
					unDispSize = RD_SIZE_16BIT;
					break;
				case RD_OPS_d:
					unDispSize = RD_SIZE_32BIT;
					break;
				case RD_OPS_q:
					unDispSize = RD_SIZE_64BIT;
					break;
				case RD_OPS_dq:
					unDispSize = RD_SIZE_128BIT;
					break;
				case RD_OPS_qq:
					unDispSize = RD_SIZE_256BIT;
					break;
				case RD_OPS_oq:
					unDispSize = RD_SIZE_512BIT;
					break;
				case RD_OPS_fa:
					unDispSize = RD_SIZE_80BIT;
					break;
				case RD_OPS_fw:
					unDispSize = RD_SIZE_16BIT;
					break;
				case RD_OPS_fd:
					unDispSize = RD_SIZE_32BIT;
					break;
				case RD_OPS_fq:
					unDispSize = RD_SIZE_64BIT;
					break;
				case RD_OPS_ft:
					unDispSize = RD_SIZE_80BIT;
					break;
				case RD_OPS_fe:
					unDispSize = (pInstruction->EfOpMode == RD_OPSZ_16) ? RD_SIZE_112BIT : RD_SIZE_224BIT;
					break;
				case RD_OPS_fs:
					unDispSize = (pInstruction->EfOpMode == RD_OPSZ_16) ? RD_SIZE_752BIT : RD_SIZE_864BIT;
					break;
				case RD_OPS_rx:
					unDispSize = RD_SIZE_4096BIT;
					break;
				case RD_OPS_cl:
					unDispSize = RD_SIZE_CACHE_LINE;
					break;
				case RD_OPS_v: {
						static const unsigned char pLut[3] = { RD_SIZE_16BIT, RD_SIZE_32BIT, RD_SIZE_64BIT };
						unDispSize = pLut[pInstruction->EfOpMode];
					}
					break;
				case RD_OPS_y: {
						static const unsigned char pLut[3] = { RD_SIZE_32BIT, RD_SIZE_32BIT, RD_SIZE_64BIT };
						unDispSize = pLut[pInstruction->EfOpMode];
					}
					break;
				case RD_OPS_yf: {
						static const unsigned char pLut[3] = { RD_SIZE_32BIT, RD_SIZE_32BIT, RD_SIZE_64BIT };
						unDispSize = pLut[pInstruction->DefCode];
					}
					break;
				case RD_OPS_z: {
						static const unsigned char pLut[3] = { RD_SIZE_16BIT, RD_SIZE_32BIT, RD_SIZE_32BIT };
						unDispSize = pLut[pInstruction->EfOpMode];
					}
					break;
				case RD_OPS_a: {
						static const unsigned char pLut[3] = { RD_SIZE_16BIT * 2, RD_SIZE_32BIT * 2, 0 };

						if (pInstruction->DefCode > RD_CODE_32) {
							return RD_STATUS_INVALID_INSTRUX;
						}

						unDispSize = pLut[pInstruction->EfOpMode];
					}
					break;
				case RD_OPS_c:
					switch (pInstruction->DefCode) {
						case RD_CODE_16:
							unDispSize = pInstruction->HasOpSize ? RD_SIZE_16BIT : RD_SIZE_8BIT;
							break;
						case RD_CODE_32:
							unDispSize = pInstruction->HasOpSize ? RD_SIZE_16BIT : RD_SIZE_32BIT;
							break;
						case RD_CODE_64:
							unDispSize = RD_SIZE_64BIT;
							break;
						default:
							return RD_STATUS_INVALID_INSTRUX;
					}
					break;
				case RD_OPS_p: {
						static const unsigned char pLut[3] = { RD_SIZE_32BIT, RD_SIZE_48BIT, RD_SIZE_80BIT };
						unDispSize = pLut[pInstruction->EfOpMode];
					}
					break;
				case RD_OPS_s: {
						static const unsigned char pLut[3] = { RD_SIZE_48BIT, RD_SIZE_48BIT, RD_SIZE_80BIT };
						unDispSize = pLut[pInstruction->DefCode];
					}
					break;
				case RD_OPS_l: {
						static const unsigned char pLut[3] = { RD_SIZE_64BIT, RD_SIZE_64BIT, RD_SIZE_128BIT };
						unDispSize = pLut[pInstruction->DefCode];
					}
					break;
				case RD_OPS_x: {
						static const unsigned char pLut[3] = { RD_SIZE_128BIT, RD_SIZE_256BIT, RD_SIZE_512BIT };
						unDispSize = pLut[pInstruction->EfVecMode];
					}
					break;
				case RD_OPS_fv: {
						static const unsigned char pLut[3] = { RD_SIZE_128BIT, RD_SIZE_256BIT, RD_SIZE_512BIT };
						unDispSize = pLut[pInstruction->EfVecMode];
					}
					break;
				case RD_OPS_uv: {
						static const unsigned char pLut[3] = { 0, RD_SIZE_256BIT, RD_SIZE_512BIT };

						if (RD_VECM_128 == pInstruction->EfVecMode) {
							return RD_STATUS_INVALID_INSTRUX;
						}

						unDispSize = pLut[pInstruction->EfVecMode];
					}
					break;
				case RD_OPS_ev: {
						static const unsigned char pLut[3] = { RD_SIZE_16BIT, RD_SIZE_32BIT, RD_SIZE_64BIT };
						unDispSize = pLut[pInstruction->EfVecMode];
					}
					break;
				case RD_OPS_qv: {
						static const unsigned char pLut[3] = { RD_SIZE_32BIT, RD_SIZE_64BIT, RD_SIZE_128BIT };
						unDispSize = pLut[pInstruction->EfVecMode];
					}
					break;
				case RD_OPS_hv: {
						static const unsigned char pLut[3] = { RD_SIZE_64BIT, RD_SIZE_128BIT, RD_SIZE_256BIT };
						unDispSize = pLut[pInstruction->EfVecMode];
					}
					break;
				case RD_OPS_pd:
				case RD_OPS_ps:
				case RD_OPS_ph: {
						static const unsigned char pLut[3] = { RD_SIZE_128BIT, RD_SIZE_256BIT, RD_SIZE_512BIT };
						unDispSize = pLut[pInstruction->EfVecMode];
					}
					break;
				case RD_OPS_sd:
					unDispSize = RD_SIZE_64BIT;
					break;
				case RD_OPS_ss:
					unDispSize = RD_SIZE_32BIT;
					break;
				case RD_OPS_sh:
					unDispSize = RD_SIZE_16BIT;
					break;
				case RD_OPS_mib:
					unDispSize = 0;
					break;
				case RD_OPS_vm32x:
				case RD_OPS_vm32y:
				case RD_OPS_vm32z:
					unVSibIndexSize = RD_SIZE_32BIT;
					unVSibIndexCount = (pInstruction->Exs.l == 0) ? 4 : ((pInstruction->Exs.l == 1) ? 8 : 16);
					unVSibRegSize =	(unOPS == RD_OPS_vm32x) ? RD_SIZE_128BIT
								  : (unOPS == RD_OPS_vm32y) ? RD_SIZE_256BIT
															: RD_SIZE_512BIT;
					unDispSize = unVSibIndexCount * (bWidth ? RD_SIZE_64BIT : RD_SIZE_32BIT);
					break;
				case RD_OPS_vm32h:
					unVSibIndexSize = RD_SIZE_32BIT;
					unVSibIndexCount = (pInstruction->Exs.l == 0) ? 2 : ((pInstruction->Exs.l == 1) ? 4 : 8);
					unVSibRegSize = (pInstruction->Exs.l == 0) ? RD_SIZE_128BIT
								  : (pInstruction->Exs.l == 1) ? RD_SIZE_128BIT
															   : RD_SIZE_256BIT;
					unDispSize = unVSibIndexCount * (bWidth ? RD_SIZE_64BIT : RD_SIZE_32BIT);
					break;
				case RD_OPS_vm32n:
					unVSibIndexSize = RD_SIZE_32BIT;
					unVSibIndexCount = (pInstruction->Exs.l == 0) ? 4 : ((pInstruction->Exs.l == 1) ? 8 : 16);
					unVSibRegSize = (pInstruction->Exs.l == 0) ? RD_SIZE_128BIT
								  : (pInstruction->Exs.l == 1) ? RD_SIZE_256BIT
															   : RD_SIZE_512BIT;
					unDispSize = unVSibIndexCount * (bWidth ? RD_SIZE_64BIT : RD_SIZE_32BIT);
					break;
				case RD_OPS_vm64x:
				case RD_OPS_vm64y:
				case RD_OPS_vm64z:
					unVSibIndexSize = RD_SIZE_64BIT;
					unVSibIndexCount = (pInstruction->Exs.l == 0) ? 2 : ((pInstruction->Exs.l == 1) ? 4 : 8);
					unVSibRegSize = (unOPS == RD_OPS_vm64x) ? RD_SIZE_128BIT
								  : (unOPS == RD_OPS_vm64y) ? RD_SIZE_256BIT
															: RD_SIZE_512BIT;
					unDispSize = unVSibIndexCount * (bWidth ? RD_SIZE_64BIT : RD_SIZE_32BIT);
					break;
				case RD_OPS_vm64h:
					unVSibIndexSize = RD_SIZE_64BIT;
					unVSibIndexCount = (pInstruction->Exs.l == 0) ? 1 : ((pInstruction->Exs.l == 1) ? 2 : 4);
					unVSibRegSize = (pInstruction->Exs.l == 0) ? RD_SIZE_128BIT
								  : (pInstruction->Exs.l == 1) ? RD_SIZE_128BIT
															   : RD_SIZE_256BIT;
					unDispSize = unVSibIndexCount * (bWidth ? RD_SIZE_64BIT : RD_SIZE_32BIT);
					break;
				case RD_OPS_vm64n:
					unVSibIndexSize = RD_SIZE_64BIT;
					unVSibIndexCount = (pInstruction->Exs.l == 0) ? 2 : ((pInstruction->Exs.l == 1) ? 4 : 8);
					unVSibRegSize = (pInstruction->Exs.l == 0) ? RD_SIZE_128BIT
								  : (pInstruction->Exs.l == 1) ? RD_SIZE_256BIT
															   : RD_SIZE_512BIT;
					unDispSize = unVSibIndexCount * (bWidth ? RD_SIZE_64BIT : RD_SIZE_32BIT);
					break;
				case RD_OPS_v2:
				case RD_OPS_v3:
				case RD_OPS_v4:
				case RD_OPS_v5:
				case RD_OPS_v8: {
						static const unsigned char pLut[3] = { RD_SIZE_16BIT, RD_SIZE_32BIT, RD_SIZE_64BIT };

						switch (unOPS) {
							case RD_OPS_v2:
								unDispSize = 2 * pLut[pInstruction->EfOpMode];
								break;
							case RD_OPS_v3:
								unDispSize = 3 * pLut[pInstruction->EfOpMode];
								break;
							case RD_OPS_v4:
								unDispSize = 4 * pLut[pInstruction->EfOpMode];
								break;
							case RD_OPS_v5:
								unDispSize = 5 * pLut[pInstruction->EfOpMode];
								break;
							default:
								unDispSize = 8 * pLut[pInstruction->EfOpMode];
								break;
						}
					}
					break;
				case RD_OPS_12:
					unDispSize = 12;
					break;
				case RD_OPS_t:
					unDispSize = RD_SIZE_1KB;
					break;
				case RD_OPS_384:
					unDispSize = RD_SIZE_384BIT;
					break;
				case RD_OPS_512:
					unDispSize = RD_SIZE_512BIT;
					break;
				case RD_OPS_4096:
					unDispSize = RD_SIZE_4096BIT;
					break;
				case RD_OPS_unknown:
					unDispSize = RD_SIZE_UNKNOWN;
					break;
				default:
					return RD_STATUS_INVALID_INSTRUX;
			}

			pOperand->Size = pOperand->RawSize = unBroadcastSize = unDispSize;

			switch (unOPT) {
				case RD_OPT_CONST_1:
					pOperand->Type = RD_OP_CONST;
					pOperand->Info.Constant.Const = 1;
					break;
				case RD_OPT_RIP:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_RIP;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = 0;
					pInstruction->RipAccess |= pOperand->Access.Access;
					break;
				case RD_OPT_GPR_rAX:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_GPR;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_RAX;
					break;
				case RD_OPT_GPR_AH:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_GPR;
					pOperand->Info.Register.Size = RD_SIZE_8BIT;
					pOperand->Info.Register.Reg = RDR_AH;
					pOperand->Info.Register.IsHigh8 = true;
					break;
				case RD_OPT_GPR_rCX:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_GPR;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_RCX;
					break;
				case RD_OPT_GPR_rDX:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_GPR;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_RDX;
					break;
				case RD_OPT_GPR_rBX:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_GPR;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_RBX;
					break;
				case RD_OPT_GPR_rBP:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_GPR;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_RBP;
					break;
				case RD_OPT_GPR_rSP:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_GPR;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_RSP;
					break;
				case RD_OPT_GPR_rSI:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_GPR;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_RSI;
					break;
				case RD_OPT_GPR_rDI:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_GPR;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_RDI;
					break;
				case RD_OPT_GPR_rR8:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_GPR;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_R8;
					break;
				case RD_OPT_GPR_rR9:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_GPR;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_R9;
					break;
				case RD_OPT_GPR_rR11:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_GPR;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_R11;
					break;
				case RD_OPT_SEG_CS:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_SEG;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_CS;
					pInstruction->CsAccess |= pOperand->Access.Access;
					break;
				case RD_OPT_SEG_SS:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_SEG;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_SS;
					break;
				case RD_OPT_SEG_DS:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_SEG;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_DS;
					break;
				case RD_OPT_SEG_ES:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_SEG;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_ES;
					break;
				case RD_OPT_SEG_FS:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_SEG;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_FS;
					break;
				case RD_OPT_SEG_GS:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_SEG;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_GS;
					break;
				case RD_OPT_FPU_ST0:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_FPU;
					pOperand->Info.Register.Size = RD_SIZE_80BIT;
					pOperand->Info.Register.Reg = 0;
					break;
				case RD_OPT_FPU_STX:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_FPU;
					pOperand->Info.Register.Size = RD_SIZE_80BIT;
					pOperand->Info.Register.Reg = pInstruction->ModRm.rm;
					break;
				case RD_OPT_SSE_XMM0:
				case RD_OPT_SSE_XMM1:
				case RD_OPT_SSE_XMM2:
				case RD_OPT_SSE_XMM3:
				case RD_OPT_SSE_XMM4:
				case RD_OPT_SSE_XMM5:
				case RD_OPT_SSE_XMM6:
				case RD_OPT_SSE_XMM7:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_SSE;
					pOperand->Info.Register.Size = RD_SIZE_128BIT;
					pOperand->Info.Register.Reg = unOPT - RD_OPT_SSE_XMM0;
					break;
				case RD_OPT_CR_0:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_CR;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_CR0;
					break;
				case RD_OPT_SYS_GDTR:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_SYS;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_GDTR;
					break;
				case RD_OPT_SYS_IDTR:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_SYS;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_IDTR;
					break;
				case RD_OPT_SYS_LDTR:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_SYS;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_LDTR;
					break;
				case RD_OPT_SYS_TR:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_SYS;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = RDR_TR;
					break;
				case RD_OPT_X87_CONTROL:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_SYS;
					pOperand->Info.Register.Size = RD_SIZE_16BIT;
					pOperand->Info.Register.Reg = RDR_X87_CONTROL;
					break;
				case RD_OPT_X87_TAG:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_SYS;
					pOperand->Info.Register.Size = RD_SIZE_16BIT;
					pOperand->Info.Register.Reg = RDR_X87_TAG;
					break;
				case RD_OPT_X87_STATUS:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_SYS;
					pOperand->Info.Register.Size = RD_SIZE_16BIT;
					pOperand->Info.Register.Reg = RDR_X87_STATUS;
					break;
				case RD_OPT_MXCSR:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_MXCSR;
					pOperand->Info.Register.Size = RD_SIZE_32BIT;
					pOperand->Info.Register.Reg = 0;
					break;
				case RD_OPT_PKRU:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_PKRU;
					pOperand->Info.Register.Size = RD_SIZE_32BIT;
					pOperand->Info.Register.Reg = 0;
					break;
				case RD_OPT_SSP:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_SSP;
					pOperand->Info.Register.Size = pOperand->Size;
					pOperand->Info.Register.Reg = 0;
					break;
				case RD_OPT_UIF:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_UIF;
					pOperand->Info.Register.Size = RD_SIZE_8BIT;
					pOperand->Info.Register.Reg = 0;
					break;
				case RD_OPT_MSR:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_MSR;
					pOperand->Info.Register.Size = RD_SIZE_64BIT;
					pOperand->Info.Register.Reg = 0xFFFFFFFF;
					break;
				case RD_OPT_MSR_TSC:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_MSR;
					pOperand->Info.Register.Size = RD_SIZE_64BIT;
					pOperand->Info.Register.Reg = RDR_IA32_TSC;
					break;
				case RD_OPT_MSR_TSCAUX:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_MSR;
					pOperand->Info.Register.Size = RD_SIZE_64BIT;
					pOperand->Info.Register.Reg = RDR_IA32_TSC_AUX;
					break;
				case RD_OPT_MSR_SCS:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_MSR;
					pOperand->Info.Register.Size = RD_SIZE_64BIT;
					pOperand->Info.Register.Reg = RDR_IA32_SYSENTER_CS;
					break;
				case RD_OPT_MSR_SESP:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_MSR;
					pOperand->Info.Register.Size = RD_SIZE_64BIT;
					pOperand->Info.Register.Reg = RDR_IA32_SYSENTER_ESP;
					break;
				case RD_OPT_MSR_SEIP:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_MSR;
					pOperand->Info.Register.Size = RD_SIZE_64BIT;
					pOperand->Info.Register.Reg = RDR_IA32_SYSENTER_EIP;
					break;
				case RD_OPT_MSR_STAR:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_MSR;
					pOperand->Info.Register.Size = RD_SIZE_64BIT;
					pOperand->Info.Register.Reg = RDR_IA32_STAR;
					break;
				case RD_OPT_MSR_LSTAR:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_MSR;
					pOperand->Info.Register.Size = RD_SIZE_64BIT;
					pOperand->Info.Register.Reg = RDR_IA32_LSTAR;
					break;
				case RD_OPT_MSR_FMASK:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_MSR;
					pOperand->Info.Register.Size = RD_SIZE_64BIT;
					pOperand->Info.Register.Reg = RDR_IA32_FMASK;
					break;
				case RD_OPT_MSR_FSBASE:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_MSR;
					pOperand->Info.Register.Size = RD_SIZE_64BIT;
					pOperand->Info.Register.Reg = RDR_IA32_FS_BASE;
					break;
				case RD_OPT_MSR_GSBASE:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_MSR;
					pOperand->Info.Register.Size = RD_SIZE_64BIT;
					pOperand->Info.Register.Reg = RDR_IA32_GS_BASE;
					break;
				case RD_OPT_MSR_KGSBASE:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_MSR;
					pOperand->Info.Register.Size = RD_SIZE_64BIT;
					pOperand->Info.Register.Reg = RDR_IA32_KERNEL_GS_BASE;
					break;
				case RD_OPT_XCR:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_XCR;
					pOperand->Info.Register.Size = RD_SIZE_64BIT;
					pOperand->Info.Register.Reg = 0xFF;
					break;
				case RD_OPT_XCR_0:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_XCR;
					pOperand->Info.Register.Size = RD_SIZE_64BIT;
					pOperand->Info.Register.Reg = 0;
					break;
				case RD_OPT_REG_BANK:
					if ((pInstruction->Instruction == RD_INS_PUSHA) || (pInstruction->Instruction == RD_INS_POPA)) {
						pOperand->Type = RD_OP_REG;
						pOperand->Size = pOperand->RawSize = pInstruction->WordLength;
						pOperand->Info.Register.Type = RD_REG_GPR;
						pOperand->Info.Register.Size = pInstruction->WordLength;
						pOperand->Info.Register.Reg = RDR_EAX;
						pOperand->Info.Register.Count = 8;
						pOperand->Info.Register.IsBlock = true;
					} else {
						pOperand->Type = RD_OP_BANK;
					}
					break;
				case RD_OPT_A: {
						const unsigned int unStatus = RdFetchAddress(pInstruction, pCode, unOffset, unSize, static_cast<unsigned char>(unDispSize & 0xFF));
						if (!RD_SUCCESS(unStatus)) {
							return unStatus;
						}

						pOperand->Type = RD_OP_ADDR;
						pOperand->Info.Address.BaseSeg = pInstruction->Address.Cs;
						pOperand->Info.Address.Offset = pInstruction->Address.Ip;
					}
					break;
				case RD_OPT_B:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_GPR;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);

					if (pInstruction->Exs.vp) {
						return RD_STATUS_INVALID_REGISTER_IN_INSTRUCTION;
					}

					pOperand->Info.Register.Reg = static_cast<unsigned char>(pInstruction->Exs.v & 0xFF);
					break;
				case RD_OPT_C:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_CR;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = static_cast<unsigned char>(((pInstruction->Exs.r << 3) | pInstruction->ModRm.reg) & 0xFF);

					if ((pInstruction->DefCode != RD_CODE_64) && pInstruction->HasLock) {
						pOperand->Info.Register.Reg |= 0x8;
					}

					if (pOperand->Info.Register.Reg && (pOperand->Info.Register.Reg != 2) && (pOperand->Info.Register.Reg != 3) && (pOperand->Info.Register.Reg != 4) && (pOperand->Info.Register.Reg != 8)) {
						return RD_STATUS_INVALID_REGISTER_IN_INSTRUCTION;
					}
					break;
				case RD_OPT_D:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_DR;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = static_cast<unsigned char>(((pInstruction->Exs.r << 3) | pInstruction->ModRm.reg) & 0xFF);

					if (pOperand->Info.Register.Reg >= 8) {
						return RD_STATUS_INVALID_REGISTER_IN_INSTRUCTION;
					}
					break;
				case RD_OPT_T:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_TR;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = static_cast<unsigned char>(((pInstruction->Exs.r << 3) | pInstruction->ModRm.reg) & 0xFF);

					if (pOperand->Info.Register.Reg >= 8) {
						return RD_STATUS_INVALID_REGISTER_IN_INSTRUCTION;
					}
					break;
				case RD_OPT_S:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_SEG;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = pInstruction->ModRm.reg;

					if (pOperand->Info.Register.Reg >= 6) {
						return RD_STATUS_INVALID_REGISTER_IN_INSTRUCTION;
					}

					if ((pOperand->Info.Register.Reg == RDR_CS) && pOperand->Access.Write) {
						return RD_STATUS_CS_LOAD;
					}
					break;
				case RD_OPT_E:
					if (pInstruction->ModRm.mod == 3) {
						pOperand->Type = RD_OP_REG;
						pOperand->Info.Register.Type = RD_REG_GPR;
						pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
						pOperand->Info.Register.Reg = static_cast<unsigned char>(((pInstruction->Exs.b << 3) | pInstruction->ModRm.rm) & 0xFF);
						pOperand->Info.Register.IsHigh8 = (pOperand->Info.Register.Size == 1) && (pOperand->Info.Register.Reg >= 4) && (pInstruction->EncMode == RD_ENCM_LEGACY) && !pInstruction->HasRex;
					} else {
						goto OPT_M;
					}
					break;
				case RD_OPT_F:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_FLG;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = 0;
					pInstruction->FlagsAccess.RegAccess |= pOperand->Access.Access;
					break;
				case RD_OPT_K: {
						static const unsigned char pLut[3] = { RD_SIZE_16BIT, RD_SIZE_32BIT, RD_SIZE_64BIT };
						pInstruction->MemoryAccess |= pOperand->Access.Access;
						pOperand->Type = RD_OP_MEM;
						pOperand->Info.Memory.IsStack = true;
						pOperand->Info.Memory.HasBase = true;
						pOperand->Info.Memory.Base = RDR_RSP;
						pOperand->Info.Memory.BaseSize = pLut[pInstruction->DefStack];
						pOperand->Info.Memory.HasSeg = true;
						pOperand->Info.Memory.Seg = RDR_SS;
						pInstruction->StackWords = static_cast<unsigned char>((pOperand->Size / pInstruction->WordLength) & 0xFF);
						pInstruction->StackAccess |= pOperand->Access.Access;
					}
					break;
				case RD_OPT_G:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_GPR;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);

					if (pInstruction->Exs.rp) {
						return RD_STATUS_INVALID_REGISTER_IN_INSTRUCTION;
					}

					pOperand->Info.Register.Reg = static_cast<unsigned char>(((pInstruction->Exs.r << 3) | pInstruction->ModRm.reg) & 0xFF);
					pOperand->Info.Register.IsHigh8 = (pOperand->Info.Register.Size == 1) && (pOperand->Info.Register.Reg >= 4) && (pInstruction->EncMode == RD_ENCM_LEGACY) && !pInstruction->HasRex;
					break;
				case RD_OPT_R:
					if ((pInstruction->ModRm.mod == 3) || (pInstruction->Attributes & RD_FLAG_MFR)) {
						pOperand->Type = RD_OP_REG;
						pOperand->Info.Register.Type = RD_REG_GPR;
						pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
						pOperand->Info.Register.Reg = static_cast<unsigned char>(((pInstruction->Exs.b << 3) | pInstruction->ModRm.rm) & 0xFF);
						pOperand->Info.Register.IsHigh8 = (pOperand->Info.Register.Size == 1) && (pOperand->Info.Register.Reg >= 4) && (pInstruction->EncMode == RD_ENCM_LEGACY) && !pInstruction->HasRex;
					} else {
						return RD_STATUS_INVALID_ENCODING;
					}
					break;
				case RD_OPT_I: {
						const unsigned int unStatus = RdFetchImmediate(pInstruction, pCode, unOffset, unSize, static_cast<unsigned char>(unDispSize & 0xFF));
						if (!RD_SUCCESS(unStatus)) {
							return unStatus;
						}

						unsigned long long unImm = 0;

						if (pInstruction->HasImm3) {
							unImm = pInstruction->Immediate3;
						} else if (pInstruction->HasImm2) {
							unImm = pInstruction->Immediate2;
						} else {
							unImm = pInstruction->Immediate1;
						}

						pOperand->Type = RD_OP_IMM;

						if (pOperand->Flags.SignExtendedDws) {
							static const unsigned char pLut[3] = { RD_SIZE_16BIT, RD_SIZE_32BIT, RD_SIZE_64BIT };
							pOperand->Size = pLut[pInstruction->EfOpMode];
							pOperand->Info.Immediate.Imm = RD_SIGN_EX(unDispSize, unImm);
						} else if (pOperand->Flags.SignExtendedOp1) {
							pOperand->Size = pInstruction->Operands[0].Size;
							pOperand->Info.Immediate.Imm = RD_SIGN_EX(unDispSize, unImm);
						} else {
							pOperand->Info.Immediate.Imm = unImm;
						}
					}
					break;
				case RD_OPT_Im2z:
					pOperand->Type = RD_OP_IMM;
					pOperand->Info.Immediate.Imm = pInstruction->SseImmediate & 3;
					break;
				case RD_OPT_J: {
						const unsigned int unStatus = RdFetchRelativeOffset(pInstruction, pCode, unOffset, unSize, static_cast<unsigned char>(unDispSize & 0xFF));
						if (!RD_SUCCESS(unStatus)) {
							return unStatus;
						}

						pInstruction->IsRipRelative = true;

						pOperand->Type = RD_OP_OFFS;

						pOperand->Size = pInstruction->WordLength;
						pOperand->Info.RelativeOffset.Rel = RD_SIGN_EX(unDispSize, pInstruction->RelativeOffset);
					}
					break;
				case RD_OPT_N:
					if (pInstruction->ModRm.mod != 3) {
						return RD_STATUS_INVALID_ENCODING;
					}

					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_MMX;
					pOperand->Info.Register.Size = RD_SIZE_64BIT;
					pOperand->Info.Register.Reg = pInstruction->ModRm.rm;
					break;
				case RD_OPT_P:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_MMX;
					pOperand->Info.Register.Size = RD_SIZE_64BIT;
					pOperand->Info.Register.Reg = pInstruction->ModRm.reg;
					break;
				case RD_OPT_Q:
					if (pInstruction->ModRm.mod == 3) {
						pOperand->Type = RD_OP_REG;
						pOperand->Info.Register.Type = RD_REG_MMX;
						pOperand->Info.Register.Size = RD_SIZE_64BIT;
						pOperand->Info.Register.Reg = pInstruction->ModRm.rm;
					} else {
						goto OPT_M;
					}
					break;
				case RD_OPT_O: {
						const unsigned int unStatus = RdFetchMoffset(pInstruction, pCode, unOffset, unSize, 2 << pInstruction->AddrMode);
						if (!RD_SUCCESS(unStatus)) {
							return unStatus;
						}

						pInstruction->MemoryAccess |= pOperand->Access.Access;
						pOperand->Type = RD_OP_MEM;
						pOperand->Info.Memory.HasDisp = true;
						pOperand->Info.Memory.IsDirect = true;
						pOperand->Info.Memory.DispSize = pInstruction->MoffsetLength;
						pOperand->Info.Memory.Disp = pInstruction->Moffset;
						pOperand->Info.Memory.HasSeg = true;
						pOperand->Info.Memory.Seg = RdGetSegOverride(pInstruction, RDR_DS);
					}
					break;
				case RD_OPT_M:
					if (pInstruction->ModRm.mod == 3) {
						return RD_STATUS_INVALID_ENCODING;
					}

		OPT_M:
					pInstruction->MemoryAccess |= pOperand->Access.Access;
					pOperand->Type = RD_OP_MEM;
					pOperand->Info.Memory.HasSeg = true;

					if (pInstruction->AddrMode == RD_ADDR_16) {
						if (pInstruction->Attributes & RD_FLAG_NOA16) {
							return RD_STATUS_16_BIT_ADDRESSING_NOT_SUPPORTED;
						}

						switch (pInstruction->ModRm.rm) {
							case 0:
								pOperand->Info.Memory.HasBase = true;
								pOperand->Info.Memory.HasIndex = true;
								pOperand->Info.Memory.Scale = 1;
								pOperand->Info.Memory.Base = RDR_BX;
								pOperand->Info.Memory.Index = RDR_SI;
								pOperand->Info.Memory.BaseSize = RD_SIZE_16BIT;
								pOperand->Info.Memory.IndexSize = RD_SIZE_16BIT;
								pOperand->Info.Memory.Seg = RDR_DS;
								break;
							case 1:
								pOperand->Info.Memory.HasBase = true;
								pOperand->Info.Memory.HasIndex = true;
								pOperand->Info.Memory.Scale = 1;
								pOperand->Info.Memory.Base = RDR_BX;
								pOperand->Info.Memory.Index = RDR_DI;
								pOperand->Info.Memory.BaseSize = RD_SIZE_16BIT;
								pOperand->Info.Memory.IndexSize = RD_SIZE_16BIT;
								pOperand->Info.Memory.Seg = RDR_DS;
								break;
							case 2:
								pOperand->Info.Memory.HasBase = true;
								pOperand->Info.Memory.HasIndex = true;
								pOperand->Info.Memory.Scale = 1;
								pOperand->Info.Memory.Base = RDR_BP;
								pOperand->Info.Memory.Index = RDR_SI;
								pOperand->Info.Memory.BaseSize = RD_SIZE_16BIT;
								pOperand->Info.Memory.IndexSize = RD_SIZE_16BIT;
								pOperand->Info.Memory.Seg = RDR_SS;
								break;
							case 3:
								pOperand->Info.Memory.HasBase = true;
								pOperand->Info.Memory.HasIndex = true;
								pOperand->Info.Memory.Scale = 1;
								pOperand->Info.Memory.Base = RDR_BP;
								pOperand->Info.Memory.Index = RDR_DI;
								pOperand->Info.Memory.BaseSize = RD_SIZE_16BIT;
								pOperand->Info.Memory.IndexSize = RD_SIZE_16BIT;
								pOperand->Info.Memory.Seg = RDR_SS;
								break;
							case 4:
								pOperand->Info.Memory.HasBase = true;
								pOperand->Info.Memory.Base = RDR_SI;
								pOperand->Info.Memory.BaseSize = RD_SIZE_16BIT;
								pOperand->Info.Memory.Seg = RDR_DS;
								break;
							case 5:
								pOperand->Info.Memory.HasBase = true;
								pOperand->Info.Memory.Base = RDR_DI;
								pOperand->Info.Memory.BaseSize = RD_SIZE_16BIT;
								pOperand->Info.Memory.Seg = RDR_DS;
								break;
							case 6:
								if (pInstruction->ModRm.mod != 0) {
									pOperand->Info.Memory.HasBase = true;
									pOperand->Info.Memory.Base = RDR_BP;
									pOperand->Info.Memory.BaseSize = RD_SIZE_16BIT;
									pOperand->Info.Memory.Seg = RDR_SS;
								} else {
									pOperand->Info.Memory.Seg = RDR_DS;
								}
								break;
							case 7:
								pOperand->Info.Memory.HasBase = true;
								pOperand->Info.Memory.Base = RDR_BX;
								pOperand->Info.Memory.BaseSize = RD_SIZE_16BIT;
								pOperand->Info.Memory.Seg = RDR_DS;
								break;
						}

						pOperand->Info.Memory.HasDisp = pInstruction->HasDisp;
						pOperand->Info.Memory.DispSize = pInstruction->DispLength;
						pOperand->Info.Memory.Disp = RD_SIGN_EX(pInstruction->DispLength, pInstruction->Displacement);
					} else {
						unsigned char unDefSize = (pInstruction->AddrMode == RD_ADDR_32 ? RD_SIZE_32BIT : RD_SIZE_64BIT);

						pOperand->Info.Memory.Seg = RDR_DS;

						if (pInstruction->HasSib) {
							if (!((pInstruction->ModRm.mod == 0) && (pInstruction->Sib.base == RDR_RBP))) {
								pOperand->Info.Memory.HasBase = true;
								pOperand->Info.Memory.BaseSize = unDefSize;
								pOperand->Info.Memory.Base = static_cast<unsigned char>(((pInstruction->Exs.b << 3) | pInstruction->Sib.base) & 0xFF);

								if ((pOperand->Info.Memory.Base == RDR_RSP) || (pOperand->Info.Memory.Base == RDR_RBP)) {
									pOperand->Info.Memory.Seg = RDR_SS;
								}
							}

							if ((((pInstruction->Exs.x << 3) | pInstruction->Sib.index) != RDR_RSP) || RD_HAS_VSIB(pInstruction)) {
								pOperand->Info.Memory.HasIndex = true;
								pOperand->Info.Memory.IndexSize = unDefSize;
								pOperand->Info.Memory.Index = static_cast<unsigned char>(((pInstruction->Exs.x << 3) | pInstruction->Sib.index) & 0xFF);

								if (RD_HAS_VSIB(pInstruction)) {
									pOperand->Info.Memory.IndexSize = unVSibRegSize;
									pOperand->Info.Memory.Index |= pInstruction->Exs.vp << 4;
								}

								pOperand->Info.Memory.Scale = 1 << pInstruction->Sib.scale;
							}
						} else {
							if ((pInstruction->ModRm.mod == 0) && (pInstruction->ModRm.rm == RDR_RBP)) {
								pOperand->Info.Memory.IsRipRel = pInstruction->IsRipRelative = (pInstruction->DefCode == RD_CODE_64);

								if (pOperand->Info.Memory.IsRipRel && (pInstruction->Attributes & RD_FLAG_NO_RIP_REL)) {
									return RD_STATUS_RIP_REL_ADDRESSING_NOT_SUPPORTED;
								}
							} else {
								pOperand->Info.Memory.HasBase = true;
								pOperand->Info.Memory.BaseSize = unDefSize;
								pOperand->Info.Memory.Base = static_cast<unsigned char>(((pInstruction->Exs.b << 3) | pInstruction->ModRm.rm) & 0xFF);

								if ((pOperand->Info.Memory.Base == RDR_RSP) || (pOperand->Info.Memory.Base == RDR_RBP)) {
									pOperand->Info.Memory.Seg = RDR_SS;
								}
							}
						}

						pOperand->Info.Memory.HasDisp = pInstruction->HasDisp;
						pOperand->Info.Memory.DispSize = pInstruction->DispLength;
						pOperand->Info.Memory.Disp = RD_SIGN_EX(pInstruction->DispLength, pInstruction->Displacement);
					}

					if (pInstruction->HasSeg) {
						pOperand->Info.Memory.Seg = RdGetSegOverride(pInstruction, pOperand->Info.Memory.Seg);
					}

					if (RD_HAS_VSIB(pInstruction)) {
						if (!pInstruction->HasSib) {
							return RD_STATUS_VSIB_WITHOUT_SIB;
						}

						pOperand->Info.Memory.IsVSib = true;

						pOperand->Info.Memory.VSib.IndexSize = unVSibIndexSize;
						pOperand->Info.Memory.VSib.ElemCount = unVSibIndexCount;
						pOperand->Info.Memory.VSib.ElemSize = (unVSibIndexCount != 0) ? static_cast<unsigned char>((unDispSize / unVSibIndexCount) & 0xFF) : 0;
					}

					if (RD_HAS_SIBMEM(pInstruction)) {
						if (!pInstruction->HasSib) {
							return RD_STATUS_SIBMEM_WITHOUT_SIB;
						}

						pOperand->Info.Memory.IsSibMem = true;
					}

					if (pInstruction->HasBroadcast) {
						pOperand->Info.Memory.HasBroadcast = true;

						if (unOPD & RD_OPD_B32) {
							unDispSize = RD_SIZE_32BIT;
						} else if (unOPD & RD_OPD_B64) {
							unDispSize = RD_SIZE_64BIT;
						} else if (unOPD & RD_OPD_B16) {
							unDispSize = RD_SIZE_16BIT;
						} else {
							unDispSize = bWidth ? RD_SIZE_64BIT : RD_SIZE_32BIT;
						}

						pOperand->Size = pOperand->RawSize = unDispSize;
					}

					if (pInstruction->HasCompDisp) {
						pOperand->Info.Memory.HasCompDisp = true;
						pOperand->Info.Memory.CompDispSize = RdGetCompDispSize(pInstruction, pOperand->Size);
					}

					pOperand->Info.Memory.IsMib = RD_HAS_MIB(pInstruction);

					pOperand->Info.Memory.IsBitbase = RD_HAS_BITBASE(pInstruction);

					if (RD_HAS_AG(pInstruction)) {
						pOperand->Info.Memory.IsAG = true;

						pOperand->Info.Memory.HasSeg = false;
						pOperand->Info.Memory.Seg = 0;
					}

					if (RD_HAS_SHS(pInstruction)) {
						pOperand->Info.Memory.IsShadowStack = true;
						pOperand->Info.Memory.ShStkType = RD_SHSTK_EXPLICIT;
					}
					break;
				case RD_OPT_H:
					if (pInstruction->EncMode == RD_ENCM_LEGACY) {
						return RD_STATUS_HINT_OPERARD_NOT_USED;
					} else {
						pOperand->Type = RD_OP_REG;
						pOperand->Info.Register.Type = RD_REG_SSE;
						pOperand->Info.Register.Size = static_cast<unsigned int>(((unDispSize < RD_SIZE_128BIT) ? RD_SIZE_128BIT : unDispSize) & 0xFFFFFFFF);
						pOperand->Info.Register.Reg = static_cast<unsigned char>(((pInstruction->Exs.vp << 4) | pInstruction->Exs.v) & 0xFF);
					}
					break;
				case RD_OPT_L: {
						const unsigned int unStatus = RdFetchSseImmediate(pInstruction, pCode, unOffset, unSize, 1);
						if (!RD_SUCCESS(unStatus)) {
							return unStatus;
						}

						pOperand->Type = RD_OP_REG;
						pOperand->Info.Register.Type = RD_REG_SSE;
						pOperand->Info.Register.Size = static_cast<unsigned int>(((unDispSize < RD_SIZE_128BIT) ? RD_SIZE_128BIT : unDispSize) & 0xFFFFFFFF);
						pOperand->Info.Register.Reg = (pInstruction->SseImmediate >> 4) & 0xF;

						if (pInstruction->DefCode != RD_CODE_64) {
							pOperand->Info.Register.Reg &= 0x7;
						}
					}
					break;
				case RD_OPT_U:
					if (pInstruction->ModRm.mod != 3) {
						return RD_STATUS_INVALID_ENCODING;
					}

					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_SSE;
					pOperand->Info.Register.Size = static_cast<unsigned int>(((unDispSize < RD_SIZE_128BIT) ? RD_SIZE_128BIT : unDispSize) & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = static_cast<unsigned char>(((pInstruction->Exs.b << 3) | pInstruction->ModRm.rm) & 0xFF);
					if (pInstruction->HasEvex || pInstruction->HasMvex) {
						pOperand->Info.Register.Reg |= pInstruction->Exs.x << 4;
					}
					break;
				case RD_OPT_V:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_SSE;
					pOperand->Info.Register.Size = static_cast<unsigned int>(((unDispSize < RD_SIZE_128BIT) ? RD_SIZE_128BIT : unDispSize) & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = static_cast<unsigned char>(((pInstruction->Exs.r << 3) | pInstruction->ModRm.reg) & 0xFF);
					if (pInstruction->HasEvex || pInstruction->HasMvex) {
						pOperand->Info.Register.Reg |= pInstruction->Exs.rp << 4;
					}
					break;
				case RD_OPT_W:
					if (pInstruction->ModRm.mod == 3) {
						pOperand->Type = RD_OP_REG;
						pOperand->Info.Register.Type = RD_REG_SSE;
						pOperand->Info.Register.Size = static_cast<unsigned int>(((unDispSize < RD_SIZE_128BIT) ? RD_SIZE_128BIT : unDispSize) & 0xFFFFFFFF);
						pOperand->Info.Register.Reg = static_cast<unsigned char>(((pInstruction->Exs.b << 3) | pInstruction->ModRm.rm) & 0xFF);
						if (pInstruction->HasEvex || pInstruction->HasMvex) {
							pOperand->Info.Register.Reg |= pInstruction->Exs.x << 4;
						}
					} else {
						goto OPT_M;
					}
					break;
				case RD_OPT_X:
				case RD_OPT_Y:
				case RD_OPT_MEM_rDI:
					pInstruction->MemoryAccess |= pOperand->Access.Access;
					pOperand->Type = RD_OP_MEM;
					pOperand->Info.Memory.HasBase = true;
					pOperand->Info.Memory.BaseSize = 2 << pInstruction->AddrMode;
					pOperand->Info.Memory.HasSeg = true;
					pOperand->Info.Memory.Base = static_cast<unsigned char>((((unOPT == RD_OPT_X) ? RDR_RSI : RDR_RDI)) & 0xFF);
					pOperand->Info.Memory.IsString = ((unOPT == RD_OPT_X) || (unOPT == RD_OPT_Y));

					if (unOPT == RD_OPT_Y) {
						pOperand->Info.Memory.Seg = RDR_ES;
					} else {
						pOperand->Info.Memory.Seg = RdGetSegOverride(pInstruction, RDR_DS);
					}
					break;
				case RD_OPT_MEM_rBX_AL:
					pInstruction->MemoryAccess |= pOperand->Access.Access;
					pOperand->Type = RD_OP_MEM;
					pOperand->Info.Memory.HasBase = true;
					pOperand->Info.Memory.HasIndex = true;
					pOperand->Info.Memory.BaseSize = 2 << pInstruction->AddrMode;
					pOperand->Info.Memory.IndexSize = RD_SIZE_8BIT;
					pOperand->Info.Memory.Base = RDR_RBX;
					pOperand->Info.Memory.Index = RDR_AL;
					pOperand->Info.Memory.Scale = 1;
					pOperand->Info.Memory.HasSeg = true;
					pOperand->Info.Memory.Seg = RdGetSegOverride(pInstruction, RDR_DS);
					break;
				case RD_OPT_MEM_rAX:
					pInstruction->MemoryAccess |= pOperand->Access.Access;
					pOperand->Type = RD_OP_MEM;
					pOperand->Info.Memory.HasBase = true;
					pOperand->Info.Memory.BaseSize = 2 << pInstruction->AddrMode;
					pOperand->Info.Memory.Base = RDR_RAX;
					pOperand->Info.Memory.HasSeg = true;
					pOperand->Info.Memory.Seg = RdGetSegOverride(pInstruction, RDR_DS);
					break;
				case RD_OPT_MEM_rCX:
					pInstruction->MemoryAccess |= pOperand->Access.Access;
					pOperand->Type = RD_OP_MEM;
					pOperand->Info.Memory.HasBase = true;
					pOperand->Info.Memory.BaseSize = 2 << pInstruction->AddrMode;
					pOperand->Info.Memory.Base = RDR_RCX;
					pOperand->Info.Memory.HasSeg = true;
					pOperand->Info.Memory.Seg = RdGetSegOverride(pInstruction, RDR_DS);
					break;
				case RD_OPT_MEM_SHS:
					pInstruction->MemoryAccess |= pOperand->Access.Access;
					pOperand->Type = RD_OP_MEM;
					pOperand->Info.Memory.IsShadowStack = true;
					pOperand->Info.Memory.ShStkType = RD_SHSTK_SSP_LD_ST;
					break;
				case RD_OPT_MEM_SHS0:
					pInstruction->MemoryAccess |= pOperand->Access.Access;
					pOperand->Type = RD_OP_MEM;
					pOperand->Info.Memory.IsShadowStack = true;
					pOperand->Info.Memory.ShStkType = RD_SHSTK_PL0_SSP;
					break;
				case RD_OPT_MEM_SMSRT:
					pInstruction->MemoryAccess |= pOperand->Access.Access;
					pOperand->Type = RD_OP_MEM;
					pOperand->Info.Memory.HasBase = true;
					pOperand->Info.Memory.BaseSize = 2 << pInstruction->AddrMode;
					pOperand->Info.Memory.Base = RDR_RSI;
					pOperand->Info.Memory.HasSeg = false;
					break;
				case RD_OPT_MEM_DMSRT:
					pInstruction->MemoryAccess |= pOperand->Access.Access;
					pOperand->Type = RD_OP_MEM;
					pOperand->Info.Memory.HasBase = true;
					pOperand->Info.Memory.BaseSize = 2 << pInstruction->AddrMode;
					pOperand->Info.Memory.Base = RDR_RDI;
					pOperand->Info.Memory.HasSeg = false;
					break;
				case RD_OPT_MEM_SHSP:
					pInstruction->MemoryAccess |= pOperand->Access.Access;
					pOperand->Type = RD_OP_MEM;
					pOperand->Info.Memory.IsShadowStack = true;
					pOperand->Info.Memory.ShStkType = RD_SHSTK_SSP_PUSH_POP;
					break;
				case RD_OPT_Z:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_GPR;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = static_cast<unsigned char>(((pInstruction->Exs.b << 3) | (pInstruction->PrimaryOpCode & 0x7)) & 0xFF);
					pOperand->Info.Register.IsHigh8 = (pOperand->Info.Register.Size == 1) && (pOperand->Info.Register.Reg >= 4) && (pInstruction->EncMode == RD_ENCM_LEGACY) && !pInstruction->HasRex;
					break;
				case RD_OPT_rB:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_BND;
					pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
					pOperand->Info.Register.Reg = static_cast<unsigned char>(((pInstruction->Exs.r << 3) | pInstruction->ModRm.reg) & 0xFF);
					if (pOperand->Info.Register.Reg >= 4) {
						return RD_STATUS_INVALID_REGISTER_IN_INSTRUCTION;
					}
					break;
				case RD_OPT_mB:
					if (pInstruction->ModRm.mod == 3) {
						pOperand->Type = RD_OP_REG;
						pOperand->Info.Register.Type = RD_REG_BND;
						pOperand->Info.Register.Size = static_cast<unsigned int>(unDispSize & 0xFFFFFFFF);
						pOperand->Info.Register.Reg = static_cast<unsigned char>(((pInstruction->Exs.b << 3) | pInstruction->ModRm.rm) & 0xFF);
						if (pOperand->Info.Register.Reg >= 4) {
							return RD_STATUS_INVALID_REGISTER_IN_INSTRUCTION;
						}
					} else {
						goto OPT_M;
					}
					break;
				case RD_OPT_rK:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_MSK;

					if (pInstruction->Exs.r || pInstruction->Exs.rp) {
						return RD_STATUS_INVALID_REGISTER_IN_INSTRUCTION;
					}

					pOperand->Info.Register.Size = RD_SIZE_64BIT;
					pOperand->Info.Register.Reg = static_cast<unsigned char>(pInstruction->ModRm.reg & 0xFF);

					break;
				case RD_OPT_vK:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_MSK;
					pOperand->Info.Register.Size = RD_SIZE_64BIT;
					pOperand->Info.Register.Reg = static_cast<unsigned char>(pInstruction->Exs.v & 0xFF);
					if (pOperand->Info.Register.Reg >= 8) {
						return RD_STATUS_INVALID_REGISTER_IN_INSTRUCTION;
					}
					break;
				case RD_OPT_mK:
					if (pInstruction->ModRm.mod == 3) {
						pOperand->Type = RD_OP_REG;
						pOperand->Info.Register.Type = RD_REG_MSK;
						pOperand->Info.Register.Size = RD_SIZE_64BIT;

						pOperand->Info.Register.Reg = pInstruction->ModRm.rm;
					} else {
						goto OPT_M;
					}
					break;
				case RD_OPT_aK:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_MSK;
					pOperand->Info.Register.Size = RD_SIZE_64BIT;
					pOperand->Info.Register.Reg = pInstruction->Exs.k;
					break;
				case RD_OPT_rM:
					pOperand->Type = RD_OP_MEM;
					pOperand->Info.Memory.HasBase = true;
					pOperand->Info.Memory.Base = static_cast<unsigned char>(((pInstruction->Exs.r << 3) | pInstruction->ModRm.reg) & 0xFF);
					pOperand->Info.Memory.BaseSize = 2 << pInstruction->AddrMode;
					pOperand->Info.Memory.HasSeg = true;
					pOperand->Info.Memory.Seg = RDR_ES;
					break;
				case RD_OPT_mM:
					pOperand->Type = RD_OP_MEM;
					pOperand->Info.Memory.HasBase = true;
					pOperand->Info.Memory.Base = static_cast<unsigned char>(((pInstruction->Exs.m << 3) | pInstruction->ModRm.rm) & 0xFF);
					pOperand->Info.Memory.BaseSize = 2 << pInstruction->AddrMode;
					pOperand->Info.Memory.HasSeg = true;
					pOperand->Info.Memory.Seg = RdGetSegOverride(pInstruction, RDR_DS);
					break;
				case RD_OPT_rT:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_TILE;
					pOperand->Info.Register.Size = unDispSize;
					pOperand->Info.Register.Reg = pInstruction->ModRm.reg;

					if (pInstruction->Exs.r) {
						return RD_STATUS_INVALID_REGISTER_IN_INSTRUCTION;
					}
					break;
				case RD_OPT_mT:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_TILE;
					pOperand->Info.Register.Size = unDispSize;
					pOperand->Info.Register.Reg = pInstruction->ModRm.rm;

					if (pInstruction->Exs.b) {
						return RD_STATUS_INVALID_REGISTER_IN_INSTRUCTION;
					}
					break;
				case RD_OPT_vT:
					pOperand->Type = RD_OP_REG;
					pOperand->Info.Register.Type = RD_REG_TILE;
					pOperand->Info.Register.Size = unDispSize;
					pOperand->Info.Register.Reg = pInstruction->Exs.v;

					if (pOperand->Info.Register.Reg > 7) {
						return RD_STATUS_INVALID_REGISTER_IN_INSTRUCTION;
					}
					break;
				default:
					return RD_STATUS_INVALID_INSTRUX;
			}

			if (pOperand->Type == RD_OP_REG) {
				if (unOPB) {
					pOperand->Info.Register.Count = unOPB;
					pOperand->Info.Register.Reg &= ~(unOPB - 1);
					pOperand->Info.Register.IsBlock = true;
				} else {
					pOperand->Info.Register.Count = 1;
				}
			}

			pInstruction->OperandsEncodingMap |= 1 << g_pOperandMap[unOPT];

			pOperand->Encoding = static_cast<RD_OPERARD_ENCODING>(g_pOperandMap[unOPT]);

			if (unOPD) {
				if ((unOPD & RD_OPD_MASK) && pInstruction->HasMask) {
					pOperand->Decorator.HasMask = true;
					pOperand->Decorator.Mask.Msk = static_cast<unsigned char>(pInstruction->Exs.k & 0xFF);
				}

				if ((unOPD & RD_OPD_Z) && pInstruction->HasZero) {
					if (pOperand->Type == RD_OP_MEM) {
						return RD_STATUS_ZEROING_ON_MEMORY;
					}

					pOperand->Decorator.HasZero = true;
				}

				if ((unOPD & RD_OPD_BCAST) && pInstruction->HasBroadcast) {
					pOperand->Decorator.HasBroadcast = true;
					pOperand->Decorator.Broadcast.Size = static_cast<unsigned char>(pOperand->Size);
					pOperand->Decorator.Broadcast.Count = static_cast<unsigned char>((unBroadcastSize / pOperand->Size) & 0xFF);
				}

				if (unOPD & RD_OPD_SAE) {
					pOperand->Decorator.HasSae = pInstruction->HasSae;
				}

				if (unOPD & RD_OPD_ER) {
					pOperand->Decorator.HasEr = pInstruction->HasEr;
				}
			}

			return RD_STATUS_SUCCESS;
		}

		static void RdZeroMemory(void* pMemory, size_t unSize) {
			for (size_t i = 0; i < unSize; ++i) {
				reinterpret_cast<unsigned char*>(pMemory)[i] = 0;
			}
		}

		static unsigned int RdValidateInstruction(PINSTRUCTION pInstruction) {
			if (pInstruction->HasLock && (!(pInstruction->Attributes & RD_FLAG_LOCK_SPECIAL) || (RD_CODE_64 == pInstruction->DefCode)) && (!RD_LOCK_SUPPORT(pInstruction) || (pInstruction->Operands[0].Type != RD_OP_MEM))) {
				return RD_STATUS_BAD_LOCK_PREFIX;
			}

			if (pInstruction->HasOpSize && (pInstruction->Attributes & RD_FLAG_NO66)) {
				return RD_STATUS_66_NOT_ACCEPTED;
			}

			if (pInstruction->EncMode != RD_ENCM_LEGACY) {
				if (!(pInstruction->OperandsEncodingMap & (1 << RD_OPE_V)) && pInstruction->Exs.v) {
					return RD_STATUS_VEX_VVVV_MUST_BE_ZERO;
				}

				if (!(pInstruction->OperandsEncodingMap & (1 << RD_OPE_V)) && !RD_HAS_VSIB(pInstruction) && pInstruction->Exs.vp) {
					return RD_STATUS_BAD_EVEX_V_PRIME;
				}

				if (RD_HAS_VSIB(pInstruction) && (pInstruction->Category != RD_CAT_SCATTER)) {

					unsigned char pUsedVects[32];
					RdZeroMemory(pUsedVects, sizeof(pUsedVects));

					for (unsigned char i = 0; i < pInstruction->OperandsCount; ++i) {
						if ((pInstruction->Operands[i].Type == RD_OP_REG) && (pInstruction->Operands[i].Info.Register.Type == RD_REG_SSE)) {
							if (++pUsedVects[pInstruction->Operands[i].Info.Register.Reg] > 1) {
								return RD_STATUS_INVALID_VSIB_REGS;
							}
						} else if (pInstruction->Operands[i].Type == RD_OP_MEM) {
							if (++pUsedVects[pInstruction->Operands[i].Info.Memory.Index] > 1) {
								return RD_STATUS_INVALID_VSIB_REGS;
							}
						}
					}
				}

				if (pInstruction->ExceptionClass == RD_EXC_AMX) {
					if (pInstruction->ExceptionType == RD_EXT_AMX_E4) {
						if ((pInstruction->Operands[0].Info.Register.Reg == pInstruction->Operands[1].Info.Register.Reg) || (pInstruction->Operands[0].Info.Register.Reg == pInstruction->Operands[2].Info.Register.Reg) || (pInstruction->Operands[1].Info.Register.Reg == pInstruction->Operands[2].Info.Register.Reg)) {
							return RD_STATUS_INVALID_TILE_REGS;
						}
					} else {
						if (pInstruction->Exs.v) {
							return RD_STATUS_VEX_VVVV_MUST_BE_ZERO;
						}
					}
				}

				if (pInstruction->ExceptionClass == RD_EXC_EVEX) {
					if (pInstruction->ExceptionType == RD_EXT_E4S || pInstruction->ExceptionType == RD_EXT_E10S) {
						if ((pInstruction->Operands[0].Type == RD_OP_REG) && (pInstruction->Operands[2].Type == RD_OP_REG) && (pInstruction->Operands[0].Info.Register.Reg == pInstruction->Operands[2].Info.Register.Reg)) {
							return RD_STATUS_INVALID_DEST_REGS;
						}

						if ((pInstruction->Operands[0].Type == RD_OP_REG) && (pInstruction->Operands[3].Type == RD_OP_REG) && (pInstruction->Operands[0].Info.Register.Reg == pInstruction->Operands[3].Info.Register.Reg)) {
							return RD_STATUS_INVALID_DEST_REGS;
						}
					}
				}
			}

			return RD_STATUS_SUCCESS;
		}

		void RdInitContext(PRD_CONTEXT pCTX) {
			RdZeroMemory(pCTX, sizeof(RD_CONTEXT));
		}

		unsigned int RdDecodeWithContext(PINSTRUCTION pInstruction, unsigned char* pCode, size_t unSize, PRD_CONTEXT pCTX) {
			if (!pInstruction) {
				return RD_STATUS_INVALID_PARAMETER;
			}

			if (!pCode) {
				return RD_STATUS_INVALID_PARAMETER;
			}

			if (!unSize) {
				return RD_STATUS_INVALID_PARAMETER;
			}

			if (!pCTX) {
				return RD_STATUS_INVALID_PARAMETER;
			}

			if (pCTX->DefCode > RD_CODE_64) {
				return RD_STATUS_INVALID_PARAMETER;
			}

			if (pCTX->DefData > RD_DATA_64) {
				return RD_STATUS_INVALID_PARAMETER;
			}

			if (pCTX->VendMode > RD_VERD_CYRIX) {
				return RD_STATUS_INVALID_PARAMETER;
			}

			RdZeroMemory(pInstruction, sizeof(INSTRUCTION));

			pInstruction->DefCode = static_cast<unsigned char>(pCTX->DefCode & 0xFF);
			pInstruction->DefData = static_cast<unsigned char>(pCTX->DefData & 0xFF);
			pInstruction->DefStack = static_cast<unsigned char>(pCTX->DefStack & 0xFF);
			pInstruction->VendMode = static_cast<unsigned char>(pCTX->VendMode & 0xFF);
			pInstruction->FeatMode = static_cast<unsigned char>(pCTX->FeatMode & 0xFF);

			for (unsigned int unOpIndex = 0; unOpIndex < ((unSize < RD_MAX_INSTRUCTION_LENGTH) ? unSize : RD_MAX_INSTRUCTION_LENGTH); ++unOpIndex) {
				pInstruction->InstructionBytes[unOpIndex] = pCode[unOpIndex];
			}

			unsigned int unStatus = RD_STATUS_SUCCESS;

			if (g_pPrefixesMap[pInstruction->InstructionBytes[0]] != RD_PREF_CODE_NONE) {
				unStatus = RdFetchPrefixes(pInstruction, pInstruction->InstructionBytes, 0, unSize);
				if (!RD_SUCCESS(unStatus)) {
					return unStatus;
				}
			}

			unStatus = RdGetAddrAndOpMode(pInstruction);
			if (!RD_SUCCESS(unStatus)) {
				return unStatus;
			}

			PRD_INSTRUCTION pIns = nullptr;
			unStatus = RdFindInstruction(pInstruction, pInstruction->InstructionBytes, unSize, &pIns);
			if (!RD_SUCCESS(unStatus)) {
				return unStatus;
			}

			pInstruction->Attributes = pIns->m_unAttributes;
			pInstruction->Instruction = pInstruction->Iclass = static_cast<RD_INS_CLASS>(pIns->m_unInstruction);
			pInstruction->Category = static_cast<RD_INS_CATEGORY>(pIns->m_unCategory);
			pInstruction->IsaSet = static_cast<RD_INS_SET>(pIns->m_unIsaSet);
			pInstruction->FlagsAccess.Undefined.Raw = pIns->m_unSetFlags & pIns->m_unClearedFlags;
			pInstruction->FlagsAccess.Tested.Raw = pIns->m_unTestedFlags;
			pInstruction->FlagsAccess.Modified.Raw = pIns->m_unModifiedFlags;
			pInstruction->FlagsAccess.Set.Raw = pIns->m_unSetFlags ^ pInstruction->FlagsAccess.Undefined.Raw;
			pInstruction->FlagsAccess.Cleared.Raw = pIns->m_unClearedFlags ^ pInstruction->FlagsAccess.Undefined.Raw;
			pInstruction->CpuidFlag.Flag = pIns->m_unCpuidFlag;
			pInstruction->ValidModes.Raw = pIns->m_unValidModes;
			pInstruction->ValidPrefixes.Raw = pIns->m_unValidPrefixes;
			pInstruction->ValidDecorators.Raw = pIns->m_unValidDecorators;
			*reinterpret_cast<unsigned char*>(&pInstruction->FpuFlagsAccess) = pIns->m_unFpuFlags;

			pInstruction->ExceptionClass = pIns->m_unExcClass;
			pInstruction->ExceptionType = pIns->m_unExcType;

			pInstruction->TupleType = pIns->m_unTupleType;

			for (unsigned char i = 0; i < sizeof(pInstruction->Mnemonic); ++i) {
				pInstruction->Mnemonic[i] = g_pMnemonics[pIns->m_unMnemonic][i];
				if (pInstruction->Mnemonic[i] == '\0') {
					break;
				}
			}

			unStatus = RdGetEffectiveOpMode(pInstruction);
			if (!RD_SUCCESS(unStatus)) {
				return unStatus;
			}

			if (pInstruction->HasEvex) {
				unStatus = RdPostProcessEvex(pInstruction);
				if (!RD_SUCCESS(unStatus)) {
					return unStatus;
				}
			}

			if (RD_HAS_VECTOR(pInstruction)) {
				unStatus = RdGetVectorLength(pInstruction);
				if (!RD_SUCCESS(unStatus)) {
					return unStatus;
				}
			}

			if (RD_HAS_SSE_CONDITION(pInstruction)) {
				pInstruction->SseCondition = pInstruction->Immediate1 & 0x1F;
			}

			if (RD_HAS_CONDITION(pInstruction)) {
				pInstruction->Condition = pInstruction->Predicate = pInstruction->PrimaryOpCode & 0xF;
			}

			pInstruction->ExpOperandsCount = RD_EXP_OPS_CNT(pIns->m_unOpsCount);
			pInstruction->OperandsCount = pInstruction->ExpOperandsCount + RD_IMP_OPS_CNT(pIns->m_unOpsCount);

			for (unsigned char unOpIndex = 0; unOpIndex < pInstruction->OperandsCount; ++unOpIndex) {
				unStatus = RdParseOperand(pInstruction, pInstruction->InstructionBytes, pInstruction->Length, unSize, unOpIndex, pIns->m_pOperands[unOpIndex]);
				if (!RD_SUCCESS(unStatus)) {
					return unStatus;
				}
			}

			if (pInstruction->Rep && (pInstruction->HasLock || (pInstruction->ValidPrefixes.HleNoLock)) && (pInstruction->Operands[0].Type == RD_OP_MEM)) {
				if ((RD_XACQUIRE_SUPPORT(pInstruction) || RD_HLE_SUPPORT(pInstruction)) && (pInstruction->Rep == RD_PREFIX_G1_XACQUIRE)) {
					pInstruction->IsXacquireEnabled = true;
				} else if ((RD_XRELEASE_SUPPORT(pInstruction) || RD_HLE_SUPPORT(pInstruction)) && (pInstruction->Rep == RD_PREFIX_G1_XRELEASE)) {
					pInstruction->IsXreleaseEnabled = true;
				}
			}

			pInstruction->IsRepeated = (pInstruction->Rep && (RD_REP_SUPPORT(pInstruction) || RD_REPC_SUPPORT(pInstruction)));

			pInstruction->IsCetTracked = RD_HAS_CETT(pInstruction) && (!RD_DNT_SUPPORT(pInstruction) || (pInstruction->Seg != RD_PREFIX_G2_NO_TRACK));

			if (pInstruction->RipAccess & RD_ACCESS_ANY_WRITE) {
				pInstruction->BranchInfo.IsBranch = 1;
				pInstruction->BranchInfo.IsConditional = pInstruction->Category == RD_CAT_COND_BR;

				pInstruction->BranchInfo.IsIndirect = ((!pInstruction->Operands[0].Flags.IsDefault) && ((pInstruction->Operands[0].Type == RD_OP_REG) || (pInstruction->Operands[0].Type == RD_OP_MEM))) || (pInstruction->Category == RD_CAT_RET);
				pInstruction->BranchInfo.IsFar = (pInstruction->CsAccess & RD_ACCESS_ANY_WRITE);
			}

			unStatus = RdValidateInstruction(pInstruction);
			if (!RD_SUCCESS(unStatus)) {
				return unStatus;
			}

			return RD_STATUS_SUCCESS;
		}

		unsigned int RdDecodeEx(PINSTRUCTION pInstruction, unsigned char* pCode, size_t unSize, unsigned char unDefCode, unsigned char unDefData, unsigned char unDefStack, unsigned char unVendor) {
			RD_CONTEXT ctx;
			RdInitContext(&ctx);

			ctx.DefCode = unDefCode;
			ctx.DefData = unDefData;
			ctx.DefStack = unDefStack;
			ctx.VendMode = unVendor;
			ctx.FeatMode = RD_FEAT_ALL;

			return RdDecodeWithContext(pInstruction, pCode, unSize, &ctx);
		}

		unsigned int RdDecode(PINSTRUCTION pInstruction, unsigned char* pCode, size_t unSize, unsigned char unDefCode, unsigned char unDefData) {
			return RdDecodeEx(pInstruction, pCode, unSize, unDefCode, unDefData, unDefCode, RD_VERD_ANY);
		}

		unsigned int RdDecode(PINSTRUCTION pInstruction, unsigned char* pCode, unsigned char unDefCode, unsigned char unDefData) {
			return RdDecodeEx(pInstruction, pCode, RD_MAX_INSTRUCTION_LENGTH, unDefCode, unDefData, unDefCode, RD_VERD_ANY);
		}

		bool RdIsInstruxRipRelative(PINSTRUCTION pInstruction) {
			if (!pInstruction) {
				return false;
			} else {
				return pInstruction->IsRipRelative;
			}
		}

		unsigned int RdGetFullAccessMap(PINSTRUCTION pInstruction, PRD_ACCESS_MAP pAccessMap) {
			if (!pInstruction) {
				return RD_STATUS_INVALID_PARAMETER;
			}

			if (!pAccessMap) {
				return RD_STATUS_INVALID_PARAMETER;
			}

			for (unsigned char i = 0; i < pInstruction->OperandsCount; ++i) {
				PRD_OPERAND pOperand = &pInstruction->Operands[i];

				if (pOperand->Type == RD_OP_MEM) {
					if (pOperand->Info.Memory.IsStack) {
						pAccessMap->StackAccess |= pOperand->Access.Access;
						pAccessMap->GprAccess[RDR_RSP] |= RD_ACCESS_READ | RD_ACCESS_WRITE;
						pAccessMap->SegAccess[RDR_SS] |= RD_ACCESS_READ;
					} else {
						pAccessMap->MemAccess |= pOperand->Access.Access;

						if (pOperand->Info.Memory.HasSeg) {
							pAccessMap->SegAccess[pOperand->Info.Memory.Seg] |= RD_ACCESS_READ;
						}

						if (pOperand->Info.Memory.HasBase) {
							pAccessMap->GprAccess[pOperand->Info.Memory.Base] |= RD_ACCESS_READ;
						}

						if (pOperand->Info.Memory.HasIndex) {
							if (pOperand->Info.Memory.IsVSib) {
								pAccessMap->SseAccess[pOperand->Info.Memory.Index] |= RD_ACCESS_READ;
							} else {
								pAccessMap->GprAccess[pOperand->Info.Memory.Index] |= RD_ACCESS_READ;
							}
						}
					}
				} else if (pOperand->Type == RD_OP_REG) {
					switch (pOperand->Info.Register.Type) {
						case RD_REG_GPR:
							for (unsigned int k = 0; k < pOperand->Info.Register.Count; ++k) {
								if (pOperand->Info.Register.IsHigh8) {
									pAccessMap->GprAccess[pOperand->Info.Register.Reg - 4 + k] |= pOperand->Access.Access;
								} else {
									pAccessMap->GprAccess[pOperand->Info.Register.Reg + k] |= pOperand->Access.Access;
								}
							}
							break;
						case RD_REG_SEG:
							pAccessMap->SegAccess[pOperand->Info.Register.Reg] |= pOperand->Access.Access;
							break;
						case RD_REG_FPU:
							pAccessMap->FpuAccess[pOperand->Info.Register.Reg] |= pOperand->Access.Access;
							break;
						case RD_REG_MMX:
							pAccessMap->MmxAccess[pOperand->Info.Register.Reg] |= pOperand->Access.Access;
							break;
						case RD_REG_SSE:
							for (unsigned int k = 0; k < pOperand->Info.Register.Count; ++k) {
								pAccessMap->SseAccess[pOperand->Info.Register.Reg + k] |= pOperand->Access.Access;
							}
							break;
						case RD_REG_CR:
							pAccessMap->CrAccess[pOperand->Info.Register.Reg] |= pOperand->Access.Access;
							break;
						case RD_REG_DR:
							pAccessMap->DrAccess[pOperand->Info.Register.Reg] |= pOperand->Access.Access;
							break;
						case RD_REG_TR:
							pAccessMap->TrAccess[pOperand->Info.Register.Reg] |= pOperand->Access.Access;
							break;
						case RD_REG_BND:
							pAccessMap->BndAccess[pOperand->Info.Register.Reg] |= pOperand->Access.Access;
							break;
						case RD_REG_MSK:
							pAccessMap->MskAccess[pOperand->Info.Register.Reg] |= pOperand->Access.Access;
							break;
						case RD_REG_SYS:
							pAccessMap->SysAccess[pOperand->Info.Register.Reg] |= pOperand->Access.Access;
							break;
						case RD_REG_X87:
							pAccessMap->X87Access[pOperand->Info.Register.Reg] |= pOperand->Access.Access;
							break;
						case RD_REG_FLG:
							pAccessMap->FlagsAccess |= pOperand->Access.Access;
							break;
						case RD_REG_RIP:
							pAccessMap->RipAccess |= pOperand->Access.Access;
							break;
						case RD_REG_MXCSR:
							pAccessMap->MxcsrAccess |= pOperand->Access.Access;
							break;
						case RD_REG_PKRU:
							pAccessMap->PkruAccess |= pOperand->Access.Access;
							break;
						case RD_REG_SSP:
							pAccessMap->SspAccess |= pOperand->Access.Access;
							break;
						case RD_REG_TILE:
							pAccessMap->TmmAccess[pOperand->Info.Register.Reg] |= pOperand->Access.Access;
							break;
						default:
							break;
					}
				} else if (pInstruction->Operands[i].Type == RD_OP_BANK) {
					if (pInstruction->Instruction == RD_INS_FNSAVE) {
						for (unsigned char j = 0; j < RD_MAX_FPU_REGS; ++j) {
							pAccessMap->FpuAccess[j] |= RD_ACCESS_READ;
						}
					} else if (pInstruction->Instruction == RD_INS_FRSTOR) {
						for (unsigned char j = 0; j < RD_MAX_FPU_REGS; ++j) {
							pAccessMap->FpuAccess[j] |= RD_ACCESS_WRITE;
						}
					}

					if ((pInstruction->Instruction == RD_INS_XSAVE) || (RD_INS_XSAVEOPT == pInstruction->Instruction) || (RD_INS_XSAVES == pInstruction->Instruction) || (RD_INS_XSAVEC == pInstruction->Instruction)) {
						for (unsigned char j = 0; j < RD_MAX_SSE_REGS; ++j) {
							pAccessMap->SseAccess[j] |= RD_ACCESS_READ;
						}
					} else if ((pInstruction->Instruction == RD_INS_XRSTOR) || (RD_INS_XRSTORS == pInstruction->Instruction)) {
						for (unsigned char j = 0; j < RD_MAX_SSE_REGS; ++j) {
							pAccessMap->SseAccess[j] |= RD_ACCESS_WRITE;
						}
					}
				}
			}

			return RD_STATUS_SUCCESS;
		}

		unsigned int RdGetOperandRlut(PINSTRUCTION pInstruction, PRD_OPERARD_RLUT pRlut) {
			if (!pInstruction) {
				return RD_STATUS_INVALID_PARAMETER;
			}

			if (!pRlut) {
				return RD_STATUS_INVALID_PARAMETER;
			}

			RdZeroMemory(pRlut, sizeof(RD_OPERARD_RLUT));

			for (unsigned char i = 0; i < pInstruction->OperandsCount; ++i) {
				if (pInstruction->Operands[i].Access.Access & RD_ACCESS_ANY_WRITE) {
					if (!pRlut->Dst1) {
						pRlut->Dst1 = &pInstruction->Operands[i];
					} else if (!pRlut->Dst2) {
						pRlut->Dst2 = &pInstruction->Operands[i];
					}
				}

				if (pInstruction->Operands[i].Access.Access & RD_ACCESS_ANY_READ) {
					if (!pRlut->Src1) {
						pRlut->Src1 = &pInstruction->Operands[i];
					} else if (!pRlut->Src2) {
						pRlut->Src2 = &pInstruction->Operands[i];
					} else if (!pRlut->Src3) {
						pRlut->Src3 = &pInstruction->Operands[i];
					} else if (!pRlut->Src4) {
						pRlut->Src4 = &pInstruction->Operands[i];
					}
				}

				if (pInstruction->Operands[i].Type == RD_OP_MEM) {
					if (!pRlut->Mem1) {
						pRlut->Mem1 = &pInstruction->Operands[i];
					} else if (!pRlut->Mem2) {
						pRlut->Mem2 = &pInstruction->Operands[i];
					}

					if (pInstruction->Operands[i].Info.Memory.IsStack) {
						pRlut->Stack = &pInstruction->Operands[i];
					}
				}

				if ((pInstruction->Operands[i].Type == RD_OP_REG) && pInstruction->Operands[0].Flags.IsDefault) {
					switch (pInstruction->Operands[i].Info.Register.Type) {
						case RD_REG_FLG:
							pRlut->Flags = &pInstruction->Operands[i];
							break;
						case RD_REG_RIP:
							pRlut->Rip = &pInstruction->Operands[i];
							break;
						case RD_REG_SEG:
							if (pInstruction->Operands[i].Info.Register.Reg == RDR_CS) {
								pRlut->Cs = &pInstruction->Operands[i];
							} else if (pInstruction->Operands[i].Info.Register.Reg == RDR_SS) {
								pRlut->Ss = &pInstruction->Operands[i];
							}
							break;
						case RD_REG_GPR:
							if (pInstruction->Operands[i].Info.Register.Reg < 8) {
								*(&pRlut->Rax + pInstruction->Operands[i].Info.Register.Reg) = &pInstruction->Operands[i];
							}
							break;
						default:
							break;
					}
				}
			}

			return RD_STATUS_SUCCESS;
		}
	}

	// ----------------------------------------------------------------
	// Hook
	// ----------------------------------------------------------------

	namespace Hook {

		// ----------------------------------------------------------------
		// Memory Hook
		// ----------------------------------------------------------------

		MemoryHook::MemoryHook(void* pAddress, size_t unSize, bool bAutoDisable) {
			m_pAddress = pAddress;
			m_unSize = unSize;
			m_bAutoDisable = bAutoDisable;
			m_pCallBack = nullptr;
		}

		MemoryHook::~MemoryHook() {
			UnHook();
		}

		bool MemoryHook::Hook(const fnMemoryHookCallBack pCallBack) {
			if (!m_pAddress || !m_unSize || m_pCallBack || !pCallBack) {
				return false;
			}

			const auto& it = g_Protections.find(m_pAddress);
			if (it != g_Protections.end()) {
				return false;
			}

			auto pProtection = std::make_unique<Protection>(m_pAddress, m_unSize);
			if (!pProtection) {
				return false;
			}

			DWORD unProtection = 0;
			if (!pProtection->GetProtection(&unProtection)) {
				return false;
			}

			unProtection &= ~(PAGE_EXECUTE | PAGE_EXECUTE_READ | PAGE_EXECUTE_READWRITE);

			if (!unProtection) {
				unProtection |= PAGE_READONLY;
			}

			if (!pProtection->ChangeProtection(unProtection)) {
				return false;
			}

			g_Protections.emplace_hint(it, m_pAddress, std::move(pProtection));

			m_pCallBack = pCallBack;

			return true;
		}

		bool MemoryHook::UnHook() {
			if (!m_pAddress || !m_unSize || !m_pCallBack) {
				return false;
			}

			const auto& it = g_Protections.find(m_pAddress);
			if (it == g_Protections.end()) {
				return false;
			}

			const auto& pProtection = it->second;
			if (!pProtection) {
				return false;
			}

			if (!pProtection->RestoreProtection()) {
				return false;
			}

			g_Protections.erase(it);

			m_pCallBack = nullptr;

			return true;
		}

		bool MemoryHook::Enable() {
			if (!m_pAddress || !m_unSize || !m_pCallBack) {
				return false;
			}

			const auto& it = g_Protections.find(m_pAddress);
			if (it == g_Protections.end()) {
				return false;
			}

			const auto& pProtection = it->second;
			if (!pProtection) {
				return false;
			}

			DWORD unProtection = 0;
			if (!pProtection->GetProtection(&unProtection)) {
				return false;
			}

			unProtection &= ~(PAGE_EXECUTE | PAGE_EXECUTE_READ | PAGE_EXECUTE_READWRITE);

			if (!unProtection) {
				unProtection |= PAGE_READONLY;
			}

			const bool bSuccess = pProtection->ChangeProtection(unProtection);

			return bSuccess;
		}

		bool MemoryHook::Disable() {
			if (!m_pAddress || !m_unSize || !m_pCallBack) {
				return false;
			}

			const auto& it = g_Protections.find(m_pAddress);
			if (it == g_Protections.end()) {
				return false;
			}

			const auto& pProtection = it->second;
			if (!pProtection) {
				return false;
			}

			const bool bSuccess = pProtection->RestoreProtection();

			return bSuccess;
		}

		void* MemoryHook::GetAddress() const {
			return m_pAddress;
		}

		size_t MemoryHook::GetSize() const {
			return m_unSize;
		}

		bool MemoryHook::IsAutoDisable() const {
			return m_bAutoDisable;
		}

		fnMemoryHookCallBack MemoryHook::GetCallBack() const {
			return m_pCallBack;
		}

		// ----------------------------------------------------------------
		// Memory Hook
		// ----------------------------------------------------------------

		bool HookMemory(void* pAddress, const fnMemoryHookCallBack pCallBack, bool bAutoDisable) {
			if (!pAddress || !pCallBack) {
				return false;
			}

			const auto& it = g_MemoryHooks.find(reinterpret_cast<void*>(pCallBack));
			if (it != g_MemoryHooks.end()) {
				return false;
			}

			auto pHook = std::make_unique<MemoryHook>(pAddress, 1, bAutoDisable);
			if (!pHook) {
				return false;
			}

			if (!pHook->Hook(pCallBack)) {
				return false;
			}

			g_MemoryHooks.emplace_hint(it, pCallBack, std::move(pHook));

			return true;
		}

		bool UnHookMemory(const fnMemoryHookCallBack pCallBack) {
			if (!pCallBack) {
				return false;
			}

			const auto& it = g_MemoryHooks.find(reinterpret_cast<void*>(pCallBack));
			if (it == g_MemoryHooks.end()) {
				return false;
			}

			const auto& pHook = it->second;
			if (!pHook) {
				return false;
			}

			pHook->UnHook();

			g_MemoryHooks.erase(it);

			return true;
		}

		bool EnableHookMemory(const fnMemoryHookCallBack pCallBack) {
			if (!pCallBack) {
				return false;
			}

			const auto& it = g_MemoryHooks.find(reinterpret_cast<void*>(pCallBack));
			if (it == g_MemoryHooks.end()) {
				return false;
			}

			const auto& pHook = it->second;
			if (!pHook) {
				return false;
			}

			return pHook->Enable();
		}

		bool DisableHookMemory(const fnMemoryHookCallBack pCallBack) {
			if (!pCallBack) {
				return false;
			}

			const auto& it = g_MemoryHooks.find(reinterpret_cast<void*>(pCallBack));
			if (it == g_MemoryHooks.end()) {
				return false;
			}

			const auto& pHook = it->second;
			if (!pHook) {
				return false;
			}

			return pHook->Disable();
		}

		// ----------------------------------------------------------------
		// Interrupt Hook
		// ----------------------------------------------------------------

		InterruptHook::InterruptHook(unsigned char unInterrupt) {
			m_unInterrupt = unInterrupt;
			m_pCallBack = nullptr;
		}

		InterruptHook::~InterruptHook() {
			UnHook();
		}

		bool InterruptHook::Hook(const fnInterruptHookCallBack pCallBack) {
			if (m_pCallBack || !pCallBack) {
				return false;
			}

			m_pCallBack = pCallBack;

			return true;
		}

		bool InterruptHook::UnHook() {
			if (!m_pCallBack) {
				return false;
			}

			m_pCallBack = nullptr;

			return true;
		}

		unsigned char InterruptHook::GetInterrupt() const {
			return m_unInterrupt;
		}

		fnInterruptHookCallBack InterruptHook::GetCallBack() const {
			return m_pCallBack;
		}

		// ----------------------------------------------------------------
		// Interrupt Hook
		// ----------------------------------------------------------------

		bool HookInterrupt(const fnInterruptHookCallBack pCallBack, unsigned char unInterrupt) {
			if (!pCallBack) {
				return false;
			}

			const auto& it = g_InterruptHooks.find(reinterpret_cast<void*>(pCallBack));
			if (it != g_InterruptHooks.end()) {
				return false;
			}

			auto pHook = std::make_unique<InterruptHook>(unInterrupt);
			if (!pHook) {
				return false;
			}

			if (!pHook->Hook(pCallBack)) {
				return false;
			}

			g_InterruptHooks.emplace_hint(it, pCallBack, std::move(pHook));

			return true;
		}

		bool UnHookInterrupt(const fnInterruptHookCallBack pCallBack) {
			if (!pCallBack) {
				return false;
			}

			const auto& it = g_InterruptHooks.find(reinterpret_cast<void*>(pCallBack));
			if (it == g_InterruptHooks.end()) {
				return false;
			}

			const auto& pHook = it->second;
			if (!pHook) {
				return false;
			}

			pHook->UnHook();

			g_InterruptHooks.erase(it);

			return true;
		}

		// ----------------------------------------------------------------
		// VTable Function Hook
		// ----------------------------------------------------------------

		VTableFunctionHook::VTableFunctionHook() {
			m_bInitialized = false;
			m_pVTable = nullptr;
			m_unIndex = 0;
			m_pOriginal = nullptr;
		}

		VTableFunctionHook::VTableFunctionHook(void** pVTable, size_t unIndex) {
			m_bInitialized = true;
			m_pVTable = pVTable;
			m_unIndex = unIndex;
			m_pOriginal = nullptr;

			if (m_pVTable) {
				m_pOriginal = m_pVTable[m_unIndex];
			}
		}

		VTableFunctionHook::~VTableFunctionHook() {
			UnHook();
		}

		bool VTableFunctionHook::Set(void** pVTable, size_t unIndex) {
			if (m_bInitialized || !pVTable) {
				return false;
			}

			m_pVTable = pVTable;
			m_unIndex = unIndex;
			m_pOriginal = m_pVTable[m_unIndex];

			m_bInitialized = true;
			return true;
		}

		bool VTableFunctionHook::Release() {
			if (!m_bInitialized) {
				return false;
			}

			UnHook();

			m_pVTable = nullptr;
			m_unIndex = 0;
			m_pOriginal = nullptr;

			m_bInitialized = false;
			return true;
		}

		bool VTableFunctionHook::Hook(void* pHookAddress) {
			if (!m_bInitialized || !m_pVTable || !m_pOriginal || !pHookAddress) {
				return false;
			}

			const auto& pAddress = &m_pVTable[m_unIndex];

			const auto& it = g_Protections.find(reinterpret_cast<void*>(pAddress));
			if (it != g_Protections.end()) {
				return false;
			}

			auto pProtection = std::make_unique<Protection>(pAddress, sizeof(void*));
			if (!pProtection) {
				return false;
			}

			if (!pProtection->ChangeProtection(PAGE_READWRITE)) {
				return false;
			}

			m_pOriginal = *pAddress;
			*pAddress = pHookAddress;

			pProtection->RestoreProtection();

			g_Protections.emplace_hint(it, reinterpret_cast<void*>(pAddress), std::move(pProtection));

			return true;
		}

		bool VTableFunctionHook::UnHook() {
			if (!m_bInitialized || !m_pVTable || !m_pOriginal) {
				return false;
			}

			const auto& pAddress = &m_pVTable[m_unIndex];

			const auto& it = g_Protections.find(reinterpret_cast<void*>(pAddress));
			if (it == g_Protections.end()) {
				return false;
			}

			const auto& pProtection = it->second;
			if (!pProtection) {
				return false;
			}

			if (!pProtection->ChangeProtection(PAGE_READWRITE)) {
				return false;
			}

			*pAddress = m_pOriginal;
			m_pOriginal = nullptr;

			pProtection->RestoreProtection();

			g_Protections.erase(it);

			return true;
		}

		void* VTableFunctionHook::GetOriginal() const {
			return m_pOriginal;
		}

		// ----------------------------------------------------------------
		// VTable Hook
		// ----------------------------------------------------------------

		VTableHook::VTableHook() {
			m_bInitialized = false;
			m_pVTable = nullptr;
			m_unCount = 0;
		}

		VTableHook::VTableHook(void** pVTable, size_t unCount) {
			m_bInitialized = true;
			m_pVTable = pVTable;
			m_unCount = unCount;
		}

		VTableHook::~VTableHook() {
			UnHook();
		}

		bool VTableHook::Set(void** pVTable, size_t unCount) {
			if (m_bInitialized || !pVTable || !unCount) {
				return false;
			}

			m_pVTable = pVTable;
			m_unCount = unCount;

			m_bInitialized = true;
			return true;
		}

		bool VTableHook::Release() {
			if (!m_bInitialized) {
				return false;
			}

			UnHook();

			m_pVTable = nullptr;
			m_unCount = 0;

			m_bInitialized = false;
			return true;
		}

		bool VTableHook::Hook(void** pHookVTable) {
			if (!m_bInitialized || !m_pVTable || !m_unCount || !m_vecHookingFunctions.empty() || !pHookVTable) {
				return false;
			}

			m_vecHookingFunctions.resize(m_unCount);

			for (size_t unIndex = 0; unIndex < m_unCount; ++unIndex) {
				m_vecHookingFunctions[unIndex] = std::make_unique<VTableFunctionHook>(m_pVTable, unIndex);
				if (!m_vecHookingFunctions[unIndex]) {
					m_vecHookingFunctions.clear();
					return false;
				}

				if (pHookVTable[unIndex]) {
					m_vecHookingFunctions[unIndex]->Hook(pHookVTable[unIndex]);
				}
			}

			return true;
		}

		bool VTableHook::UnHook() {
			if (!m_bInitialized || !m_pVTable || !m_unCount || m_vecHookingFunctions.empty()) {
				return false;
			}

			m_vecHookingFunctions.clear();

			return true;
		}

		std::vector<std::unique_ptr<VTableFunctionHook>>& VTableHook::GetHookingFunctions() {
			return m_vecHookingFunctions;
		}

		// ----------------------------------------------------------------
		// Inline Hook
		// ----------------------------------------------------------------

		InlineHook::InlineHook() {
			m_bInitialized = false;
			m_pAddress = nullptr;
			m_pTrampoline = nullptr;
			m_pOriginalBytes = nullptr;
			m_unOriginalBytes = 0;
		}

		InlineHook::InlineHook(void* pAddress) {
			m_bInitialized = true;
			m_pAddress = pAddress;
			m_pTrampoline = nullptr;
			m_pOriginalBytes = nullptr;
			m_unOriginalBytes = 0;
		}

		InlineHook::~InlineHook() {
			UnHook();
		}

		bool InlineHook::Set(void* pAddress) {
			if (m_bInitialized || !pAddress) {
				return false;
			}

			m_pAddress = pAddress;
			m_pTrampoline = nullptr;
			m_pOriginalBytes = nullptr;
			m_unOriginalBytes = 0;

			m_bInitialized = true;
			return true;
		}

		bool InlineHook::Release() {
			if (!m_bInitialized) {
				return false;
			}

			UnHook();

			m_pAddress = nullptr;
			m_pTrampoline = nullptr;
			m_pOriginalBytes = nullptr;
			m_unOriginalBytes = 0;

			m_bInitialized = false;
			return true;
		}

		bool InlineHook::Hook(void* pHookAddress, bool bSingleInstructionOnly) {
			if (!g_Suspender.Suspend()) {
				return false;
			}

			if (!m_bInitialized || !m_pAddress || m_pTrampoline || !pHookAddress) {
				g_Suspender.Resume();
				return false;
			}

			const size_t unJumpToHookOffset = __is_relative(pHookAddress, m_pAddress);
			size_t unJumpToHookSize = 0;
			if (unJumpToHookOffset) { // E9 00 00 00 00 - jmp rel32
				unJumpToHookSize = 5;
			} else {
				if (bSingleInstructionOnly) {
					g_Suspender.Resume();
					return false;
				}
#ifdef _M_X64
				// C7 44 24 F8 44332211 - mov [rsp-0x8], 0x11223344
				// C7 44 24 FC 44332211 - mov [rsp-0x4], 0x11223344
				// FF 64 24 F8 - jmp [rsp-8]
				unJumpToHookSize = 20;
#elif _M_IX86
				// C7 44 24 FC 44332211 - mov [esp-0x4], 0x11223344
				// FF 64 24 FC - jmp [esp-4]
				unJumpToHookSize = 12;
#endif
			}

			INSTRUCTION ins;
			size_t unCopyingSize = 0;
			while (unCopyingSize < unJumpToHookSize) {
#ifdef _M_X64
				if (!RD_SUCCESS(RdDecode(&ins, reinterpret_cast<unsigned char*>(m_pAddress) + unCopyingSize, RD_CODE_64, RD_DATA_64))) {
#elif _M_IX86
				if (!RD_SUCCESS(RdDecode(&ins, reinterpret_cast<unsigned char*>(m_pAddress) + unCopyingSize, RD_CODE_32, RD_DATA_32))) {
#endif
					g_Suspender.Resume();
					return false;
				}

				unCopyingSize += ins.Length;
			}

			if (unCopyingSize >= HOOK_INLINE_TRAMPOLINE_SIZE) {
				g_Suspender.Resume();
				return false;
			}

			m_pTrampoline = g_HookStorage.Alloc(HOOK_INLINE_TRAMPOLINE_SIZE, m_pAddress);
			if (!m_pTrampoline) {
				g_Suspender.Resume();
				return false;
			}

			if (!Protection(m_pTrampoline, HOOK_INLINE_TRAMPOLINE_SIZE, false).ChangeProtection(PAGE_READWRITE)) {
				g_HookStorage.DeAlloc(m_pTrampoline);
				m_pTrampoline = nullptr;
				g_Suspender.Resume();
				return false;
			}

			const size_t unJumpFromTampolineOffset = __is_relative(reinterpret_cast<char*>(m_pAddress) + unJumpToHookSize, reinterpret_cast<char*>(m_pTrampoline) + unCopyingSize);
			size_t unJumpFromTrampolineSize = 0;
			if (unJumpFromTampolineOffset) { // E9 00 00 00 00 - jmp rel32
				unJumpFromTrampolineSize = 5;
			} else {
#ifdef _M_X64
				// C7 44 24 F8 44332211 - mov [rsp-0x8], 0x11223344
				// C7 44 24 FC 44332211 - mov [rsp-0x4], 0x11223344
				// FF 64 24 F8 - jmp [rsp-8]
				unJumpFromTrampolineSize = 20;
#elif _M_IX86
				// C7 44 24 FC 44332211 - mov [esp-0x4], 0x11223344
				// FF 64 24 FC - jmp [esp-4]
				unJumpFromTrampolineSize = 12;
#endif
			}

			if (unCopyingSize + unJumpFromTrampolineSize > HOOK_INLINE_TRAMPOLINE_SIZE) {
				g_HookStorage.DeAlloc(m_pTrampoline);
				m_pTrampoline = nullptr;
				g_Suspender.Resume();
				return false;
			}

			memset(m_pTrampoline, 0xC3, HOOK_INLINE_TRAMPOLINE_SIZE);
			memcpy(m_pTrampoline, m_pAddress, unCopyingSize);

			for (size_t unIndex = 0; unIndex < unCopyingSize;) {
#ifdef _M_X64
				if (!RD_SUCCESS(RdDecode(&ins, reinterpret_cast<unsigned char*>(m_pTrampoline) + unIndex, RD_CODE_64, RD_DATA_64))) {
#elif _M_IX86
				if (!RD_SUCCESS(RdDecode(&ins, reinterpret_cast<unsigned char*>(m_pTrampoline) + unIndex, RD_CODE_32, RD_DATA_32))) {
#endif
					g_HookStorage.DeAlloc(m_pTrampoline);
					m_pTrampoline = nullptr;
					g_Suspender.Resume();
					return false;
				}

				const size_t unAddress = reinterpret_cast<size_t>(m_pAddress) + unIndex + ins.Length;
				const size_t unTrampolineAddress = reinterpret_cast<size_t>(m_pTrampoline) + unIndex + ins.Length;

				if (ins.IsRipRelative && ins.HasDisp) {
					const size_t unTargetAddress = unAddress + static_cast<size_t>(ins.Displacement);
					const size_t unNewDisp = unTargetAddress - unTrampolineAddress;

					switch (ins.DispLength) {
						case 1: // FIXME: Impossible to do. (FIX: Replace disp8 with disp32)
							*reinterpret_cast<unsigned char*>(reinterpret_cast<size_t>(m_pTrampoline) + unIndex + ins.DispOffset) = static_cast<unsigned char>(unNewDisp & 0xFF);
							break;
						case 2: // FIXME: Possible crash. (FIX: Same as with disp8)
							*reinterpret_cast<unsigned short*>(reinterpret_cast<size_t>(m_pTrampoline) + unIndex + ins.DispOffset) = static_cast<unsigned short>(unNewDisp & 0xFFFF);
							break;
						case 4:
							*reinterpret_cast<unsigned int*>(reinterpret_cast<size_t>(m_pTrampoline) + unIndex + ins.DispOffset) = static_cast<unsigned int>(unNewDisp & 0xFFFFFFFF);
							break;
						default:
							g_HookStorage.DeAlloc(m_pTrampoline);
							m_pTrampoline = nullptr;
							g_Suspender.Resume();
							return false;
					}
				} else if (ins.HasRelOffs) {
					const size_t unTargetAddress = unAddress + static_cast<size_t>(ins.RelativeOffset);
					const size_t unNewOffset = unTargetAddress - unTrampolineAddress;

					switch (ins.RelOffsLength) {
						case 1: // FIXME: Impossible to do. (FIX: Replace rel8 with rel32)
							*reinterpret_cast<unsigned char*>(reinterpret_cast<size_t>(m_pTrampoline) + unIndex + ins.RelOffsOffset) = static_cast<unsigned char>(unNewOffset & 0xFF);
							break;
						case 2: // FIXME: Possible crash. (FIX: Same as with rel8)
							*reinterpret_cast<unsigned short*>(reinterpret_cast<size_t>(m_pTrampoline) + unIndex + ins.RelOffsOffset) = static_cast<unsigned short>(unNewOffset & 0xFFFF);
							break;
						case 4:
							*reinterpret_cast<unsigned int*>(reinterpret_cast<size_t>(m_pTrampoline) + unIndex + ins.RelOffsOffset) = static_cast<unsigned int>(unNewOffset & 0xFFFFFFFF);
							break;
						default:
							g_HookStorage.DeAlloc(m_pTrampoline);
							m_pTrampoline = nullptr;
							g_Suspender.Resume();
							return false;
					}
				}

				unIndex += ins.Length;
			}

			unsigned char* pJumpFromTrampoline = reinterpret_cast<unsigned char*>(m_pTrampoline) + unCopyingSize;
			const size_t unJumpFromTrampolineOffset = __is_relative(reinterpret_cast<char*>(m_pAddress) + unJumpToHookSize, pJumpFromTrampoline);
			if (unJumpFromTrampolineOffset) { // E9 00 00 00 00 - jmp rel32
				pJumpFromTrampoline[0] = 0xE9;
				*reinterpret_cast<unsigned int*>(pJumpFromTrampoline + 1) = static_cast<unsigned int>(unJumpFromTrampolineOffset & 0xFFFFFFFF) - 5;
			} else {
#ifdef _M_X64
				// C7 44 24 F8 44332211 - mov [rsp-0x8], 0x11223344
				// C7 44 24 FC 44332211 - mov [rsp-0x4], 0x11223344
				// FF 64 24 F8 - jmp [rsp-8]

				const size_t unAddress = reinterpret_cast<size_t>(m_pAddress) + unJumpToHookSize;

				pJumpFromTrampoline[ 0] = 0xC7;
				pJumpFromTrampoline[ 1] = 0x44;
				pJumpFromTrampoline[ 2] = 0x24;
				pJumpFromTrampoline[ 3] = 0xF8;
				
				*reinterpret_cast<unsigned int*>(pJumpFromTrampoline + 4) = unAddress & 0xFFFFFFFF;
				
				pJumpFromTrampoline[ 8] = 0xC7;
				pJumpFromTrampoline[ 9] = 0x44;
				pJumpFromTrampoline[10] = 0x24;
				pJumpFromTrampoline[11] = 0xFC;

				*reinterpret_cast<unsigned int*>(pJumpFromTrampoline + 12) = (unAddress >> 32) & 0xFFFFFFFF;

				pJumpFromTrampoline[16] = 0xFF;
				pJumpFromTrampoline[17] = 0x64;
				pJumpFromTrampoline[18] = 0x24;
				pJumpFromTrampoline[19] = 0xF8;
#elif _M_IX86
				// C7 44 24 FC 44332211 - mov [esp-0x4], 0x11223344
				// FF 64 24 FC - jmp [esp-4]

				pJumpFromTrampoline[0] = 0xC7;
				pJumpFromTrampoline[1] = 0x44;
				pJumpFromTrampoline[2] = 0x24;
				pJumpFromTrampoline[3] = 0xFC;

				*reinterpret_cast<unsigned int*>(pJumpFromTrampoline + 4) = reinterpret_cast<unsigned int>(m_pAddress) + static_cast<unsigned int>(unJumpToHookSize & 0xFFFFFFFF);

				pJumpFromTrampoline[ 8] = 0xFF;
				pJumpFromTrampoline[ 9] = 0x64;
				pJumpFromTrampoline[10] = 0x24;
				pJumpFromTrampoline[11] = 0xFC;
#endif
			}

			if (!Protection(m_pTrampoline, HOOK_INLINE_TRAMPOLINE_SIZE, false).ChangeProtection(PAGE_EXECUTE_READ)) {
				g_HookStorage.DeAlloc(m_pTrampoline);
				m_pTrampoline = nullptr;
				g_Suspender.Resume();
				return false;
			}

			m_unOriginalBytes = unCopyingSize;

			m_pOriginalBytes = std::make_unique<unsigned char[]>(unCopyingSize);
			if (!m_pOriginalBytes) {
				m_unOriginalBytes = 0;
				g_HookStorage.DeAlloc(m_pTrampoline);
				m_pTrampoline = nullptr;
				g_Suspender.Resume();
				return false;
			}

			memcpy(m_pOriginalBytes.get(), m_pAddress, unCopyingSize);

			Protection JumpToHookProtection(m_pAddress, unCopyingSize, false);
			if (!JumpToHookProtection.ChangeProtection(PAGE_READWRITE)) {
				m_pOriginalBytes = nullptr;
				m_unOriginalBytes = 0;
				g_HookStorage.DeAlloc(m_pTrampoline);
				m_pTrampoline = nullptr;
				g_Suspender.Resume();
				return false;
			}

			memset(m_pAddress, 0x90, unCopyingSize);

			unsigned char* pJumpToHook = reinterpret_cast<unsigned char*>(m_pAddress);
			if (unJumpToHookOffset) { // E9 00 00 00 00 - jmp rel32
				pJumpToHook[0] = 0xE9;
				*reinterpret_cast<unsigned int*>(pJumpToHook + 1) = static_cast<unsigned int>(unJumpToHookOffset & 0xFFFFFFFF) - 5;
			} else {
#ifdef _M_X64
				// C7 44 24 F8 44332211 - mov [rsp-0x8], 0x11223344 ; Low
				// C7 44 24 FC 44332211 - mov [rsp-0x4], 0x11223344 ; High
				// FF 64 24 F8 - jmp [rsp-8]

				const size_t unAddress = reinterpret_cast<size_t>(pHookAddress);

				pJumpToHook[ 0] = 0xC7;
				pJumpToHook[ 1] = 0x44;
				pJumpToHook[ 2] = 0x24;
				pJumpToHook[ 3] = 0xF8;

				*reinterpret_cast<unsigned int*>(pJumpToHook + 4) = unAddress & 0xFFFFFFFF;

				pJumpToHook[ 8] = 0xC7;
				pJumpToHook[ 9] = 0x44;
				pJumpToHook[10] = 0x24;
				pJumpToHook[11] = 0xFC;

				*reinterpret_cast<unsigned int*>(pJumpToHook + 12) = (unAddress >> 32) & 0xFFFFFFFF;

				pJumpToHook[16] = 0xFF;
				pJumpToHook[17] = 0x64;
				pJumpToHook[18] = 0x24;
				pJumpToHook[19] = 0xF8;
#elif _M_IX86
				// C7 44 24 FC 44332211 - mov [esp-0x4], 0x11223344
				// FF 64 24 FC - jmp [esp-4]

				pJumpToHook[0] = 0xC7;
				pJumpToHook[1] = 0x44;
				pJumpToHook[2] = 0x24;
				pJumpToHook[3] = 0xFC;

				*reinterpret_cast<unsigned int*>(pJumpToHook + 4) = reinterpret_cast<unsigned int>(pHookAddress);

				pJumpToHook[ 8] = 0xFF;
				pJumpToHook[ 9] = 0x64;
				pJumpToHook[10] = 0x24;
				pJumpToHook[11] = 0xFC;
#endif
			}

			JumpToHookProtection.RestoreProtection();

			g_Suspender.Resume();
			return true;
		}

		bool InlineHook::UnHook() {
			if (!g_Suspender.Suspend()) {
				return false;
			}

			if (!m_bInitialized || !m_pAddress || !m_pTrampoline) {
				g_Suspender.Resume();
				return false;
			}

			for (size_t unIndex = 0; unIndex < HOOK_INLINE_TRAMPOLINE_SIZE; ++unIndex) {
				g_Suspender.FixExecutionAddress(reinterpret_cast<unsigned char*>(m_pTrampoline) + unIndex, reinterpret_cast<unsigned char*>(m_pAddress) + unIndex);
			}

			Protection HookProtection(m_pAddress, m_unOriginalBytes, false);
			if (!HookProtection.ChangeProtection(PAGE_READWRITE)) {
				g_Suspender.Resume();
				return false;
			}

			memcpy(m_pAddress, m_pOriginalBytes.get(), m_unOriginalBytes);

			HookProtection.RestoreProtection();

			m_pOriginalBytes = nullptr;
			m_unOriginalBytes = 0;
			g_HookStorage.DeAlloc(m_pTrampoline);
			m_pTrampoline = nullptr;

			g_Suspender.Resume();
			return true;
		}

		void* InlineHook::GetTrampoline() const {
			return m_pTrampoline;
		}

		// ----------------------------------------------------------------
		// Inline Hook (With Wrapper)
		// ----------------------------------------------------------------

		InlineWrapperHook::InlineWrapperHook() {
			m_bInitialized = false;
			m_pAddress = nullptr;
			m_pWrapper = nullptr;
			m_pTrampoline = nullptr;
			m_pOriginalBytes = nullptr;
			m_unOriginalBytes = 0;
		}

		InlineWrapperHook::InlineWrapperHook(void* pAddress) {
			m_bInitialized = true;
			m_pAddress = pAddress;
			m_pWrapper = nullptr;
			m_pTrampoline = nullptr;
			m_pOriginalBytes = nullptr;
			m_unOriginalBytes = 0;
		}

		InlineWrapperHook::~InlineWrapperHook() {
			UnHook();
		}

		bool InlineWrapperHook::Set(void* pAddress) {
			if (m_bInitialized || !pAddress) {
				return false;
			}

			m_pAddress = pAddress;
			m_pWrapper = nullptr;
			m_pTrampoline = nullptr;
			m_pOriginalBytes = nullptr;
			m_unOriginalBytes = 0;

			m_bInitialized = true;
			return true;
		}

		bool InlineWrapperHook::Release() {
			if (!m_bInitialized) {
				return false;
			}

			UnHook();

			m_pAddress = nullptr;
			m_pWrapper = nullptr;
			m_pTrampoline = nullptr;
			m_pOriginalBytes = nullptr;
			m_unOriginalBytes = 0;

			m_bInitialized = false;
			return true;
		}

		bool InlineWrapperHook::Hook(void* pHookAddress, bool bSingleInstructionOnly) {
			if (!g_Suspender.Suspend()) {
				return false;
			}

			if (!m_bInitialized || !m_pAddress || m_pWrapper || m_pTrampoline || !pHookAddress) {
				g_Suspender.Resume();
				return false;
			}

			m_pWrapper = g_HookStorage.Alloc(HOOK_INLINE_WRAPPER_SIZE, m_pAddress);
			if (!m_pWrapper) {
				g_Suspender.Resume();
				return false;
			}

			if (!Protection(m_pWrapper, HOOK_INLINE_WRAPPER_SIZE, false).ChangeProtection(PAGE_READWRITE)) {
				g_HookStorage.DeAlloc(m_pWrapper);
				m_pWrapper = nullptr;
				g_Suspender.Resume();
				return false;
			}

			memset(m_pWrapper, 0xC3, HOOK_INLINE_WRAPPER_SIZE);

			unsigned char* pJumpToHook = reinterpret_cast<unsigned char*>(m_pWrapper);
#ifdef _M_X64
			// C7 44 24 F8 44332211 - mov [rsp-0x8], 0x11223344 ; Low
			// C7 44 24 FC 44332211 - mov [rsp-0x4], 0x11223344 ; High
			// FF 64 24 F8 - jmp [rsp-8]

			const size_t unHookAddress = reinterpret_cast<size_t>(pHookAddress);

			pJumpToHook[ 0] = 0xC7;
			pJumpToHook[ 1] = 0x44;
			pJumpToHook[ 2] = 0x24;
			pJumpToHook[ 3] = 0xF8;

			*reinterpret_cast<unsigned int*>(pJumpToHook + 4) = unHookAddress & 0xFFFFFFFF;

			pJumpToHook[ 8] = 0xC7;
			pJumpToHook[ 9] = 0x44;
			pJumpToHook[10] = 0x24;
			pJumpToHook[11] = 0xFC;

			*reinterpret_cast<unsigned int*>(pJumpToHook + 12) = (unHookAddress >> 32) & 0xFFFFFFFF;

			pJumpToHook[16] = 0xFF;
			pJumpToHook[17] = 0x64;
			pJumpToHook[18] = 0x24;
			pJumpToHook[19] = 0xF8;
#elif _M_IX86
			// C7 44 24 FC 44332211 - mov [esp-0x4], 0x11223344
			// FF 64 24 FC - jmp [esp-4]

			pJumpToHook[ 0] = 0xC7;
			pJumpToHook[ 1] = 0x44;
			pJumpToHook[ 2] = 0x24;
			pJumpToHook[ 3] = 0xFC;

			*reinterpret_cast<unsigned int*>(pJumpToHook + 4) = reinterpret_cast<unsigned int>(pHookAddress);

			pJumpToHook[ 8] = 0xFF;
			pJumpToHook[ 9] = 0x64;
			pJumpToHook[10] = 0x24;
			pJumpToHook[11] = 0xFC;
#endif

			const size_t unJumpToWrapperOffset = __is_relative(m_pWrapper, m_pAddress);
			size_t unJumpToWrapperSize = 0;
			if (unJumpToWrapperOffset) { // E9 00 00 00 00 - jmp rel32
				unJumpToWrapperSize = 5;
			} else {
				if (bSingleInstructionOnly) {
					g_Suspender.Resume();
					return false;
				}
#ifdef _M_X64
				// C7 44 24 F8 44332211 - mov [rsp-0x8], 0x11223344
				// C7 44 24 FC 44332211 - mov [rsp-0x4], 0x11223344
				// FF 64 24 F8 - jmp [rsp-8]
				unJumpToWrapperSize = 20;
#elif _M_IX86
				// C7 44 24 FC 44332211 - mov [esp-0x4], 0x11223344
				// FF 64 24 FC - jmp [esp-4]
				unJumpToWrapperSize = 12;
#endif
			}

			INSTRUCTION ins;
			size_t unCopyingSize = 0;
			while (unCopyingSize < unJumpToWrapperSize) {
#ifdef _M_X64
				if (!RD_SUCCESS(RdDecode(&ins, reinterpret_cast<unsigned char*>(m_pAddress) + unCopyingSize, RD_CODE_64, RD_DATA_64))) {
#elif _M_IX86
				if (!RD_SUCCESS(RdDecode(&ins, reinterpret_cast<unsigned char*>(m_pAddress) + unCopyingSize, RD_CODE_32, RD_DATA_32))) {
#endif
					g_Suspender.Resume();
					return false;
				}

				unCopyingSize += ins.Length;
			}

			if (unCopyingSize >= HOOK_INLINE_TRAMPOLINE_SIZE) {
				g_Suspender.Resume();
				return false;
			}

			m_pTrampoline = g_HookStorage.Alloc(HOOK_INLINE_TRAMPOLINE_SIZE, m_pAddress);
			if (!m_pTrampoline) {
				g_Suspender.Resume();
				return false;
			}

			if (!Protection(m_pTrampoline, HOOK_INLINE_TRAMPOLINE_SIZE, false).ChangeProtection(PAGE_READWRITE)) {
				g_HookStorage.DeAlloc(m_pTrampoline);
				m_pTrampoline = nullptr;
				g_Suspender.Resume();
				return false;
			}

			const size_t unJumpFromTampolineOffset = __is_relative(reinterpret_cast<char*>(m_pAddress) + unJumpToWrapperSize, reinterpret_cast<char*>(m_pTrampoline) + unCopyingSize);
			size_t unJumpFromTrampolineSize = 0;
			if (unJumpFromTampolineOffset) { // E9 00 00 00 00 - jmp rel32
				unJumpFromTrampolineSize = 5;
			} else {
#ifdef _M_X64
				// C7 44 24 F8 44332211 - mov [rsp-0x8], 0x11223344
				// C7 44 24 FC 44332211 - mov [rsp-0x4], 0x11223344
				// FF 64 24 F8 - jmp [rsp-8]
				unJumpFromTrampolineSize = 20;
#elif _M_IX86
				// C7 44 24 FC 44332211 - mov [esp-0x4], 0x11223344
				// FF 64 24 FC - jmp [esp-4]
				unJumpFromTrampolineSize = 12;
#endif
			}

			if (unCopyingSize + unJumpFromTrampolineSize > HOOK_INLINE_TRAMPOLINE_SIZE) {
				g_HookStorage.DeAlloc(m_pTrampoline);
				m_pTrampoline = nullptr;
				g_Suspender.Resume();
				return false;
			}

			memset(m_pTrampoline, 0xC3, HOOK_INLINE_TRAMPOLINE_SIZE);
			memcpy(m_pTrampoline, m_pAddress, unCopyingSize);

			for (size_t unIndex = 0; unIndex < unCopyingSize;) {
#ifdef _M_X64
				if (!RD_SUCCESS(RdDecode(&ins, reinterpret_cast<unsigned char*>(m_pTrampoline) + unIndex, RD_CODE_64, RD_DATA_64))) {
#elif _M_IX86
				if (!RD_SUCCESS(RdDecode(&ins, reinterpret_cast<unsigned char*>(m_pTrampoline) + unIndex, RD_CODE_32, RD_DATA_32))) {
#endif
					g_HookStorage.DeAlloc(m_pTrampoline);
					m_pTrampoline = nullptr;
					g_Suspender.Resume();
					return false;
				}

				const size_t unAddress = reinterpret_cast<size_t>(m_pAddress) + unIndex + ins.Length;
				const size_t unTrampolineAddress = reinterpret_cast<size_t>(m_pTrampoline) + unIndex + ins.Length;

				if (ins.IsRipRelative && ins.HasDisp) {
					const size_t unTargetAddress = unAddress + static_cast<size_t>(ins.Displacement);
					const size_t unNewDisp = unTargetAddress - unTrampolineAddress;

					switch (ins.DispLength) {
						case 1: // FIXME: Impossible to do. (FIX: Replace disp8 with disp32)
							*reinterpret_cast<unsigned char*>(reinterpret_cast<size_t>(m_pTrampoline) + unIndex + ins.DispOffset) = static_cast<unsigned char>(unNewDisp & 0xFF);
							break;
						case 2: // FIXME: Possible crash. (FIX: Same as with disp8)
							*reinterpret_cast<unsigned short*>(reinterpret_cast<size_t>(m_pTrampoline) + unIndex + ins.DispOffset) = static_cast<unsigned short>(unNewDisp & 0xFFFF);
							break;
						case 4:
							*reinterpret_cast<unsigned int*>(reinterpret_cast<size_t>(m_pTrampoline) + unIndex + ins.DispOffset) = static_cast<unsigned int>(unNewDisp & 0xFFFFFFFF);
							break;
						default:
							g_HookStorage.DeAlloc(m_pTrampoline);
							m_pTrampoline = nullptr;
							g_Suspender.Resume();
							return false;
					}
				} else if (ins.HasRelOffs) {
					const size_t unTargetAddress = unAddress + static_cast<size_t>(ins.RelativeOffset);
					const size_t unNewOffset = unTargetAddress - unTrampolineAddress;

					switch (ins.RelOffsLength) {
						case 1: // FIXME: Impossible to do. (FIX: Replace rel8 with rel32)
							*reinterpret_cast<unsigned char*>(reinterpret_cast<size_t>(m_pTrampoline) + unIndex + ins.RelOffsOffset) = static_cast<unsigned char>(unNewOffset & 0xFF);
							break;
						case 2: // FIXME: Possible crash. (FIX: Same as with rel8)
							*reinterpret_cast<unsigned short*>(reinterpret_cast<size_t>(m_pTrampoline) + unIndex + ins.RelOffsOffset) = static_cast<unsigned short>(unNewOffset & 0xFFFF);
							break;
						case 4:
							*reinterpret_cast<unsigned int*>(reinterpret_cast<size_t>(m_pTrampoline) + unIndex + ins.RelOffsOffset) = static_cast<unsigned int>(unNewOffset & 0xFFFFFFFF);
							break;
						default:
							g_HookStorage.DeAlloc(m_pTrampoline);
							m_pTrampoline = nullptr;
							g_Suspender.Resume();
							return false;
					}
				}

				unIndex += ins.Length;
			}

			unsigned char* pJumpFromTrampoline = reinterpret_cast<unsigned char*>(m_pTrampoline) + unCopyingSize;
			const size_t unJumpFromTrampolineOffset = __is_relative(reinterpret_cast<char*>(m_pAddress) + unJumpToWrapperSize, pJumpFromTrampoline);
			if (unJumpFromTrampolineOffset) { // E9 00 00 00 00 - jmp rel32
				pJumpFromTrampoline[0] = 0xE9;
				*reinterpret_cast<unsigned int*>(pJumpFromTrampoline + 1) = static_cast<unsigned int>(unJumpFromTrampolineOffset & 0xFFFFFFFF) - 5;
			} else {
#ifdef _M_X64
				// C7 44 24 F8 44332211 - mov [rsp-0x8], 0x11223344
				// C7 44 24 FC 44332211 - mov [rsp-0x4], 0x11223344
				// FF 64 24 F8 - jmp [rsp-8]

				const size_t unAddress = reinterpret_cast<size_t>(m_pAddress) + unJumpToWrapperSize;

				pJumpFromTrampoline[ 0] = 0xC7;
				pJumpFromTrampoline[ 1] = 0x44;
				pJumpFromTrampoline[ 2] = 0x24;
				pJumpFromTrampoline[ 3] = 0xF8;
				
				*reinterpret_cast<unsigned int*>(pJumpFromTrampoline + 4) = unAddress & 0xFFFFFFFF;
				
				pJumpFromTrampoline[ 8] = 0xC7;
				pJumpFromTrampoline[ 9] = 0x44;
				pJumpFromTrampoline[10] = 0x24;
				pJumpFromTrampoline[11] = 0xFC;

				*reinterpret_cast<unsigned int*>(pJumpFromTrampoline + 12) = (unAddress >> 32) & 0xFFFFFFFF;

				pJumpFromTrampoline[16] = 0xFF;
				pJumpFromTrampoline[17] = 0x64;
				pJumpFromTrampoline[18] = 0x24;
				pJumpFromTrampoline[19] = 0xF8;
#elif _M_IX86
				// C7 44 24 FC 44332211 - mov [esp-0x4], 0x11223344
				// FF 64 24 FC - jmp [esp-4]

				pJumpFromTrampoline[0] = 0xC7;
				pJumpFromTrampoline[1] = 0x44;
				pJumpFromTrampoline[2] = 0x24;
				pJumpFromTrampoline[3] = 0xFC;

				*reinterpret_cast<unsigned int*>(pJumpFromTrampoline + 4) = reinterpret_cast<unsigned int>(m_pAddress) + static_cast<unsigned int>(unJumpToWrapperSize & 0xFFFFFFFF);

				pJumpFromTrampoline[ 8] = 0xFF;
				pJumpFromTrampoline[ 9] = 0x64;
				pJumpFromTrampoline[10] = 0x24;
				pJumpFromTrampoline[11] = 0xFC;
#endif
			}

			if (!Protection(m_pTrampoline, HOOK_INLINE_TRAMPOLINE_SIZE, false).ChangeProtection(PAGE_EXECUTE_READ)) {
				g_HookStorage.DeAlloc(m_pTrampoline);
				m_pTrampoline = nullptr;
				g_Suspender.Resume();
				return false;
			}

			m_unOriginalBytes = unCopyingSize;

			m_pOriginalBytes = std::make_unique<unsigned char[]>(unCopyingSize);
			if (!m_pOriginalBytes) {
				m_unOriginalBytes = 0;
				g_HookStorage.DeAlloc(m_pTrampoline);
				m_pTrampoline = nullptr;
				g_Suspender.Resume();
				return false;
			}

			memcpy(m_pOriginalBytes.get(), m_pAddress, unCopyingSize);

			Protection JumpToHookProtection(m_pAddress, unCopyingSize, false);
			if (!JumpToHookProtection.ChangeProtection(PAGE_READWRITE)) {
				m_pOriginalBytes = nullptr;
				m_unOriginalBytes = 0;
				g_HookStorage.DeAlloc(m_pTrampoline);
				m_pTrampoline = nullptr;
				g_Suspender.Resume();
				return false;
			}

			memset(m_pAddress, 0x90, unCopyingSize);

			unsigned char* pJumpToWrapper = reinterpret_cast<unsigned char*>(m_pAddress);
			if (unJumpToWrapperOffset) { // E9 00 00 00 00 - jmp rel32
				pJumpToWrapper[0] = 0xE9;
				*reinterpret_cast<unsigned int*>(pJumpToWrapper + 1) = static_cast<unsigned int>(unJumpToWrapperOffset & 0xFFFFFFFF) - 5;
			} else {
#ifdef _M_X64
				// C7 44 24 F8 44332211 - mov [rsp-0x8], 0x11223344 ; Low
				// C7 44 24 FC 44332211 - mov [rsp-0x4], 0x11223344 ; High
				// FF 64 24 F8 - jmp [rsp-8]

				const size_t unAddress = reinterpret_cast<size_t>(m_pWrapper);

				pJumpToWrapper[ 0] = 0xC7;
				pJumpToWrapper[ 1] = 0x44;
				pJumpToWrapper[ 2] = 0x24;
				pJumpToWrapper[ 3] = 0xF8;

				*reinterpret_cast<unsigned int*>(pJumpToWrapper + 4) = unAddress & 0xFFFFFFFF;

				pJumpToWrapper[ 8] = 0xC7;
				pJumpToWrapper[ 9] = 0x44;
				pJumpToWrapper[10] = 0x24;
				pJumpToWrapper[11] = 0xFC;

				*reinterpret_cast<unsigned int*>(pJumpToWrapper + 12) = (unAddress >> 32) & 0xFFFFFFFF;

				pJumpToWrapper[16] = 0xFF;
				pJumpToWrapper[17] = 0x64;
				pJumpToWrapper[18] = 0x24;
				pJumpToWrapper[19] = 0xF8;
#elif _M_IX86
				// C7 44 24 FC 44332211 - mov [esp-0x4], 0x11223344
				// FF 64 24 FC - jmp [esp-4]

				pJumpToWrapper[0] = 0xC7;
				pJumpToWrapper[1] = 0x44;
				pJumpToWrapper[2] = 0x24;
				pJumpToWrapper[3] = 0xFC;

				*reinterpret_cast<unsigned int*>(pJumpToWrapper + 4) = reinterpret_cast<unsigned int>(m_pWrapper);

				pJumpToWrapper[ 8] = 0xFF;
				pJumpToWrapper[ 9] = 0x64;
				pJumpToWrapper[10] = 0x24;
				pJumpToWrapper[11] = 0xFC;
#endif
			}

			JumpToHookProtection.RestoreProtection();

			g_Suspender.Resume();
			return true;
		}

		bool InlineWrapperHook::UnHook() {
			if (!g_Suspender.Suspend()) {
				return false;
			}

			if (!m_bInitialized || !m_pAddress || !m_pWrapper || !m_pTrampoline) {
				g_Suspender.Resume();
				return false;
			}

			for (size_t unIndex = 0; unIndex < HOOK_INLINE_WRAPPER_SIZE; ++unIndex) {
				g_Suspender.FixExecutionAddress(reinterpret_cast<unsigned char*>(m_pWrapper) + unIndex, reinterpret_cast<unsigned char*>(m_pAddress));
			}

			for (size_t unIndex = 0; unIndex < HOOK_INLINE_TRAMPOLINE_SIZE; ++unIndex) {
				g_Suspender.FixExecutionAddress(reinterpret_cast<unsigned char*>(m_pTrampoline) + unIndex, reinterpret_cast<unsigned char*>(m_pAddress) + unIndex);
			}

			Protection HookProtection(m_pAddress, m_unOriginalBytes, false);
			if (!HookProtection.ChangeProtection(PAGE_READWRITE)) {
				g_Suspender.Resume();
				return false;
			}

			memcpy(m_pAddress, m_pOriginalBytes.get(), m_unOriginalBytes);

			HookProtection.RestoreProtection();

			m_pOriginalBytes = nullptr;
			m_unOriginalBytes = 0;
			g_HookStorage.DeAlloc(m_pTrampoline);
			m_pTrampoline = nullptr;
			g_HookStorage.DeAlloc(m_pWrapper);
			m_pWrapper = nullptr;

			g_Suspender.Resume();
			return true;
		}

		void* InlineWrapperHook::GetTrampoline() const {
			return m_pTrampoline;
		}

		// ----------------------------------------------------------------
		// Raw Hook
		// ----------------------------------------------------------------

		RawHook::RawHook() {
			m_bInitialized = false;
			m_pAddress = nullptr;
			m_pWrapper = nullptr;
			m_unFirstInstructionSize = 0;
			m_pTrampoline = nullptr;
			m_pOriginalBytes = nullptr;
			m_unOriginalBytes = 0;
		}

		RawHook::RawHook(void* pAddress) {
			m_bInitialized = true;
			m_pAddress = pAddress;
			m_pWrapper = nullptr;
			m_unFirstInstructionSize = 0;
			m_pTrampoline = nullptr;
			m_pOriginalBytes = nullptr;
			m_unOriginalBytes = 0;
		}

		RawHook::~RawHook() {
			UnHook();
		}

		bool RawHook::Set(void* pAddress) {
			if (m_bInitialized || !pAddress) {
				return false;
			}

			m_pAddress = pAddress;
			m_pWrapper = nullptr;
			m_pTrampoline = nullptr;
			m_unFirstInstructionSize = 0;
			m_pOriginalBytes = nullptr;
			m_unOriginalBytes = 0;

			m_bInitialized = true;
			return true;
		}

		bool RawHook::Release() {
			if (!m_bInitialized) {
				return false;
			}

			UnHook();

			m_pAddress = nullptr;
			m_pWrapper = nullptr;
			m_pTrampoline = nullptr;
			m_unFirstInstructionSize = 0;
			m_pOriginalBytes = nullptr;
			m_unOriginalBytes = 0;

			m_bInitialized = false;
			return true;
		}

		bool RawHook::Hook(const fnRawHookCallBack pCallBack, bool bNative, const unsigned int unReservedStackSize, bool bSingleInstructionOnly) {
			if (!g_Suspender.Suspend()) {
				return false;
			}

			if (!m_bInitialized || !m_pAddress || m_pWrapper || m_pTrampoline || !pCallBack) {
				g_Suspender.Resume();
				return false;
			}

			m_pWrapper = g_HookStorage.Alloc(HOOK_RAW_WRAPPER_SIZE, m_pAddress);
			if (!m_pWrapper) {
				g_Suspender.Resume();
				return false;
			}

			if (!Protection(m_pWrapper, HOOK_RAW_WRAPPER_SIZE, false).ChangeProtection(PAGE_READWRITE)) {
				g_HookStorage.DeAlloc(m_pWrapper);
				m_pWrapper = nullptr;
				g_Suspender.Resume();
				return false;
			}

			memset(m_pWrapper, 0xC3, HOOK_RAW_WRAPPER_SIZE);

			int cpuinfo[4];
			__cpuid(cpuinfo, 1);

			const bool bHaveSSE = ((cpuinfo[3] & (1 << 25)) != 0) && !bNative;
			const bool bHaveFPU = ((cpuinfo[3] & 1) != 0) && !bNative;
			const bool bHaveAVX = ((cpuinfo[2] & (1 << 28)) != 0) && !bNative;

			__cpuidex(cpuinfo, 7, 0);

			const bool bHaveAVX512 = ((cpuinfo[1] & (1 << 16)) != 0) && !bNative;

			const unsigned int unContextSize = __align_up<unsigned int>((bNative ? sizeof(RAW_NATIVE_CONTEXT) : sizeof(RAW_CONTEXT)) + (unReservedStackSize ? __align_up<unsigned int>(unReservedStackSize, alignof(void*)) : sizeof(void*) * 2), (bNative ? alignof(RAW_NATIVE_CONTEXT) : alignof(RAW_CONTEXT)));

#ifdef _M_X64
			if (bHaveAVX512) {
				static const unsigned char pWrapperCode[] = { 0x48, 0x81, 0xEC, 0xFF, 0xFF, 0xFF, 0x7F, 0x9C, 0x8F, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x81, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0xAE, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x11, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x11, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x11, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x11, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x11, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x11, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x11, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x11, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x71, 0x7C, 0x48, 0x11, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x71, 0x7C, 0x48, 0x11, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x71, 0x7C, 0x48, 0x11, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x71, 0x7C, 0x48, 0x11, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x71, 0x7C, 0x48, 0x11, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x71, 0x7C, 0x48, 0x11, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x71, 0x7C, 0x48, 0x11, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x71, 0x7C, 0x48, 0x11, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xE1, 0x7C, 0x48, 0x11, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xE1, 0x7C, 0x48, 0x11, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xE1, 0x7C, 0x48, 0x11, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xE1, 0x7C, 0x48, 0x11, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xE1, 0x7C, 0x48, 0x11, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xE1, 0x7C, 0x48, 0x11, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xE1, 0x7C, 0x48, 0x11, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xE1, 0x7C, 0x48, 0x11, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x61, 0x7C, 0x48, 0x11, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x61, 0x7C, 0x48, 0x11, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x61, 0x7C, 0x48, 0x11, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x61, 0x7C, 0x48, 0x11, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x61, 0x7C, 0x48, 0x11, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x61, 0x7C, 0x48, 0x11, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x61, 0x7C, 0x48, 0x11, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x61, 0x7C, 0x48, 0x11, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x9B, 0xDD, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x50, 0x51, 0x48, 0x8D, 0x4C, 0x24, 0x10, 0xC7, 0x44, 0x24, 0xF8, 0xFF, 0xFF, 0xFF, 0x7F, 0xC7, 0x44, 0x24, 0xFC, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x54, 0x24, 0xF8, 0x0F, 0xB6, 0xC0, 0x85, 0xC0, 0x0F, 0x84, 0xFC, 0x01, 0x00, 0x00, 0x59, 0x58, 0xDD, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x61, 0x7C, 0x48, 0x10, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x61, 0x7C, 0x48, 0x10, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x61, 0x7C, 0x48, 0x10, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x61, 0x7C, 0x48, 0x10, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x61, 0x7C, 0x48, 0x10, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x61, 0x7C, 0x48, 0x10, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x61, 0x7C, 0x48, 0x10, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x61, 0x7C, 0x48, 0x10, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xE1, 0x7C, 0x48, 0x10, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xE1, 0x7C, 0x48, 0x10, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xE1, 0x7C, 0x48, 0x10, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xE1, 0x7C, 0x48, 0x10, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xE1, 0x7C, 0x48, 0x10, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xE1, 0x7C, 0x48, 0x10, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xE1, 0x7C, 0x48, 0x10, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xE1, 0x7C, 0x48, 0x10, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x71, 0x7C, 0x48, 0x10, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x71, 0x7C, 0x48, 0x10, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x71, 0x7C, 0x48, 0x10, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x71, 0x7C, 0x48, 0x10, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x71, 0x7C, 0x48, 0x10, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x71, 0x7C, 0x48, 0x10, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x71, 0x7C, 0x48, 0x10, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0x71, 0x7C, 0x48, 0x10, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x10, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x10, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x10, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x10, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x10, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x10, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x10, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x10, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0xAE, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x9D, 0x48, 0x8B, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC2, 0x00, 0x00, 0x58, 0x59, 0x48, 0x81, 0xC4, 0xFF, 0xFF, 0xFF, 0x7F };
				memcpy(m_pWrapper, pWrapperCode, sizeof(pWrapperCode));

				// Stack Allocation

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3) = unContextSize;

				// Flags

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x8 + 0x3) = offsetof(RAW_CONTEXT, m_unRFLAGS);

				// Registers

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xF  + 0x4) = offsetof(RAW_CONTEXT, m_unRAX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x17 + 0x4) = offsetof(RAW_CONTEXT, m_unRCX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1F + 0x4) = offsetof(RAW_CONTEXT, m_unRDX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x27 + 0x4) = offsetof(RAW_CONTEXT, m_unRBX);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2F + 0x4) = offsetof(RAW_CONTEXT, m_unRSP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x37 + 0x4) = offsetof(RAW_CONTEXT, m_unRSP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3F)       = unContextSize;

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x43 + 0x4) = offsetof(RAW_CONTEXT, m_unRBP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x4B + 0x4) = offsetof(RAW_CONTEXT, m_unRSI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x53 + 0x4) = offsetof(RAW_CONTEXT, m_unRDI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x5B + 0x4) = offsetof(RAW_CONTEXT,  m_unR8);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x63 + 0x4) = offsetof(RAW_CONTEXT,  m_unR9);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x6B + 0x4) = offsetof(RAW_CONTEXT, m_unR10);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x73 + 0x4) = offsetof(RAW_CONTEXT, m_unR11);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x7B + 0x4) = offsetof(RAW_CONTEXT, m_unR12);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x83 + 0x4) = offsetof(RAW_CONTEXT, m_unR13);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x8B + 0x4) = offsetof(RAW_CONTEXT, m_unR14);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x93 + 0x4) = offsetof(RAW_CONTEXT, m_unR15);

				// ZMM

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x9B + 0x4) = offsetof(RAW_CONTEXT, m_unMXCSR);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xA3  + 0x7) = offsetof(RAW_CONTEXT,  m_ZMM0);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xAE  + 0x7) = offsetof(RAW_CONTEXT,  m_ZMM1);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xB9  + 0x7) = offsetof(RAW_CONTEXT,  m_ZMM2);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xC4  + 0x7) = offsetof(RAW_CONTEXT,  m_ZMM3);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xCF  + 0x7) = offsetof(RAW_CONTEXT,  m_ZMM4);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xDA  + 0x7) = offsetof(RAW_CONTEXT,  m_ZMM5);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xE5  + 0x7) = offsetof(RAW_CONTEXT,  m_ZMM6);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xF0  + 0x7) = offsetof(RAW_CONTEXT,  m_ZMM7);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xFB  + 0x7) = offsetof(RAW_CONTEXT,  m_ZMM8);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x106 + 0x7) = offsetof(RAW_CONTEXT,  m_ZMM9);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x111 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM10);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x11C + 0x7) = offsetof(RAW_CONTEXT, m_ZMM11);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x127 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM12);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x132 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM13);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x13D + 0x7) = offsetof(RAW_CONTEXT, m_ZMM14);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x148 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM15);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x153 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM16);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x15E + 0x7) = offsetof(RAW_CONTEXT, m_ZMM17);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x169 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM18);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x174 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM19);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x17F + 0x7) = offsetof(RAW_CONTEXT, m_ZMM20);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x18A + 0x7) = offsetof(RAW_CONTEXT, m_ZMM21);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x195 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM22);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1A0 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM23);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1AB + 0x7) = offsetof(RAW_CONTEXT, m_ZMM24);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1B6 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM25);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1C1 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM26);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1CC + 0x7) = offsetof(RAW_CONTEXT, m_ZMM27);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1D7 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM28);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1E2 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM29);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1ED + 0x7) = offsetof(RAW_CONTEXT, m_ZMM30);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1F8 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM31);

				// FPU

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x203 + 0x4) = offsetof(RAW_CONTEXT, m_FPU);

				// CallBack

				const size_t unAddress = reinterpret_cast<size_t>(pCallBack);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x212 + 0x4) = unAddress & 0xFFFFFFFF;
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x21A + 0x4) = (unAddress >> 32) & 0xFFFFFFFF;

				// FPU

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x233 + 0x3) = offsetof(RAW_CONTEXT, m_FPU);

				// ZMM

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x23A + 0x7) = offsetof(RAW_CONTEXT, m_ZMM31);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x245 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM30);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x250 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM29);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x25B + 0x7) = offsetof(RAW_CONTEXT, m_ZMM28);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x266 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM27);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x271 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM26);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x27C + 0x7) = offsetof(RAW_CONTEXT, m_ZMM25);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x287 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM24);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x292 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM23);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x29D + 0x7) = offsetof(RAW_CONTEXT, m_ZMM22);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2A8 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM21);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2B3 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM20);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2BE + 0x7) = offsetof(RAW_CONTEXT, m_ZMM19);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2C9 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM18);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2D4 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM17);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2DF + 0x7) = offsetof(RAW_CONTEXT, m_ZMM16);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2EA + 0x7) = offsetof(RAW_CONTEXT, m_ZMM15);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2F5 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM14);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x300 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM13);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x30B + 0x7) = offsetof(RAW_CONTEXT, m_ZMM12);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x316 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM11);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x321 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM10);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x32C + 0x7) = offsetof(RAW_CONTEXT,  m_ZMM9);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x337 + 0x7) = offsetof(RAW_CONTEXT,  m_ZMM8);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x342 + 0x7) = offsetof(RAW_CONTEXT,  m_ZMM7);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x34D + 0x7) = offsetof(RAW_CONTEXT,  m_ZMM6);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x358 + 0x7) = offsetof(RAW_CONTEXT,  m_ZMM5);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x363 + 0x7) = offsetof(RAW_CONTEXT,  m_ZMM4);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x36E + 0x7) = offsetof(RAW_CONTEXT,  m_ZMM3);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x379 + 0x7) = offsetof(RAW_CONTEXT,  m_ZMM2);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x384 + 0x7) = offsetof(RAW_CONTEXT,  m_ZMM1);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x38F + 0x7) = offsetof(RAW_CONTEXT,  m_ZMM0);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x39A + 0x4) = offsetof(RAW_CONTEXT, m_unMXCSR);

				// Registers

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3A2 + 0x4) = offsetof(RAW_CONTEXT, m_unR15);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3AA + 0x4) = offsetof(RAW_CONTEXT, m_unR14);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3B2 + 0x4) = offsetof(RAW_CONTEXT, m_unR13);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3BA + 0x4) = offsetof(RAW_CONTEXT, m_unR12);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3C2 + 0x4) = offsetof(RAW_CONTEXT, m_unR11);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3CA + 0x4) = offsetof(RAW_CONTEXT, m_unR10);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3D2 + 0x4) = offsetof(RAW_CONTEXT,  m_unR9);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3DA + 0x4) = offsetof(RAW_CONTEXT,  m_unR8);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3E2 + 0x4) = offsetof(RAW_CONTEXT, m_unRDI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3EA + 0x4) = offsetof(RAW_CONTEXT, m_unRSI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3F2 + 0x4) = offsetof(RAW_CONTEXT, m_unRBP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3FA + 0x4) = offsetof(RAW_CONTEXT, m_unRBX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x402 + 0x4) = offsetof(RAW_CONTEXT, m_unRDX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x40A + 0x4) = offsetof(RAW_CONTEXT, m_unRCX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x412 + 0x4) = offsetof(RAW_CONTEXT, m_unRAX);

				// Flags

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x41A + 0x3) = offsetof(RAW_CONTEXT, m_unRFLAGS);

				// Stack Modification

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x422 + 0x4) = offsetof(RAW_CONTEXT, m_unRSP);

				// Stack Deallocation

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x42F + 0x3) = unContextSize;
			} else if (bHaveAVX) {
				static const unsigned char pWrapperCode[] = { 0x48, 0x81, 0xEC, 0xFF, 0xFF, 0xFF, 0x7F, 0x9C, 0x8F, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x81, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0xAE, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x11, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x11, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x11, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x11, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x11, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x11, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x11, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x11, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x7C, 0x11, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x7C, 0x11, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x7C, 0x11, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x7C, 0x11, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x7C, 0x11, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x7C, 0x11, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x7C, 0x11, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x7C, 0x11, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x9B, 0xDD, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x50, 0x51, 0x48, 0x8D, 0x4C, 0x24, 0x10, 0xC7, 0x44, 0x24, 0xF8, 0xFF, 0xFF, 0xFF, 0x7F, 0xC7, 0x44, 0x24, 0xFC, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x54, 0x24, 0xF8, 0x0F, 0xB6, 0xC0, 0x85, 0xC0, 0x0F, 0x84, 0x2C, 0x01, 0x00, 0x00, 0x59, 0x58, 0xDD, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x7C, 0x10, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x7C, 0x10, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x7C, 0x10, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x7C, 0x10, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x7C, 0x10, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x7C, 0x10, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x7C, 0x10, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x7C, 0x10, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x10, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x10, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x10, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x10, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x10, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x10, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x10, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x10, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0xAE, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x9D, 0x48, 0x8B, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC2, 0x00, 0x00, 0x58, 0x59, 0x48, 0x81, 0xC4, 0xFF, 0xFF, 0xFF, 0x7F };
				memcpy(m_pWrapper, pWrapperCode, sizeof(pWrapperCode));

				// Stack Allocation

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3) = unContextSize;

				// Flags

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x8 + 0x3) = offsetof(RAW_CONTEXT, m_unRFLAGS);

				// Registers

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xF  + 0x4) = offsetof(RAW_CONTEXT, m_unRAX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x17 + 0x4) = offsetof(RAW_CONTEXT, m_unRCX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1F + 0x4) = offsetof(RAW_CONTEXT, m_unRDX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x27 + 0x4) = offsetof(RAW_CONTEXT, m_unRBX);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2F + 0x4) = offsetof(RAW_CONTEXT, m_unRSP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x37 + 0x4) = offsetof(RAW_CONTEXT, m_unRSP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3F) = unContextSize;

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x43 + 0x4) = offsetof(RAW_CONTEXT, m_unRBP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x4B + 0x4) = offsetof(RAW_CONTEXT, m_unRSI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x53 + 0x4) = offsetof(RAW_CONTEXT, m_unRDI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x5B + 0x4) = offsetof(RAW_CONTEXT,  m_unR8);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x63 + 0x4) = offsetof(RAW_CONTEXT,  m_unR9);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x6B + 0x4) = offsetof(RAW_CONTEXT, m_unR10);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x73 + 0x4) = offsetof(RAW_CONTEXT, m_unR11);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x7B + 0x4) = offsetof(RAW_CONTEXT, m_unR12);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x83 + 0x4) = offsetof(RAW_CONTEXT, m_unR13);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x8B + 0x4) = offsetof(RAW_CONTEXT, m_unR14);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x93 + 0x4) = offsetof(RAW_CONTEXT, m_unR15);

				// YMM

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x9B + 0x4) = offsetof(RAW_CONTEXT, m_unMXCSR);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xA3  + 0x5) = offsetof(RAW_CONTEXT,  m_YMM0);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xAC  + 0x5) = offsetof(RAW_CONTEXT,  m_YMM1);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xB5  + 0x5) = offsetof(RAW_CONTEXT,  m_YMM2);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xBE  + 0x5) = offsetof(RAW_CONTEXT,  m_YMM3);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xC7  + 0x5) = offsetof(RAW_CONTEXT,  m_YMM4);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xD0  + 0x5) = offsetof(RAW_CONTEXT,  m_YMM5);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xD9  + 0x5) = offsetof(RAW_CONTEXT,  m_YMM6);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xE2  + 0x5) = offsetof(RAW_CONTEXT,  m_YMM7);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xEB  + 0x5) = offsetof(RAW_CONTEXT,  m_YMM8);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xF4  + 0x5) = offsetof(RAW_CONTEXT,  m_YMM9);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xFD  + 0x5) = offsetof(RAW_CONTEXT, m_YMM10);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x106 + 0x5) = offsetof(RAW_CONTEXT, m_YMM11);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x10F + 0x5) = offsetof(RAW_CONTEXT, m_YMM12);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x118 + 0x5) = offsetof(RAW_CONTEXT, m_YMM13);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x121 + 0x5) = offsetof(RAW_CONTEXT, m_YMM14);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x12A + 0x5) = offsetof(RAW_CONTEXT, m_YMM15);

				// FPU

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x133 + 0x4) = offsetof(RAW_CONTEXT, m_FPU);

				// CallBack

				const size_t unAddress = reinterpret_cast<size_t>(pCallBack);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x142 + 0x4) = unAddress & 0xFFFFFFFF;
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x14A + 0x4) = (unAddress >> 32) & 0xFFFFFFFF;

				// FPU

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x163 + 0x3) = offsetof(RAW_CONTEXT, m_FPU);

				// YMM

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x16A + 0x5) = offsetof(RAW_CONTEXT, m_YMM15);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x173 + 0x5) = offsetof(RAW_CONTEXT, m_YMM14);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x17C + 0x5) = offsetof(RAW_CONTEXT, m_YMM13);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x185 + 0x5) = offsetof(RAW_CONTEXT, m_YMM12);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x18E + 0x5) = offsetof(RAW_CONTEXT, m_YMM11);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x197 + 0x5) = offsetof(RAW_CONTEXT, m_YMM10);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1A0 + 0x5) = offsetof(RAW_CONTEXT,  m_YMM9);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1A9 + 0x5) = offsetof(RAW_CONTEXT,  m_YMM8);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1B2 + 0x5) = offsetof(RAW_CONTEXT,  m_YMM7);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1BB + 0x5) = offsetof(RAW_CONTEXT,  m_YMM6);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1C4 + 0x5) = offsetof(RAW_CONTEXT,  m_YMM5);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1CD + 0x5) = offsetof(RAW_CONTEXT,  m_YMM4);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1D6 + 0x5) = offsetof(RAW_CONTEXT,  m_YMM3);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1DF + 0x5) = offsetof(RAW_CONTEXT,  m_YMM2);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1E8 + 0x5) = offsetof(RAW_CONTEXT,  m_YMM1);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1F1 + 0x5) = offsetof(RAW_CONTEXT,  m_YMM0);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1FA + 0x4) = offsetof(RAW_CONTEXT, m_unMXCSR);

				// Registers

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x202 + 0x4) = offsetof(RAW_CONTEXT, m_unR15);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x20A + 0x4) = offsetof(RAW_CONTEXT, m_unR14);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x212 + 0x4) = offsetof(RAW_CONTEXT, m_unR13);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x21A + 0x4) = offsetof(RAW_CONTEXT, m_unR12);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x222 + 0x4) = offsetof(RAW_CONTEXT, m_unR11);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x22A + 0x4) = offsetof(RAW_CONTEXT, m_unR10);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x232 + 0x4) = offsetof(RAW_CONTEXT,  m_unR9);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x23A + 0x4) = offsetof(RAW_CONTEXT,  m_unR8);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x242 + 0x4) = offsetof(RAW_CONTEXT, m_unRDI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x24A + 0x4) = offsetof(RAW_CONTEXT, m_unRSI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x252 + 0x4) = offsetof(RAW_CONTEXT, m_unRBP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x25A + 0x4) = offsetof(RAW_CONTEXT, m_unRBX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x262 + 0x4) = offsetof(RAW_CONTEXT, m_unRDX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x26A + 0x4) = offsetof(RAW_CONTEXT, m_unRCX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x272 + 0x4) = offsetof(RAW_CONTEXT, m_unRAX);

				// Flags

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x27A + 0x3) = offsetof(RAW_CONTEXT, m_unRFLAGS);

				// Stack Modification

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x282 + 0x4) = offsetof(RAW_CONTEXT, m_unRSP);

				// Stack Deallocation

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x28F + 0x3) = unContextSize;
			} else if (bHaveFPU) {
				static const unsigned char pWrapperCode[] = { 0x48, 0x81, 0xEC, 0xFF, 0xFF, 0xFF, 0x7F, 0x9C, 0x8F, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x81, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0xAE, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x11, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x11, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x11, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x11, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x11, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x11, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x11, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x11, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x9B, 0xDD, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x50, 0x51, 0x48, 0x8D, 0x4C, 0x24, 0x10, 0xC7, 0x44, 0x24, 0xF8, 0xFF, 0xFF, 0xFF, 0x7F, 0xC7, 0x44, 0x24, 0xFC, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x54, 0x24, 0xF8, 0x0F, 0xB6, 0xC0, 0x85, 0xC0, 0x0F, 0x84, 0x2C, 0x01, 0x00, 0x00, 0x59, 0x58, 0xDD, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x10, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x10, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x10, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x10, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x10, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x10, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x10, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x10, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0xAE, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x9D, 0x48, 0x8B, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC2, 0x00, 0x00, 0x58, 0x59, 0x48, 0x81, 0xC4, 0xFF, 0xFF, 0xFF, 0x7F };
				memcpy(m_pWrapper, pWrapperCode, sizeof(pWrapperCode));

				// Stack Allocation

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3) = unContextSize;

				// Flags

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x8 + 0x3) = offsetof(RAW_CONTEXT, m_unRFLAGS);

				// Registers

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xF  + 0x4) = offsetof(RAW_CONTEXT, m_unRAX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x17 + 0x4) = offsetof(RAW_CONTEXT, m_unRCX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1F + 0x4) = offsetof(RAW_CONTEXT, m_unRDX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x27 + 0x4) = offsetof(RAW_CONTEXT, m_unRBX);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2F + 0x4) = offsetof(RAW_CONTEXT, m_unRSP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x37 + 0x4) = offsetof(RAW_CONTEXT, m_unRSP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3F) = unContextSize;

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x43 + 0x4) = offsetof(RAW_CONTEXT, m_unRBP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x4B + 0x4) = offsetof(RAW_CONTEXT, m_unRSI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x53 + 0x4) = offsetof(RAW_CONTEXT, m_unRDI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x5B + 0x4) = offsetof(RAW_CONTEXT,  m_unR8);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x63 + 0x4) = offsetof(RAW_CONTEXT,  m_unR9);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x6B + 0x4) = offsetof(RAW_CONTEXT, m_unR10);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x73 + 0x4) = offsetof(RAW_CONTEXT, m_unR11);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x7B + 0x4) = offsetof(RAW_CONTEXT, m_unR12);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x83 + 0x4) = offsetof(RAW_CONTEXT, m_unR13);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x8B + 0x4) = offsetof(RAW_CONTEXT, m_unR14);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x93 + 0x4) = offsetof(RAW_CONTEXT, m_unR15);

				// XMM

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x9B + 0x4) = offsetof(RAW_CONTEXT, m_unMXCSR);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xA3  + 0x5) = offsetof(RAW_CONTEXT,  m_XMM0);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xAC  + 0x5) = offsetof(RAW_CONTEXT,  m_XMM1);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xB5  + 0x5) = offsetof(RAW_CONTEXT,  m_XMM2);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xBE  + 0x5) = offsetof(RAW_CONTEXT,  m_XMM3);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xC7  + 0x5) = offsetof(RAW_CONTEXT,  m_XMM4);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xD0  + 0x5) = offsetof(RAW_CONTEXT,  m_XMM5);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xD9  + 0x5) = offsetof(RAW_CONTEXT,  m_XMM6);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xE2  + 0x5) = offsetof(RAW_CONTEXT,  m_XMM7);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xEB  + 0x5) = offsetof(RAW_CONTEXT,  m_XMM8);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xF4  + 0x5) = offsetof(RAW_CONTEXT,  m_XMM9);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xFD  + 0x5) = offsetof(RAW_CONTEXT, m_XMM10);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x106 + 0x5) = offsetof(RAW_CONTEXT, m_XMM11);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x10F + 0x5) = offsetof(RAW_CONTEXT, m_XMM12);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x118 + 0x5) = offsetof(RAW_CONTEXT, m_XMM13);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x121 + 0x5) = offsetof(RAW_CONTEXT, m_XMM14);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x12A + 0x5) = offsetof(RAW_CONTEXT, m_XMM15);

				// FPU

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x133 + 0x4) = offsetof(RAW_CONTEXT, m_FPU);

				// CallBack

				const size_t unAddress = reinterpret_cast<size_t>(pCallBack);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x142 + 0x4) = unAddress & 0xFFFFFFFF;
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x14A + 0x4) = (unAddress >> 32) & 0xFFFFFFFF;

				// FPU

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x163 + 0x3) = offsetof(RAW_CONTEXT, m_FPU);

				// XMM

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x16A + 0x5) = offsetof(RAW_CONTEXT, m_XMM15);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x173 + 0x5) = offsetof(RAW_CONTEXT, m_XMM14);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x17C + 0x5) = offsetof(RAW_CONTEXT, m_XMM13);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x185 + 0x5) = offsetof(RAW_CONTEXT, m_XMM12);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x18E + 0x5) = offsetof(RAW_CONTEXT, m_XMM11);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x197 + 0x5) = offsetof(RAW_CONTEXT, m_XMM10);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1A0 + 0x5) = offsetof(RAW_CONTEXT,  m_XMM9);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1A9 + 0x5) = offsetof(RAW_CONTEXT,  m_XMM8);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1B2 + 0x5) = offsetof(RAW_CONTEXT,  m_XMM7);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1BB + 0x5) = offsetof(RAW_CONTEXT,  m_XMM6);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1C4 + 0x5) = offsetof(RAW_CONTEXT,  m_XMM5);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1CD + 0x5) = offsetof(RAW_CONTEXT,  m_XMM4);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1D6 + 0x5) = offsetof(RAW_CONTEXT,  m_XMM3);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1DF + 0x5) = offsetof(RAW_CONTEXT,  m_XMM2);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1E8 + 0x5) = offsetof(RAW_CONTEXT,  m_XMM1);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1F1 + 0x5) = offsetof(RAW_CONTEXT,  m_XMM0);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1FA + 0x4) = offsetof(RAW_CONTEXT, m_unMXCSR);

				// Registers

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x202 + 0x4) = offsetof(RAW_CONTEXT, m_unR15);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x20A + 0x4) = offsetof(RAW_CONTEXT, m_unR14);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x212 + 0x4) = offsetof(RAW_CONTEXT, m_unR13);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x21A + 0x4) = offsetof(RAW_CONTEXT, m_unR12);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x222 + 0x4) = offsetof(RAW_CONTEXT, m_unR11);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x22A + 0x4) = offsetof(RAW_CONTEXT, m_unR10);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x232 + 0x4) = offsetof(RAW_CONTEXT,  m_unR9);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x23A + 0x4) = offsetof(RAW_CONTEXT,  m_unR8);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x242 + 0x4) = offsetof(RAW_CONTEXT, m_unRDI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x24A + 0x4) = offsetof(RAW_CONTEXT, m_unRSI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x252 + 0x4) = offsetof(RAW_CONTEXT, m_unRBP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x25A + 0x4) = offsetof(RAW_CONTEXT, m_unRBX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x262 + 0x4) = offsetof(RAW_CONTEXT, m_unRDX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x26A + 0x4) = offsetof(RAW_CONTEXT, m_unRCX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x272 + 0x4) = offsetof(RAW_CONTEXT, m_unRAX);

				// Flags

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x27A + 0x3) = offsetof(RAW_CONTEXT, m_unRFLAGS);

				// Stack Modification

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x282 + 0x4) = offsetof(RAW_CONTEXT, m_unRSP);

				// Stack Deallocation

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x28F + 0x3) = unContextSize;
			} else if (bHaveSSE) {
				static const unsigned char pWrapperCode[] = { 0x48, 0x81, 0xEC, 0xFF, 0xFF, 0xFF, 0x7F, 0x9C, 0x8F, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x81, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0xAE, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x11, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x11, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x11, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x11, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x11, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x11, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x11, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x11, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x50, 0x51, 0x48, 0x8D, 0x4C, 0x24, 0x10, 0xC7, 0x44, 0x24, 0xF8, 0xFF, 0xFF, 0xFF, 0x7F, 0xC7, 0x44, 0x24, 0xFC, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x54, 0x24, 0xF8, 0x0F, 0xB6, 0xC0, 0x85, 0xC0, 0x0F, 0x84, 0x25, 0x01, 0x00, 0x00, 0x59, 0x58, 0xC5, 0x78, 0x10, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x10, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x10, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x10, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x10, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x10, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x10, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0x78, 0x10, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0xAE, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x9D, 0x48, 0x8B, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC2, 0x00, 0x00, 0x58, 0x59, 0x48, 0x81, 0xC4, 0xFF, 0xFF, 0xFF, 0x7F };
				memcpy(m_pWrapper, pWrapperCode, sizeof(pWrapperCode));

				// Stack Allocation

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3) = unContextSize;

				// Flags

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x8 + 0x3) = offsetof(RAW_CONTEXT, m_unRFLAGS);

				// Registers

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xF  + 0x4) = offsetof(RAW_CONTEXT, m_unRAX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x17 + 0x4) = offsetof(RAW_CONTEXT, m_unRCX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1F + 0x4) = offsetof(RAW_CONTEXT, m_unRDX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x27 + 0x4) = offsetof(RAW_CONTEXT, m_unRBX);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2F + 0x4) = offsetof(RAW_CONTEXT, m_unRSP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x37 + 0x4) = offsetof(RAW_CONTEXT, m_unRSP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3F) = unContextSize;

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x43 + 0x4) = offsetof(RAW_CONTEXT, m_unRBP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x4B + 0x4) = offsetof(RAW_CONTEXT, m_unRSI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x53 + 0x4) = offsetof(RAW_CONTEXT, m_unRDI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x5B + 0x4) = offsetof(RAW_CONTEXT,  m_unR8);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x63 + 0x4) = offsetof(RAW_CONTEXT,  m_unR9);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x6B + 0x4) = offsetof(RAW_CONTEXT, m_unR10);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x73 + 0x4) = offsetof(RAW_CONTEXT, m_unR11);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x7B + 0x4) = offsetof(RAW_CONTEXT, m_unR12);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x83 + 0x4) = offsetof(RAW_CONTEXT, m_unR13);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x8B + 0x4) = offsetof(RAW_CONTEXT, m_unR14);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x93 + 0x4) = offsetof(RAW_CONTEXT, m_unR15);

				// XMM

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x9B + 0x4) = offsetof(RAW_CONTEXT, m_unMXCSR);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xA3  + 0x5) = offsetof(RAW_CONTEXT,  m_XMM0);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xAC  + 0x5) = offsetof(RAW_CONTEXT,  m_XMM1);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xB5  + 0x5) = offsetof(RAW_CONTEXT,  m_XMM2);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xBE  + 0x5) = offsetof(RAW_CONTEXT,  m_XMM3);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xC7  + 0x5) = offsetof(RAW_CONTEXT,  m_XMM4);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xD0  + 0x5) = offsetof(RAW_CONTEXT,  m_XMM5);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xD9  + 0x5) = offsetof(RAW_CONTEXT,  m_XMM6);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xE2  + 0x5) = offsetof(RAW_CONTEXT,  m_XMM7);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xEB  + 0x5) = offsetof(RAW_CONTEXT,  m_XMM8);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xF4  + 0x5) = offsetof(RAW_CONTEXT,  m_XMM9);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xFD  + 0x5) = offsetof(RAW_CONTEXT, m_XMM10);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x106 + 0x5) = offsetof(RAW_CONTEXT, m_XMM11);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x10F + 0x5) = offsetof(RAW_CONTEXT, m_XMM12);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x118 + 0x5) = offsetof(RAW_CONTEXT, m_XMM13);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x121 + 0x5) = offsetof(RAW_CONTEXT, m_XMM14);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x12A + 0x5) = offsetof(RAW_CONTEXT, m_XMM15);

				// CallBack

				const size_t unAddress = reinterpret_cast<size_t>(pCallBack);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x13A + 0x4) = unAddress & 0xFFFFFFFF;
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x142 + 0x4) = (unAddress >> 32) & 0xFFFFFFFF;

				// XMM

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x15B + 0x5) = offsetof(RAW_CONTEXT, m_XMM15);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x164 + 0x5) = offsetof(RAW_CONTEXT, m_XMM14);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x16D + 0x5) = offsetof(RAW_CONTEXT, m_XMM13);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x176 + 0x5) = offsetof(RAW_CONTEXT, m_XMM12);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x17F + 0x5) = offsetof(RAW_CONTEXT, m_XMM11);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x188 + 0x5) = offsetof(RAW_CONTEXT, m_XMM10);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x191 + 0x5) = offsetof(RAW_CONTEXT,  m_XMM9);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x19A + 0x5) = offsetof(RAW_CONTEXT,  m_XMM8);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1A3 + 0x5) = offsetof(RAW_CONTEXT,  m_XMM7);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1AC + 0x5) = offsetof(RAW_CONTEXT,  m_XMM6);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1B5 + 0x5) = offsetof(RAW_CONTEXT,  m_XMM5);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1BE + 0x5) = offsetof(RAW_CONTEXT,  m_XMM4);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1C7 + 0x5) = offsetof(RAW_CONTEXT,  m_XMM3);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1D0 + 0x5) = offsetof(RAW_CONTEXT,  m_XMM2);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1D9 + 0x5) = offsetof(RAW_CONTEXT,  m_XMM1);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1E2 + 0x5) = offsetof(RAW_CONTEXT,  m_XMM0);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1EB + 0x4) = offsetof(RAW_CONTEXT, m_unMXCSR);

				// Registers

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1F3 + 0x4) = offsetof(RAW_CONTEXT, m_unR15);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1FB + 0x4) = offsetof(RAW_CONTEXT, m_unR14);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x203 + 0x4) = offsetof(RAW_CONTEXT, m_unR13);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x20B + 0x4) = offsetof(RAW_CONTEXT, m_unR12);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x213 + 0x4) = offsetof(RAW_CONTEXT, m_unR11);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x21B + 0x4) = offsetof(RAW_CONTEXT, m_unR10);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x223 + 0x4) = offsetof(RAW_CONTEXT,  m_unR9);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x22B + 0x4) = offsetof(RAW_CONTEXT,  m_unR8);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x233 + 0x4) = offsetof(RAW_CONTEXT, m_unRDI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x23B + 0x4) = offsetof(RAW_CONTEXT, m_unRSI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x243 + 0x4) = offsetof(RAW_CONTEXT, m_unRBP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x24B + 0x4) = offsetof(RAW_CONTEXT, m_unRBX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x253 + 0x4) = offsetof(RAW_CONTEXT, m_unRDX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x25B + 0x4) = offsetof(RAW_CONTEXT, m_unRCX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x263 + 0x4) = offsetof(RAW_CONTEXT, m_unRAX);

				// Flags

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x26B + 0x3) = offsetof(RAW_CONTEXT, m_unRFLAGS);

				// Stack Modification

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x273 + 0x4) = offsetof(RAW_CONTEXT, m_unRSP);

				// Stack Deallocation

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x280 + 0x3) = unContextSize;
			} else {
				static const unsigned char pWrapperCode[] = { 0x48, 0x81, 0xEC, 0xFF, 0xFF, 0xFF, 0x7F, 0x9C, 0x8F, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x81, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x89, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x89, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x50, 0x51, 0x48, 0x8D, 0x4C, 0x24, 0x10, 0xC7, 0x44, 0x24, 0xF8, 0xFF, 0xFF, 0xFF, 0x7F, 0xC7, 0x44, 0x24, 0xFC, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x54, 0x24, 0xF8, 0x0F, 0xB6, 0xC0, 0x85, 0xC0, 0x0F, 0x84, 0x8D, 0x00, 0x00, 0x00, 0x59, 0x58, 0x4C, 0x8B, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x4C, 0x8B, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x48, 0x8B, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x9D, 0x48, 0x8B, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC2, 0x00, 0x00, 0x58, 0x59, 0x48, 0x81, 0xC4, 0xFF, 0xFF, 0xFF, 0x7F };
				memcpy(m_pWrapper, pWrapperCode, sizeof(pWrapperCode));

				// Stack Allocation

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3) = unContextSize;

				// Flags

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x8 + 0x3) = offsetof(RAW_CONTEXT, m_unRFLAGS);

				// Registers

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xF  + 0x4) = offsetof(RAW_CONTEXT, m_unRAX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x17 + 0x4) = offsetof(RAW_CONTEXT, m_unRCX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1F + 0x4) = offsetof(RAW_CONTEXT, m_unRDX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x27 + 0x4) = offsetof(RAW_CONTEXT, m_unRBX);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2F + 0x4) = offsetof(RAW_CONTEXT, m_unRSP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x37 + 0x4) = offsetof(RAW_CONTEXT, m_unRSP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3F) = unContextSize;

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x43 + 0x4) = offsetof(RAW_CONTEXT, m_unRBP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x4B + 0x4) = offsetof(RAW_CONTEXT, m_unRSI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x53 + 0x4) = offsetof(RAW_CONTEXT, m_unRDI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x5B + 0x4) = offsetof(RAW_CONTEXT,  m_unR8);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x63 + 0x4) = offsetof(RAW_CONTEXT,  m_unR9);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x6B + 0x4) = offsetof(RAW_CONTEXT, m_unR10);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x73 + 0x4) = offsetof(RAW_CONTEXT, m_unR11);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x7B + 0x4) = offsetof(RAW_CONTEXT, m_unR12);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x83 + 0x4) = offsetof(RAW_CONTEXT, m_unR13);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x8B + 0x4) = offsetof(RAW_CONTEXT, m_unR14);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x93 + 0x4) = offsetof(RAW_CONTEXT, m_unR15);

				// CallBack

				const size_t unAddress = reinterpret_cast<size_t>(pCallBack);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xA2 + 0x4) = unAddress & 0xFFFFFFFF;
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xAA + 0x4) = (unAddress >> 32) & 0xFFFFFFFF;

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1EB + 0x4) = offsetof(RAW_CONTEXT, m_unMXCSR);

				// Registers

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xC3  + 0x4) = offsetof(RAW_CONTEXT, m_unR15);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xCB  + 0x4) = offsetof(RAW_CONTEXT, m_unR14);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xD3  + 0x4) = offsetof(RAW_CONTEXT, m_unR13);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xDB  + 0x4) = offsetof(RAW_CONTEXT, m_unR12);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xE3  + 0x4) = offsetof(RAW_CONTEXT, m_unR11);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xEB  + 0x4) = offsetof(RAW_CONTEXT, m_unR10);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xF3  + 0x4) = offsetof(RAW_CONTEXT,  m_unR9);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xFB  + 0x4) = offsetof(RAW_CONTEXT,  m_unR8);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x103 + 0x4) = offsetof(RAW_CONTEXT, m_unRDI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x10B + 0x4) = offsetof(RAW_CONTEXT, m_unRSI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x113 + 0x4) = offsetof(RAW_CONTEXT, m_unRBP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x11B + 0x4) = offsetof(RAW_CONTEXT, m_unRBX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x123 + 0x4) = offsetof(RAW_CONTEXT, m_unRDX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x12B + 0x4) = offsetof(RAW_CONTEXT, m_unRCX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x133 + 0x4) = offsetof(RAW_CONTEXT, m_unRAX);

				// Flags

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x13B + 0x3) = offsetof(RAW_CONTEXT, m_unRFLAGS);

				// Stack Modification

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x143 + 0x4) = offsetof(RAW_CONTEXT, m_unRSP);

				// Stack Deallocation

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x150 + 0x3) = unContextSize;
			}
#elif _M_IX86
			if (bHaveAVX512) {
				static const unsigned char pWrapperCode[] = { 0x81, 0xEC, 0xFF, 0xFF, 0xFF, 0x7F, 0x9C, 0x8F, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x81, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0xAE, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x11, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x11, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x11, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x11, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x11, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x11, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x11, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x11, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x9B, 0xDD, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x50, 0x8D, 0x44, 0x24, 0x04, 0x50, 0xC7, 0x44, 0x24, 0xFC, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x54, 0x24, 0xFC, 0x83, 0xC4, 0x04, 0x0F, 0xB6, 0xC0, 0x85, 0xC0, 0x0F, 0x84, 0xAB, 0x00, 0x00, 0x00, 0x58, 0xDD, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x10, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x10, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x10, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x10, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x10, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x10, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x10, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x62, 0xF1, 0x7C, 0x48, 0x10, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0xAE, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x9D, 0x8B, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC2, 0x00, 0x00, 0x58, 0x81, 0xC4, 0xFF, 0xFF, 0xFF, 0x7F };
				memcpy(m_pWrapper, pWrapperCode, sizeof(pWrapperCode));

				// Stack Allocation

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2) = unContextSize;

				// Flags

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x7 + 0x3) = offsetof(RAW_CONTEXT, m_unEFLAGS);

				// Registers

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xE  + 0x3) = offsetof(RAW_CONTEXT, m_unEAX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x15 + 0x3) = offsetof(RAW_CONTEXT, m_unECX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1C + 0x3) = offsetof(RAW_CONTEXT, m_unEDX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x23 + 0x3) = offsetof(RAW_CONTEXT, m_unEBX);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2A + 0x3) = offsetof(RAW_CONTEXT, m_unESP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x31 + 0x3) = offsetof(RAW_CONTEXT, m_unESP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x38) = unContextSize;

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3C + 0x3) = offsetof(RAW_CONTEXT, m_unEBP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x43 + 0x3) = offsetof(RAW_CONTEXT, m_unESI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x4A + 0x3) = offsetof(RAW_CONTEXT, m_unEDI);

				// ZMM

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x51 + 0x4) = offsetof(RAW_CONTEXT, m_unMXCSR);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x59 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM0);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x64 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM1);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x6F + 0x7) = offsetof(RAW_CONTEXT, m_ZMM2);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x7A + 0x7) = offsetof(RAW_CONTEXT, m_ZMM3);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x85 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM4);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x90 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM5);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x9B + 0x7) = offsetof(RAW_CONTEXT, m_ZMM6);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xA6 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM7);

				// FPU

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xB1 + 0x4) = offsetof(RAW_CONTEXT, m_FPU);

				// CallBack

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xBF + 0x4) = reinterpret_cast<unsigned int>(pCallBack);

				// FPU

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xDA + 0x3) = offsetof(RAW_CONTEXT, m_FPU);

				// ZMM

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xE1  + 0x7) = offsetof(RAW_CONTEXT, m_ZMM7);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xEC  + 0x7) = offsetof(RAW_CONTEXT, m_ZMM6);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xF7  + 0x7) = offsetof(RAW_CONTEXT, m_ZMM5);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x102 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM4);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x10D + 0x7) = offsetof(RAW_CONTEXT, m_ZMM3);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x118 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM2);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x123 + 0x7) = offsetof(RAW_CONTEXT, m_ZMM1);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x12E + 0x7) = offsetof(RAW_CONTEXT, m_ZMM0);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x139 + 0x4) = offsetof(RAW_CONTEXT, m_unMXCSR);

				// Registers

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x141 + 0x3) = offsetof(RAW_CONTEXT, m_unEDI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x148 + 0x3) = offsetof(RAW_CONTEXT, m_unESI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x14F + 0x3) = offsetof(RAW_CONTEXT, m_unEBP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x156 + 0x3) = offsetof(RAW_CONTEXT, m_unEBX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x15D + 0x3) = offsetof(RAW_CONTEXT, m_unEDX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x164 + 0x3) = offsetof(RAW_CONTEXT, m_unECX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x16B + 0x3) = offsetof(RAW_CONTEXT, m_unEAX);

				// Flags

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x172 + 0x3) = offsetof(RAW_CONTEXT, m_unEFLAGS);

				// Stack Modification

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x17A + 0x3) = offsetof(RAW_CONTEXT, m_unESP);

				// Stack Deallocation

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x185 + 0x2) = unContextSize;
			} else if (bHaveAVX) {
				static const unsigned char pWrapperCode[] = { 0x81, 0xEC, 0xFF, 0xFF, 0xFF, 0x7F, 0x9C, 0x8F, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x81, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0xAE, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x11, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x11, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x11, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x11, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x11, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x11, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x11, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x11, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x9B, 0xDD, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x50, 0x8D, 0x44, 0x24, 0x04, 0x50, 0xC7, 0x44, 0x24, 0xFC, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x54, 0x24, 0xFC, 0x83, 0xC4, 0x04, 0x0F, 0xB6, 0xC0, 0x85, 0xC0, 0x0F, 0x84, 0x9B, 0x00, 0x00, 0x00, 0x58, 0xDD, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x10, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x10, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x10, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x10, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x10, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x10, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x10, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xFC, 0x10, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0xAE, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x9D, 0x8B, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC2, 0x00, 0x00, 0x58, 0x81, 0xC4, 0xFF, 0xFF, 0xFF, 0x7F };
				memcpy(m_pWrapper, pWrapperCode, sizeof(pWrapperCode));

				// Stack Allocation

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2) = unContextSize;

				// Flags

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x7 + 0x3) = offsetof(RAW_CONTEXT, m_unEFLAGS);

				// Registers

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xE  + 0x3) = offsetof(RAW_CONTEXT, m_unEAX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x15 + 0x3) = offsetof(RAW_CONTEXT, m_unECX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1C + 0x3) = offsetof(RAW_CONTEXT, m_unEDX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x23 + 0x3) = offsetof(RAW_CONTEXT, m_unEBX);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2A + 0x3) = offsetof(RAW_CONTEXT, m_unESP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x31 + 0x3) = offsetof(RAW_CONTEXT, m_unESP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x38) = unContextSize;

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3C + 0x3) = offsetof(RAW_CONTEXT, m_unEBP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x43 + 0x3) = offsetof(RAW_CONTEXT, m_unESI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x4A + 0x3) = offsetof(RAW_CONTEXT, m_unEDI);

				// YMM

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x51 + 0x4) = offsetof(RAW_CONTEXT, m_unMXCSR);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x59 + 0x5) = offsetof(RAW_CONTEXT, m_YMM0);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x62 + 0x5) = offsetof(RAW_CONTEXT, m_YMM1);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x6B + 0x5) = offsetof(RAW_CONTEXT, m_YMM2);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x74 + 0x5) = offsetof(RAW_CONTEXT, m_YMM3);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x7D + 0x5) = offsetof(RAW_CONTEXT, m_YMM4);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x86 + 0x5) = offsetof(RAW_CONTEXT, m_YMM5);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x8F + 0x5) = offsetof(RAW_CONTEXT, m_YMM6);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x98 + 0x5) = offsetof(RAW_CONTEXT, m_YMM7);

				// FPU

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xA1 + 0x4) = offsetof(RAW_CONTEXT, m_FPU);

				// CallBack

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xAF + 0x4) = reinterpret_cast<unsigned int>(pCallBack);

				// FPU

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xCA + 0x3) = offsetof(RAW_CONTEXT, m_FPU);

				// YMM

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xD1  + 0x5) = offsetof(RAW_CONTEXT, m_YMM7);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xDA  + 0x5) = offsetof(RAW_CONTEXT, m_YMM6);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xE3  + 0x5) = offsetof(RAW_CONTEXT, m_YMM5);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xEC  + 0x5) = offsetof(RAW_CONTEXT, m_YMM4);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xF5  + 0x5) = offsetof(RAW_CONTEXT, m_YMM3);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xFE  + 0x5) = offsetof(RAW_CONTEXT, m_YMM2);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x107 + 0x5) = offsetof(RAW_CONTEXT, m_YMM1);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x110 + 0x5) = offsetof(RAW_CONTEXT, m_YMM0);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x119 + 0x4) = offsetof(RAW_CONTEXT, m_unMXCSR);

				// Registers

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x121 + 0x3) = offsetof(RAW_CONTEXT, m_unEDI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x128 + 0x3) = offsetof(RAW_CONTEXT, m_unESI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x12F + 0x3) = offsetof(RAW_CONTEXT, m_unEBP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x136 + 0x3) = offsetof(RAW_CONTEXT, m_unEBX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x13D + 0x3) = offsetof(RAW_CONTEXT, m_unEDX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x144 + 0x3) = offsetof(RAW_CONTEXT, m_unECX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x14B + 0x3) = offsetof(RAW_CONTEXT, m_unEAX);

				// Flags

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x152 + 0x3) = offsetof(RAW_CONTEXT, m_unEFLAGS);

				// Stack Modification

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x15A + 0x3) = offsetof(RAW_CONTEXT, m_unESP);

				// Stack Deallocation

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x165 + 0x2) = unContextSize;
			} else if (bHaveFPU) {
				static const unsigned char pWrapperCode[] = { 0x81, 0xEC, 0xFF, 0xFF, 0xFF, 0x7F, 0x9C, 0x8F, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x81, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0xAE, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x9B, 0xDD, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x50, 0x8D, 0x44, 0x24, 0x04, 0x50, 0xC7, 0x44, 0x24, 0xFC, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x54, 0x24, 0xFC, 0x83, 0xC4, 0x04, 0x0F, 0xB6, 0xC0, 0x85, 0xC0, 0x0F, 0x84, 0x9B, 0x00, 0x00, 0x00, 0x58, 0xDD, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0xAE, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x9D, 0x8B, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC2, 0x00, 0x00, 0x58, 0x81, 0xC4, 0xFF, 0xFF, 0xFF, 0x7F };
				memcpy(m_pWrapper, pWrapperCode, sizeof(pWrapperCode));

				// Stack Allocation

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2) = unContextSize;

				// Flags

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x7 + 0x3) = offsetof(RAW_CONTEXT, m_unEFLAGS);

				// Registers

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xE  + 0x3) = offsetof(RAW_CONTEXT, m_unEAX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x15 + 0x3) = offsetof(RAW_CONTEXT, m_unECX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1C + 0x3) = offsetof(RAW_CONTEXT, m_unEDX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x23 + 0x3) = offsetof(RAW_CONTEXT, m_unEBX);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2A + 0x3) = offsetof(RAW_CONTEXT, m_unESP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x31 + 0x3) = offsetof(RAW_CONTEXT, m_unESP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x38) = unContextSize;

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3C + 0x3) = offsetof(RAW_CONTEXT, m_unEBP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x43 + 0x3) = offsetof(RAW_CONTEXT, m_unESI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x4A + 0x3) = offsetof(RAW_CONTEXT, m_unEDI);

				// XMM

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x51 + 0x4) = offsetof(RAW_CONTEXT, m_unMXCSR);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x59 + 0x5) = offsetof(RAW_CONTEXT, m_XMM0);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x62 + 0x5) = offsetof(RAW_CONTEXT, m_XMM1);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x6B + 0x5) = offsetof(RAW_CONTEXT, m_XMM2);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x74 + 0x5) = offsetof(RAW_CONTEXT, m_XMM3);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x7D + 0x5) = offsetof(RAW_CONTEXT, m_XMM4);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x86 + 0x5) = offsetof(RAW_CONTEXT, m_XMM5);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x8F + 0x5) = offsetof(RAW_CONTEXT, m_XMM6);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x98 + 0x5) = offsetof(RAW_CONTEXT, m_XMM7);

				// FPU

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xA1 + 0x4) = offsetof(RAW_CONTEXT, m_FPU);

				// CallBack

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xAF + 0x4) = reinterpret_cast<unsigned int>(pCallBack);

				// FPU

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xCA + 0x3) = offsetof(RAW_CONTEXT, m_FPU);

				// XMM

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xD1  + 0x5) = offsetof(RAW_CONTEXT, m_XMM7);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xDA  + 0x5) = offsetof(RAW_CONTEXT, m_XMM6);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xE3  + 0x5) = offsetof(RAW_CONTEXT, m_XMM5);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xEC  + 0x5) = offsetof(RAW_CONTEXT, m_XMM4);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xF5  + 0x5) = offsetof(RAW_CONTEXT, m_XMM3);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xFE  + 0x5) = offsetof(RAW_CONTEXT, m_XMM2);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x107 + 0x5) = offsetof(RAW_CONTEXT, m_XMM1);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x110 + 0x5) = offsetof(RAW_CONTEXT, m_XMM0);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x119 + 0x4) = offsetof(RAW_CONTEXT, m_unMXCSR);

				// Registers

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x121 + 0x3) = offsetof(RAW_CONTEXT, m_unEDI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x128 + 0x3) = offsetof(RAW_CONTEXT, m_unESI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x12F + 0x3) = offsetof(RAW_CONTEXT, m_unEBP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x136 + 0x3) = offsetof(RAW_CONTEXT, m_unEBX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x13D + 0x3) = offsetof(RAW_CONTEXT, m_unEDX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x144 + 0x3) = offsetof(RAW_CONTEXT, m_unECX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x14B + 0x3) = offsetof(RAW_CONTEXT, m_unEAX);

				// Flags

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x152 + 0x3) = offsetof(RAW_CONTEXT, m_unEFLAGS);

				// Stack Modification

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x15A + 0x3) = offsetof(RAW_CONTEXT, m_unESP);

				// Stack Deallocation

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x165 + 0x2) = unContextSize;
			} else if (bHaveSSE) {
				static const unsigned char pWrapperCode[] = { 0x81, 0xEC, 0xFF, 0xFF, 0xFF, 0x7F, 0x9C, 0x8F, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x81, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0xAE, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x11, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x50, 0x8D, 0x44, 0x24, 0x04, 0x50, 0xC7, 0x44, 0x24, 0xFC, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x54, 0x24, 0xFC, 0x83, 0xC4, 0x04, 0x0F, 0xB6, 0xC0, 0x85, 0xC0, 0x0F, 0x84, 0x94, 0x00, 0x00, 0x00, 0x58, 0xC5, 0xF8, 0x10, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC5, 0xF8, 0x10, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0xAE, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x9D, 0x8B, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC2, 0x00, 0x00, 0x58, 0x81, 0xC4, 0xFF, 0xFF, 0xFF, 0x7F };
				memcpy(m_pWrapper, pWrapperCode, sizeof(pWrapperCode));

				// Stack Allocation

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2) = unContextSize;

				// Flags

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x7 + 0x3) = offsetof(RAW_CONTEXT, m_unEFLAGS);

				// Registers

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xE  + 0x3) = offsetof(RAW_CONTEXT, m_unEAX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x15 + 0x3) = offsetof(RAW_CONTEXT, m_unECX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1C + 0x3) = offsetof(RAW_CONTEXT, m_unEDX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x23 + 0x3) = offsetof(RAW_CONTEXT, m_unEBX);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2A + 0x3) = offsetof(RAW_CONTEXT, m_unESP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x31 + 0x3) = offsetof(RAW_CONTEXT, m_unESP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x38) = unContextSize;

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3C + 0x3) = offsetof(RAW_CONTEXT, m_unEBP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x43 + 0x3) = offsetof(RAW_CONTEXT, m_unESI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x4A + 0x3) = offsetof(RAW_CONTEXT, m_unEDI);

				// XMM

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x51 + 0x4) = offsetof(RAW_CONTEXT, m_unMXCSR);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x59 + 0x5) = offsetof(RAW_CONTEXT, m_XMM0);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x62 + 0x5) = offsetof(RAW_CONTEXT, m_XMM1);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x6B + 0x5) = offsetof(RAW_CONTEXT, m_XMM2);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x74 + 0x5) = offsetof(RAW_CONTEXT, m_XMM3);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x7D + 0x5) = offsetof(RAW_CONTEXT, m_XMM4);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x86 + 0x5) = offsetof(RAW_CONTEXT, m_XMM5);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x8F + 0x5) = offsetof(RAW_CONTEXT, m_XMM6);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x98 + 0x5) = offsetof(RAW_CONTEXT, m_XMM7);

				// CallBack

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xA7 + 0x4) = reinterpret_cast<unsigned int>(pCallBack);

				// XMM

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xC2  + 0x5) = offsetof(RAW_CONTEXT, m_XMM7);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xCB  + 0x5) = offsetof(RAW_CONTEXT, m_XMM6);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xD4  + 0x5) = offsetof(RAW_CONTEXT, m_XMM5);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xDD  + 0x5) = offsetof(RAW_CONTEXT, m_XMM4);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xE6  + 0x5) = offsetof(RAW_CONTEXT, m_XMM3);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xEF  + 0x5) = offsetof(RAW_CONTEXT, m_XMM2);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xF8  + 0x5) = offsetof(RAW_CONTEXT, m_XMM1);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x101 + 0x5) = offsetof(RAW_CONTEXT, m_XMM0);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x10A + 0x4) = offsetof(RAW_CONTEXT, m_unMXCSR);

				// Registers

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x112 + 0x3) = offsetof(RAW_CONTEXT, m_unEDI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x119 + 0x3) = offsetof(RAW_CONTEXT, m_unESI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x120 + 0x3) = offsetof(RAW_CONTEXT, m_unEBP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x127 + 0x3) = offsetof(RAW_CONTEXT, m_unEBX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x12E + 0x3) = offsetof(RAW_CONTEXT, m_unEDX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x135 + 0x3) = offsetof(RAW_CONTEXT, m_unECX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x13C + 0x3) = offsetof(RAW_CONTEXT, m_unEAX);

				// Flags

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x143 + 0x3) = offsetof(RAW_CONTEXT, m_unEFLAGS);

				// Stack Modification

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x14B + 0x3) = offsetof(RAW_CONTEXT, m_unESP);

				// Stack Deallocation

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x156 + 0x2) = unContextSize;
			} else {
				static const unsigned char pWrapperCode[] = { 0x81, 0xEC, 0xFF, 0xFF, 0xFF, 0x7F, 0x9C, 0x8F, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x81, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x89, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x50, 0x8D, 0x44, 0x24, 0x04, 0x50, 0xC7, 0x44, 0x24, 0xFC, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x54, 0x24, 0xFC, 0x83, 0xC4, 0x04, 0x0F, 0xB6, 0xC0, 0x85, 0xC0, 0x74, 0x44, 0x58, 0x8B, 0xBC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0xAC, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0x9C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0x94, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0x8C, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x8B, 0x84, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xB4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0x9D, 0x8B, 0xA4, 0x24, 0xFF, 0xFF, 0xFF, 0x7F, 0xC2, 0x00, 0x00, 0x58, 0x81, 0xC4, 0xFF, 0xFF, 0xFF, 0x7F };
				memcpy(m_pWrapper, pWrapperCode, sizeof(pWrapperCode));

				// Stack Allocation

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2) = unContextSize;

				// Flags

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x7 + 0x3) = offsetof(RAW_CONTEXT, m_unEFLAGS);

				// Registers

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xE  + 0x3) = offsetof(RAW_CONTEXT, m_unEAX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x15 + 0x3) = offsetof(RAW_CONTEXT, m_unECX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x1C + 0x3) = offsetof(RAW_CONTEXT, m_unEDX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x23 + 0x3) = offsetof(RAW_CONTEXT, m_unEBX);

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x2A + 0x3) = offsetof(RAW_CONTEXT, m_unESP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x31 + 0x3) = offsetof(RAW_CONTEXT, m_unESP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x38) = unContextSize;

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x3C + 0x3) = offsetof(RAW_CONTEXT, m_unEBP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x43 + 0x3) = offsetof(RAW_CONTEXT, m_unESI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x4A + 0x3) = offsetof(RAW_CONTEXT, m_unEDI);

				// CallBack

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x57 + 0x4) = reinterpret_cast<unsigned int>(pCallBack);

				// Registers

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x6E + 0x3) = offsetof(RAW_CONTEXT, m_unEDI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x75 + 0x3) = offsetof(RAW_CONTEXT, m_unESI);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x7C + 0x3) = offsetof(RAW_CONTEXT, m_unEBP);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x83 + 0x3) = offsetof(RAW_CONTEXT, m_unEBX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x8A + 0x3) = offsetof(RAW_CONTEXT, m_unEDX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x91 + 0x3) = offsetof(RAW_CONTEXT, m_unECX);
				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x98 + 0x3) = offsetof(RAW_CONTEXT, m_unEAX);

				// Flags

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0x9F + 0x3) = offsetof(RAW_CONTEXT, m_unEFLAGS);

				// Stack Modification

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xA7 + 0x3) = offsetof(RAW_CONTEXT, m_unESP);

				// Stack Deallocation

				*reinterpret_cast<unsigned int*>(reinterpret_cast<char*>(m_pWrapper) + 0xB2 + 0x2) = unContextSize;
			}
#endif

			const size_t unJumpToWrapperOffset = __is_relative(m_pWrapper, m_pAddress);
			size_t unJumpToWrapperSize = 0;
			if (unJumpToWrapperOffset) { // E9 00 00 00 00 - jmp rel32
				unJumpToWrapperSize = 5;
			} else {
				if (bSingleInstructionOnly) {
					g_HookStorage.DeAlloc(m_pWrapper);
					m_pWrapper = nullptr;
					g_Suspender.Resume();
					return false;
				}
#ifdef _M_X64
				// C7 44 24 F8 44332211 - mov [rsp-0x8], 0x11223344
				// C7 44 24 FC 44332211 - mov [rsp-0x4], 0x11223344
				// FF 64 24 F8 - jmp [rsp-8]
				unJumpToWrapperSize = 20;
#elif _M_IX86
				// C7 44 24 FC 44332211 - mov [esp-0x4], 0x11223344
				// FF 64 24 FC - jmp [esp-4]
				unJumpToWrapperSize = 12;
#endif
			}

			INSTRUCTION ins;
			size_t unCopyingSize = 0;
			while (unCopyingSize < unJumpToWrapperSize) {
#ifdef _M_X64
				if (!RD_SUCCESS(RdDecode(&ins, reinterpret_cast<unsigned char*>(m_pAddress) + unCopyingSize, RD_CODE_64, RD_DATA_64))) {
#elif _M_IX86
				if (!RD_SUCCESS(RdDecode(&ins, reinterpret_cast<unsigned char*>(m_pAddress) + unCopyingSize, RD_CODE_32, RD_DATA_32))) {
#endif
					m_unFirstInstructionSize = 0;
					g_HookStorage.DeAlloc(m_pWrapper);
					m_pWrapper = nullptr;
					g_Suspender.Resume();
					return false;
				}

				if (!m_unFirstInstructionSize) {
					m_unFirstInstructionSize = ins.Length;
				}

				unCopyingSize += ins.Length;
			}

			m_pTrampoline = g_HookStorage.Alloc(HOOK_RAW_TRAMPOLINE_SIZE, m_pAddress);
			if (!m_pTrampoline) {
				m_unFirstInstructionSize = 0;
				g_HookStorage.DeAlloc(m_pWrapper);
				m_pWrapper = nullptr;
				g_Suspender.Resume();
				return false;
			}

			if (!Protection(m_pTrampoline, HOOK_RAW_TRAMPOLINE_SIZE, false).ChangeProtection(PAGE_READWRITE)) {
				g_HookStorage.DeAlloc(m_pTrampoline);
				m_pTrampoline = nullptr;
				m_unFirstInstructionSize = 0;
				g_HookStorage.DeAlloc(m_pWrapper);
				m_pWrapper = nullptr;
				g_Suspender.Resume();
				return false;
			}

			unsigned char* pJumpToTrampoline = nullptr;

#ifdef _M_X64
			if (bHaveAVX512) {
				pJumpToTrampoline = reinterpret_cast<unsigned char*>(m_pWrapper) + 0x436;
			} else if (bHaveAVX) {
				pJumpToTrampoline = reinterpret_cast<unsigned char*>(m_pWrapper) + 0x296;
			} else if (bHaveFPU) {
				pJumpToTrampoline = reinterpret_cast<unsigned char*>(m_pWrapper) + 0x296;
			} else if (bHaveSSE) {
				pJumpToTrampoline = reinterpret_cast<unsigned char*>(m_pWrapper) + 0x287;
			} else {
				pJumpToTrampoline = reinterpret_cast<unsigned char*>(m_pWrapper) + 0x157;
			}
#elif _M_IX86
			if (bHaveAVX512) {
				pJumpToTrampoline = reinterpret_cast<unsigned char*>(m_pWrapper) + 0x18B;
			} else if (bHaveAVX) {
				pJumpToTrampoline = reinterpret_cast<unsigned char*>(m_pWrapper) + 0x16B;
			} else if (bHaveFPU) {
				pJumpToTrampoline = reinterpret_cast<unsigned char*>(m_pWrapper) + 0x16B;
			} else if (bHaveSSE) {
				pJumpToTrampoline = reinterpret_cast<unsigned char*>(m_pWrapper) + 0x15C;
			} else {
				pJumpToTrampoline = reinterpret_cast<unsigned char*>(m_pWrapper) + 0xB8;
			}
#endif

			const size_t unToTrampolineJumpOffset = __is_relative(m_pTrampoline, pJumpToTrampoline);
			if (unToTrampolineJumpOffset) { // E9 00 00 00 00 - jmp rel32
				pJumpToTrampoline[0] = 0xE9;
				*reinterpret_cast<unsigned int*>(pJumpToTrampoline + 1) = static_cast<unsigned int>(unToTrampolineJumpOffset & 0xFFFFFFFF) - 5;
			} else {
#ifdef _M_X64
				// C7 44 24 F8 44332211 - mov [rsp-0x8], 0x11223344
				// C7 44 24 FC 44332211 - mov [rsp-0x4], 0x11223344
				// FF 64 24 F8 - jmp [rsp-8]

				const size_t unAddress = reinterpret_cast<size_t>(m_pTrampoline);

				pJumpToTrampoline[ 0] = 0xC7;
				pJumpToTrampoline[ 1] = 0x44;
				pJumpToTrampoline[ 2] = 0x24;
				pJumpToTrampoline[ 3] = 0xF8;

				*reinterpret_cast<unsigned int*>(pJumpToTrampoline + 4) = unAddress & 0xFFFFFFFF;

				pJumpToTrampoline[ 8] = 0xC7;
				pJumpToTrampoline[ 9] = 0x44;
				pJumpToTrampoline[10] = 0x24;
				pJumpToTrampoline[11] = 0xFC;

				*reinterpret_cast<unsigned int*>(pJumpToTrampoline + 12) = (unAddress >> 32) & 0xFFFFFFFF;

				pJumpToTrampoline[16] = 0xFF;
				pJumpToTrampoline[17] = 0x64;
				pJumpToTrampoline[18] = 0x24;
				pJumpToTrampoline[19] = 0xF8;
#elif _M_IX86
				// C7 44 24 FC 44332211 - mov [esp-0x4], 0x11223344
				// FF 64 24 FC - jmp [esp-4]

				pJumpToTrampoline[ 0] = 0xC7;
				pJumpToTrampoline[ 1] = 0x44;
				pJumpToTrampoline[ 2] = 0x24;
				pJumpToTrampoline[ 3] = 0xFC;

				*reinterpret_cast<unsigned int*>(pJumpToTrampoline + 4) = reinterpret_cast<unsigned int>(m_pTrampoline);

				pJumpToTrampoline[ 8] = 0xFF;
				pJumpToTrampoline[ 9] = 0x64;
				pJumpToTrampoline[10] = 0x24;
				pJumpToTrampoline[11] = 0xFC;
#endif
			}

			if (!Protection(m_pWrapper, HOOK_RAW_WRAPPER_SIZE, false).ChangeProtection(PAGE_EXECUTE_READ)) {
				g_HookStorage.DeAlloc(m_pTrampoline);
				m_pTrampoline = nullptr;
				m_unFirstInstructionSize = 0;
				g_HookStorage.DeAlloc(m_pWrapper);
				m_pWrapper = nullptr;
				g_Suspender.Resume();
				return false;
			}

			if (!Protection(m_pTrampoline, HOOK_RAW_TRAMPOLINE_SIZE, false).ChangeProtection(PAGE_READWRITE)) {
				g_HookStorage.DeAlloc(m_pTrampoline);
				m_pTrampoline = nullptr;
				m_unFirstInstructionSize = 0;
				g_HookStorage.DeAlloc(m_pWrapper);
				m_pWrapper = nullptr;
				g_Suspender.Resume();
				return false;
			}

			const size_t unJumpToOriginalOffset = __is_relative(reinterpret_cast<char*>(m_pAddress) + unJumpToWrapperSize, reinterpret_cast<char*>(m_pTrampoline) + unCopyingSize);
			size_t unJumpToOriginalSize = 0;
			if (unJumpToOriginalOffset) { // E9 00 00 00 00 - jmp rel32
				unJumpToOriginalSize = 5;
			} else {
#ifdef _M_X64
				// C7 44 24 F8 44332211 - mov [rsp-0x8], 0x11223344
				// C7 44 24 FC 44332211 - mov [rsp-0x4], 0x11223344
				// FF 64 24 F8 - jmp [rsp-8]
				unJumpToOriginalSize = 20;
#elif _M_IX86
				// C7 44 24 FC 44332211 - mov [esp-0x4], 0x11223344
				// FF 64 24 FC - jmp [esp-4]
				unJumpToOriginalSize = 12;
#endif
			}

			memset(m_pTrampoline, 0xC3, HOOK_RAW_TRAMPOLINE_SIZE);
			memcpy(m_pTrampoline, m_pAddress, unCopyingSize);

			for (size_t unIndex = 0; unIndex < unCopyingSize;) {
#ifdef _M_X64
				if (!RD_SUCCESS(RdDecode(&ins, reinterpret_cast<unsigned char*>(m_pTrampoline) + unIndex, RD_CODE_64, RD_DATA_64))) {
#elif _M_IX86
				if (!RD_SUCCESS(RdDecode(&ins, reinterpret_cast<unsigned char*>(m_pTrampoline) + unIndex, RD_CODE_32, RD_DATA_32))) {
#endif
					g_HookStorage.DeAlloc(m_pTrampoline);
					m_pTrampoline = nullptr;
					m_unFirstInstructionSize = 0;
					g_HookStorage.DeAlloc(m_pWrapper);
					m_pWrapper = nullptr;
					g_Suspender.Resume();
					return false;
				}

				const size_t unAddress = reinterpret_cast<size_t>(m_pAddress) + unIndex + ins.Length;
				const size_t unTrampolineAddress = reinterpret_cast<size_t>(m_pTrampoline) + unIndex + ins.Length;

				if (ins.IsRipRelative && ins.HasDisp) {
					const size_t unTargetAddress = unAddress + static_cast<size_t>(ins.Displacement);
					const size_t unNewDisp = unTargetAddress - unTrampolineAddress;

					switch (ins.DispLength) {
						case 1: // FIXME: Impossible to do (FIX: Replace disp8 to disp32)
							*reinterpret_cast<unsigned char*>(reinterpret_cast<size_t>(m_pTrampoline) + unIndex + ins.DispOffset) = static_cast<unsigned char>(unNewDisp & 0xFF);
							break;
						case 2: // FIXME: Possible crash (FIX: Same as disp8)
							*reinterpret_cast<unsigned short*>(reinterpret_cast<size_t>(m_pTrampoline) + unIndex + ins.DispOffset) = static_cast<unsigned short>(unNewDisp & 0xFFFF);
							break;
						case 4:
							*reinterpret_cast<unsigned int*>(reinterpret_cast<size_t>(m_pTrampoline) + unIndex + ins.DispOffset) = static_cast<unsigned int>(unNewDisp & 0xFFFFFFFF);
							break;
						default:
							g_HookStorage.DeAlloc(m_pTrampoline);
							m_pTrampoline = nullptr;
							m_unFirstInstructionSize = 0;
							g_HookStorage.DeAlloc(m_pWrapper);
							m_pWrapper = nullptr;
							g_Suspender.Resume();
							return false;
					}
				} else if (ins.HasRelOffs) {
					const size_t unTargetAddress = unAddress + static_cast<size_t>(ins.RelativeOffset);
					const size_t unNewOffset = unTargetAddress - unTrampolineAddress;

					switch (ins.RelOffsLength) {
						case 1: // FIXME: Impossible to do (FIX: Replace rel8 to rel32)
							*reinterpret_cast<unsigned char*>(reinterpret_cast<size_t>(m_pTrampoline) + unIndex + ins.RelOffsOffset) = static_cast<unsigned char>(unNewOffset & 0xFF);
							break;
						case 2: // FIXME: Possible error (FIX: Same as rel8)
							*reinterpret_cast<unsigned short*>(reinterpret_cast<size_t>(m_pTrampoline) + unIndex + ins.RelOffsOffset) = static_cast<unsigned short>(unNewOffset & 0xFFFF);
							break;
						case 4:
							*reinterpret_cast<unsigned int*>(reinterpret_cast<size_t>(m_pTrampoline) + unIndex + ins.RelOffsOffset) = static_cast<unsigned int>(unNewOffset & 0xFFFFFFFF);
							break;
						default:
							g_HookStorage.DeAlloc(m_pTrampoline);
							m_pTrampoline = nullptr;
							m_unFirstInstructionSize = 0;
							g_HookStorage.DeAlloc(m_pWrapper);
							m_pWrapper = nullptr;
							g_Suspender.Resume();
							return false;
					}
				}

				unIndex += ins.Length;
			}

			unsigned char* pJumpToOriginal = reinterpret_cast<unsigned char*>(m_pTrampoline) + unCopyingSize;
			const size_t unFromTrampolineJumpOffset = __is_relative(reinterpret_cast<char*>(m_pAddress) + unJumpToWrapperSize, pJumpToOriginal);
			if (unFromTrampolineJumpOffset) { // E9 00 00 00 00 - jmp rel32
				pJumpToOriginal[0] = 0xE9;
				*reinterpret_cast<unsigned int*>(pJumpToOriginal + 1) = static_cast<unsigned int>(unFromTrampolineJumpOffset & 0xFFFFFFFF) - 5;
			} else {
#ifdef _M_X64
				// C7 44 24 F8 44332211 - mov [rsp-0x8], 0x11223344
				// C7 44 24 FC 44332211 - mov [rsp-0x4], 0x11223344
				// FF 64 24 F8 - jmp [rsp-8]

				const size_t unAddress = reinterpret_cast<size_t>(m_pAddress) + unJumpToWrapperSize;

				pJumpToOriginal[ 0] = 0xC7;
				pJumpToOriginal[ 1] = 0x44;
				pJumpToOriginal[ 2] = 0x24;
				pJumpToOriginal[ 3] = 0xF8;

				*reinterpret_cast<unsigned int*>(pJumpToOriginal + 4) = unAddress & 0xFFFFFFFF;

				pJumpToOriginal[ 8] = 0xC7;
				pJumpToOriginal[ 9] = 0x44;
				pJumpToOriginal[10] = 0x24;
				pJumpToOriginal[11] = 0xFC;

				*reinterpret_cast<unsigned int*>(pJumpToOriginal + 12) = (unAddress >> 32) & 0xFFFFFFFF;

				pJumpToOriginal[16] = 0xFF;
				pJumpToOriginal[17] = 0x64;
				pJumpToOriginal[18] = 0x24;
				pJumpToOriginal[19] = 0xF8;
#elif _M_IX86
				// C7 44 24 FC 44332211 - mov [esp-0x4], 0x11223344
				// FF 64 24 FC - jmp [esp-4]

				const size_t unAddress = reinterpret_cast<size_t>(m_pAddress) + unJumpToWrapperSize;

				pJumpToOriginal[ 0] = 0xC7;
				pJumpToOriginal[ 1] = 0x44;
				pJumpToOriginal[ 2] = 0x24;
				pJumpToOriginal[ 3] = 0xFC;

				*reinterpret_cast<unsigned int*>(pJumpToOriginal + 4) = unAddress & 0xFFFFFFFF;

				pJumpToOriginal[ 8] = 0xFF;
				pJumpToOriginal[ 9] = 0x64;
				pJumpToOriginal[10] = 0x24;
				pJumpToOriginal[11] = 0xFC;
#endif
			}

			if (!Protection(m_pTrampoline, HOOK_RAW_TRAMPOLINE_SIZE, false).ChangeProtection(PAGE_EXECUTE_READ)) {
				g_HookStorage.DeAlloc(m_pTrampoline);
				m_pTrampoline = nullptr;
				m_unFirstInstructionSize = 0;
				g_HookStorage.DeAlloc(m_pWrapper);
				m_pWrapper = nullptr;
				g_Suspender.Resume();
				return false;
			}

			m_unOriginalBytes = unCopyingSize;

			m_pOriginalBytes = std::make_unique<unsigned char[]>(unCopyingSize);
			if (!m_pOriginalBytes) {
				m_unOriginalBytes = 0;
				g_HookStorage.DeAlloc(m_pTrampoline);
				m_pTrampoline = nullptr;
				m_unFirstInstructionSize = 0;
				g_HookStorage.DeAlloc(m_pWrapper);
				m_pWrapper = nullptr;
				g_Suspender.Resume();
				return false;
			}

			memcpy(m_pOriginalBytes.get(), m_pAddress, unCopyingSize);

			Protection JumpToHookProtection(m_pAddress, unCopyingSize, false);
			if (!JumpToHookProtection.ChangeProtection(PAGE_READWRITE)) {
				m_pOriginalBytes = nullptr;
				m_unOriginalBytes = 0;
				g_HookStorage.DeAlloc(m_pTrampoline);
				m_pTrampoline = nullptr;
				m_unFirstInstructionSize = 0;
				g_HookStorage.DeAlloc(m_pWrapper);
				m_pWrapper = nullptr;
				g_Suspender.Resume();
				return false;
			}

			memset(m_pAddress, 0x90, unCopyingSize);

			unsigned char* pJumpToWrapper = reinterpret_cast<unsigned char*>(m_pAddress);
			if (unJumpToWrapperOffset) { // E9 00 00 00 00 - jmp rel32
				pJumpToWrapper[0] = 0xE9;
				*reinterpret_cast<unsigned int*>(pJumpToWrapper + 1) = static_cast<unsigned int>(unJumpToWrapperOffset & 0xFFFFFFFF) - 5;
			} else {
#ifdef _M_X64
				// C7 44 24 F8 44332211 - mov [rsp-0x8], 0x11223344 ; Low
				// C7 44 24 FC 44332211 - mov [rsp-0x4], 0x11223344 ; High
				// FF 64 24 F8 - jmp [rsp-8]

				const size_t unAddress = reinterpret_cast<size_t>(m_pWrapper);

				pJumpToWrapper[ 0] = 0xC7;
				pJumpToWrapper[ 1] = 0x44;
				pJumpToWrapper[ 2] = 0x24;
				pJumpToWrapper[ 3] = 0xF8;

				*reinterpret_cast<unsigned int*>(pJumpToWrapper + 4) = unAddress & 0xFFFFFFFF;

				pJumpToWrapper[ 8] = 0xC7;
				pJumpToWrapper[ 9] = 0x44;
				pJumpToWrapper[10] = 0x24;
				pJumpToWrapper[11] = 0xFC;

				*reinterpret_cast<unsigned int*>(pJumpToWrapper + 12) = (unAddress >> 32) & 0xFFFFFFFF;

				pJumpToWrapper[16] = 0xFF;
				pJumpToWrapper[17] = 0x64;
				pJumpToWrapper[18] = 0x24;
				pJumpToWrapper[19] = 0xF8;
#elif _M_IX86
				// C7 44 24 FC 44332211 - mov [esp-0x4], 0x11223344
				// FF 64 24 FC - jmp [esp-4]

				const size_t unAddress = reinterpret_cast<size_t>(m_pWrapper);

				pJumpToWrapper[ 0] = 0xC7;
				pJumpToWrapper[ 1] = 0x44;
				pJumpToWrapper[ 2] = 0x24;
				pJumpToWrapper[ 3] = 0xFC;

				*reinterpret_cast<unsigned int*>(pJumpToWrapper + 4) = unAddress & 0xFFFFFFFF;

				pJumpToWrapper[ 8] = 0xFF;
				pJumpToWrapper[ 9] = 0x64;
				pJumpToWrapper[10] = 0x24;
				pJumpToWrapper[11] = 0xFC;
#endif
			}

			JumpToHookProtection.RestoreProtection();

			g_Suspender.Resume();
			return true;
		}

		bool RawHook::UnHook() {
			if (!g_Suspender.Suspend()) {
				return false;
			}

			if (!m_bInitialized || !m_pAddress || !m_pWrapper || !m_pTrampoline) {
				g_Suspender.Resume();
				return false;
			}

			for (size_t unIndex = 0; unIndex < HOOK_RAW_WRAPPER_SIZE; ++unIndex) {
				g_Suspender.FixExecutionAddress(reinterpret_cast<unsigned char*>(m_pWrapper) + unIndex, reinterpret_cast<unsigned char*>(m_pAddress));
			}

			for (size_t unIndex = 0; unIndex < HOOK_RAW_TRAMPOLINE_SIZE; ++unIndex) {
				g_Suspender.FixExecutionAddress(reinterpret_cast<unsigned char*>(m_pTrampoline) + unIndex, reinterpret_cast<unsigned char*>(m_pAddress) + unIndex);
			}

			Protection HookProtection(m_pAddress, m_unOriginalBytes, false);
			if (!HookProtection.ChangeProtection(PAGE_READWRITE)) {
				g_Suspender.Resume();
				return false;
			}

			memcpy(m_pAddress, m_pOriginalBytes.get(), m_unOriginalBytes);

			HookProtection.RestoreProtection();

			m_pOriginalBytes = nullptr;
			m_unOriginalBytes = 0;
			g_HookStorage.DeAlloc(m_pTrampoline);
			m_pTrampoline = nullptr;
			m_unFirstInstructionSize = 0;
			g_HookStorage.DeAlloc(m_pWrapper);
			m_pWrapper = nullptr;

			g_Suspender.Resume();
			return true;
		}

		void* RawHook::GetTrampoline() const {
			return m_pTrampoline;
		}

		unsigned char RawHook::GetFirstInstructionSize() const {
			return m_unFirstInstructionSize;
		}
	}
}
